{"mappings":"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B;I,mB;I,W;I,O;I,W;I,qB;I,iB;I,Y;I,a;I,sB;I,wB;I,kB;I,yB;I,gB;I,a;I,yB;I,S;I,e;I,c;I,c;I,Y;I,a;I,a;I,0B;I,U;I,2B;I,kB;I,sB;I,sB;I,uB;I,4B;I,U;I,c;I,c;I,I;I,W;I,e;I,a;I,O;I,Q;I,mB;I,mB;I,c;I,S;I,oB;I,Q;I,sB;I,mB;I,O;I,gB;I,U;I,4B;I,gC;A;A,O,c,C,S,kC;I,Y;I,K;Q,O,oB,O;I;A;A,O,c,C,S,c;I,Y;I,K;Q,O,Y,O;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,a,O;I;A;A,O,c,C,S,4B;I,Y;I,K;Q,O,0B,O;I;A;A,O,c,C,S,c;I,Y;I,K;Q,O,Y,O;I;A;A,O,c,C,S,8B;I,Y;I,K;Q,O,4B,O;I;A;A,O,c,C,S,S;I,Y;I,K;Q,O,O,O;I;A;A,O,c,C,S,a;I,Y;I,K;Q,O,W,O;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,qB,O;I;A;A,O,c,C,S,a;I,Y;I,K;Q,O,W,O;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,iB,O;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,qB,O;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,mB,O;I;A;A,O,c,C,S,qC;I,Y;I,K;Q,O,mC,O;I;A;A,O,c,C,S,6B;I,Y;I,K;Q,O,qB,O;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,a,O;I;A;A,O,c,C,S,yB;I,Y;I,K;Q,O,uB,O;I;A;A,O,c,C,S,8B;I,Y;I,K;Q,O,4B,O;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,sB,O;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,wB,O;I;A;A,O,c,C,S,2B;I,Y;I,K;Q,O,yB,O;I;A;A,O,c,C,S,Y;I,Y;I,K;Q,O,U,O;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,kB,O;I;A;A,O,c,C,S,M;I,Y;I,K;Q,O,I,O;I;A;A,O,c,C,S,a;I,Y;I,K;Q,O,W,O;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,e,O;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,a,O;I;A;A,O,c,C,S,S;I,Y;I,K;Q,O,O,O;I;A;A,O,c,C,S,U;I,Y;I,K;Q,O,Q,O;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,mB,O;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,mB,O;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,c,O;I;A;A,O,c,C,S,W;I,Y;I,K;Q,O,S,O;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,oB,O;I;A;A,O,c,C,S,U;I,Y;I,K;Q,O,Q,O;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,sB,O;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,mB,O;I;A;A,O,c,C,S,S;I,Y;I,K;Q,O,O,O;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,gB,O;I;A;A,O,c,C,S,6B;I,Y;I,K;Q,O,2B,O;I;A;A,Q,K,G,K;A,O,c,C,S,kB;I,Y;I,K;Q,O,gB,O;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,kB,O;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,sB,O;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,sB,O;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,c,O;I;A;A,O,c,C,S,2B;I,Y;I,K;Q,O,yB,O;I;A;A,O,c,C,S,W;I,Y;I,K;Q,O,S,O;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,e,O;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,c,O;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,c,O;I;A;A,O,c,C,S,c;I,Y;I,K;Q,O,Y,O;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,a,O;I;A;A,O,c,C,S,Y;I,Y;I,K;Q,O,U,O;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,c,O;I;A;A,O,c,C,S,Y;I,Y;I,K;Q,O,U,O;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,a,O;I;A;AEtGf,IAAAqgB,oBAAAC,QAAA;AACA,IAAAC,eAAAD,QAAA;AACA,IAAAE,iBAAAF,QAAA;AAGA,IAAAG,cAAAH,QAAA;AACA,IAAAI,SAAAJ,QAAA;AAAAvb,OAAAuE,IAAA,CAAAoX,QAAAte,OAAA,CAAA,SAAAkE,GAAA;IAAA,IAAAA,QAAA,aAAAA,QAAA,cAAA;IAAA,IAAAvB,OAAAE,SAAA,CAAAiU,cAAA,CAAArR,IAAA,CAAA8Y,cAAAra,MAAA;IAAA,IAAAA,OAAAsa,WAAAA,OAAA,CAAAta,IAAA,KAAAoa,MAAA,CAAApa,IAAA,EAAA;IAAAvB,OAAA8b,cAAA,CAAAD,SAAAta,KAAAvB;QAAA+b,YAAAA;QAAAC,KAAA;YAAA,OAAAL,MAAA,CAAApa,IAAA;QAAA;IAAA;AAAA;AAGA,IAAA0a,qCAAAV,QAAA;AAEA,IAAAW,uBAAAX,QAAA;AAEA,IAAAY,qBAAAZ,QAAA;AACA,IAAAa,UAAAb,QAAA;AAAAvb,OAAAuE,IAAA,CAAA6X,SAAA/e,OAAA,CAAA,SAAAkE,GAAA;IAAA,IAAAA,QAAA,aAAAA,QAAA,cAAA;IAAA,IAAAvB,OAAAE,SAAA,CAAAiU,cAAA,CAAArR,IAAA,CAAA8Y,cAAAra,MAAA;IAAA,IAAAA,OAAAsa,WAAAA,OAAA,CAAAta,IAAA,KAAA6a,OAAA,CAAA7a,IAAA,EAAA;IAAAvB,OAAA8b,cAAA,CAAAD,SAAAta,KAAAvB;QAAA+b,YAAAA;QAAAC,KAAA;YAAA,OAAAI,OAAA,CAAA7a,IAAA;QAAA;IAAA;AAAA;AACA,IAAA8a,aAAAd,QAAA;AAAAvb,OAAAuE,IAAA,CAAA8X,YAAAhf,OAAA,CAAA,SAAAkE,GAAA;IAAA,IAAAA,QAAA,aAAAA,QAAA,cAAA;IAAA,IAAAvB,OAAAE,SAAA,CAAAiU,cAAA,CAAArR,IAAA,CAAA8Y,cAAAra,MAAA;IAAA,IAAAA,OAAAsa,WAAAA,OAAA,CAAAta,IAAA,KAAA8a,UAAA,CAAA9a,IAAA,EAAA;IAAAvB,OAAA8b,cAAA,CAAAD,SAAAta,KAAAvB;QAAA+b,YAAAA;QAAAC,KAAA;YAAA,OAAAK,UAAA,CAAA9a,IAAA;QAAA;IAAA;AAAA;AACA,IAAA+a,eAAAf,QAAA;AAAAvb,OAAAuE,IAAA,CAAA+X,cAAAjf,OAAA,CAAA,SAAAkE,GAAA;IAAA,IAAAA,QAAA,aAAAA,QAAA,cAAA;IAAA,IAAAvB,OAAAE,SAAA,CAAAiU,cAAA,CAAArR,IAAA,CAAA8Y,cAAAra,MAAA;IAAA,IAAAA,OAAAsa,WAAAA,OAAA,CAAAta,IAAA,KAAA+a,YAAA,CAAA/a,IAAA,EAAA;IAAAvB,OAAA8b,cAAA,CAAAD,SAAAta,KAAAvB;QAAA+b,YAAAA;QAAAC,KAAA;YAAA,OAAAM,YAAA,CAAA/a,IAAA;QAAA;IAAA;AAAA;AAGA,IAAAgb,aAAAhB,QAAA;AACA,IAAAiB,SAAAjB,QAAA;AACA,IAAAkB,aAAAlB,QAAA;AACA,IAAAmB,uBAAAnB,QAAA;AACA,IAAAoB,mBAAApB,QAAA;AAGA,IAAAqB,cAAArB,QAAA;AACA,IAAAsB,eAAAtB,QAAA;AACA,IAAAuB,wBAAAvB,QAAA;AACA,IAAAwB,0BAAAxB,QAAA;AACA,IAAAyB,oBAAAzB,QAAA;AACA,IAAA0B,2BAAA1B,QAAA;AACA,IAAA2B,kBAAA3B,QAAA;AAGA,IAAA4B,UAAA5B,QAAA;AAAAvb,OAAAuE,IAAA,CAAA4Y,SAAA9f,OAAA,CAAA,SAAAkE,GAAA;IAAA,IAAAA,QAAA,aAAAA,QAAA,cAAA;IAAA,IAAAvB,OAAAE,SAAA,CAAAiU,cAAA,CAAArR,IAAA,CAAA8Y,cAAAra,MAAA;IAAA,IAAAA,OAAAsa,WAAAA,OAAA,CAAAta,IAAA,KAAA4b,OAAA,CAAA5b,IAAA,EAAA;IAAAvB,OAAA8b,cAAA,CAAAD,SAAAta,KAAAvB;QAAA+b,YAAAA;QAAAC,KAAA;YAAA,OAAAmB,OAAA,CAAA5b,IAAA;QAAA;IAAA;AAAA;AACA,IAAA6b,UAAA7B,QAAA;AAAAvb,OAAAuE,IAAA,CAAA6Y,SAAA/f,OAAA,CAAA,SAAAkE,GAAA;IAAA,IAAAA,QAAA,aAAAA,QAAA,cAAA;IAAA,IAAAvB,OAAAE,SAAA,CAAAiU,cAAA,CAAArR,IAAA,CAAA8Y,cAAAra,MAAA;IAAA,IAAAA,OAAAsa,WAAAA,OAAA,CAAAta,IAAA,KAAA6b,OAAA,CAAA7b,IAAA,EAAA;IAAAvB,OAAA8b,cAAA,CAAAD,SAAAta,KAAAvB;QAAA+b,YAAAA;QAAAC,KAAA;YAAA,OAAAoB,OAAA,CAAA7b,IAAA;QAAA;IAAA;AAAA;AAGA,IAAA8b,eAAA9B,QAAA;AACA,IAAA+B,2BAAA/B,QAAA;AACA,IAAAgC,WAAAhC,QAAA;AACA,IAAAiC,iBAAAjC,QAAA;AACA,IAAAkC,gBAAAlC,QAAA;AACA,IAAAmC,gBAAAnC,QAAA;AACA,IAAAoC,cAAApC,QAAA;AACA,IAAAqC,eAAArC,QAAA;AACA,IAAAsC,eAAAtC,QAAA;AAGA,IAAAuC,UAAAvC,QAAA;AAAAvb,OAAAuE,IAAA,CAAAuZ,SAAAzgB,OAAA,CAAA,SAAAkE,GAAA;IAAA,IAAAA,QAAA,aAAAA,QAAA,cAAA;IAAA,IAAAvB,OAAAE,SAAA,CAAAiU,cAAA,CAAArR,IAAA,CAAA8Y,cAAAra,MAAA;IAAA,IAAAA,OAAAsa,WAAAA,OAAA,CAAAta,IAAA,KAAAuc,OAAA,CAAAvc,IAAA,EAAA;IAAAvB,OAAA8b,cAAA,CAAAD,SAAAta,KAAAvB;QAAA+b,YAAAA;QAAAC,KAAA;YAAA,OAAA8B,OAAA,CAAAvc,IAAA;QAAA;IAAA;AAAA;AAGA,IAAAwc,4BAAAxC,QAAA;AACA,IAAAyC,YAAAzC,QAAA;AACA,IAAA0C,6BAAA1C,QAAA;AACA,IAAA2C,oBAAA3C,QAAA;AAIA,IAAA4C,wBAAA5C,QAAA;AACA,IAAA6C,wBAAA7C,QAAA;AAGA,IAAA8C,yBAAA9C,QAAA;AACA,IAAA+C,8BAAA/C,QAAA;AAGA,IAAAgD,YAAAhD,QAAA;AACAvb,OAAAuE,IAAA,CAAAga,WAAAlhB,OAAA,CAAA,SAAAkE,GAAA;IAAA,IAAAA,QAAA,aAAAA,QAAA,cAAA;IAAA,IAAAvB,OAAAE,SAAA,CAAAiU,cAAA,CAAArR,IAAA,CAAA8Y,cAAAra,MAAA;IAAA,IAAAA,OAAAsa,WAAAA,OAAA,CAAAta,IAAA,KAAAgd,SAAA,CAAAhd,IAAA,EAAA;IAAAvB,OAAA8b,cAAA,CAAAD,SAAAta,KAAAvB;QAAA+b,YAAAA;QAAAC,KAAA;YAAA,OAAAuC,SAAA,CAAAhd,IAAA;QAAA;IAAA;AAAA;AACA,IAAAid,gBAAAjD,QAAA;AAGA,IAAAkD,gBAAAlD,QAAA;AAGA,IAAAmD,MAAAnD,QAAA;AACA,IAAAoD,aAAApD,QAAA;AACA,IAAAqD,iBAAArD,QAAA;AACA,IAAAsD,eAAAtD,QAAA;AACA,IAAAuD,SAAAvD,QAAA;AACA,IAAAwD,UAAAxD,QAAA;AACA,IAAAyD,qBAAAzD,QAAA;AACA,IAAA0D,qBAAA1D,QAAA;AACA,IAAA2D,gBAAA3D,QAAA;AACA,IAAA4D,WAAA5D,QAAA;AACA,IAAA6D,sBAAA7D,QAAA;AACA,IAAA8D,UAAA9D,QAAA;AACA,IAAA+D,wBAAA/D,QAAA;AACA,IAAAgE,qBAAAhE,QAAA;AACA,IAAAiE,SAAAjE,QAAA;AACA,IAAAkE,kBAAAlE,QAAA;AACA,IAAAmE,YAAAnE,QAAA;AACA,IAAAoE,8BAAApE,QAAA;AACA,IAAAqE,UAAArE,QAAA;AAAAvb,OAAAuE,IAAA,CAAAqb,SAAAviB,OAAA,CAAA,SAAAkE,GAAA;IAAA,IAAAA,QAAA,aAAAA,QAAA,cAAA;IAAA,IAAAvB,OAAAE,SAAA,CAAAiU,cAAA,CAAArR,IAAA,CAAA8Y,cAAAra,MAAA;IAAA,IAAAA,OAAAsa,WAAAA,OAAA,CAAAta,IAAA,KAAAqe,OAAA,CAAAre,IAAA,EAAA;IAAAvB,OAAA8b,cAAA,CAAAD,SAAAta,KAAAvB;QAAA+b,YAAAA;QAAAC,KAAA;YAAA,OAAA4D,OAAA,CAAAre,IAAA;QAAA;IAAA;AAAA;AAYA,IAAAse,sBAAAtE,QAAA;AATO,MAAMuE,QAAKjE,QAAAiE,KAAA,GAAG;IACnBC,kBAAAA,kBAAAA,OAAgB;IAChBC,aAAAA,aAAAA,OAAW;IACXC,eAAAA,eAAAA,OAAAA;AACF;AASEpE,QAAQqE,oBAAoB,GAE1B3E,QAAQ,mBAAwC4E,OAAO;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G,K;AEhH3D,IAAAR,8BAAApE,QAAA;AAEA,MAAMwE,mBAAmB,AAAA,CAAA,GAAAK,4BAAAA,OAA0B,AAA1BA,EAA2B;AAAmB,IAAAC,WAAAxE,QAAAsE,OAAA,GAExDJ;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AEJf,IAAAN,kBAAAlE,QAAA;AAUe,SAAS6E,2BACtBE,KAAa,EACbC,YAAsB;IAEtB,MAAM9K,QAAQ6K,MAAMzc,KAAK,CAAC;IAE1B,OAAQ2c,CAAAA,SAAmB,AAAA,CAAA,GAAAC,gBAAAA,OAAc,AAAdA,EAAeD,QAAQ/K,OAAO8K;AAC3D;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AEjBA,IAAA5E,SAAAJ,QAAA;AAee,SAASkF,eACtBD,MAAiC,EACjCF,KAAwB,EACxBC,YAAsB;IAGtB,IAAI,CAAC,AAAA,CAAA,GAAAG,OAAAA,kBAAkB,AAAlBA,EAAmBF,SAAS,OAAO;IAExC,MAAM/K,QAAQtP,MAAMC,OAAO,CAACka,SAASA,QAAQA,MAAMzc,KAAK,CAAC;IACzD,MAAM8c,QAAQ,EAAE;IAEhB,IAAIC;IACJ,IAAKA,OAAOJ,QAAQ,AAAA,CAAA,GAAAE,OAAAA,kBAAkB,AAAlBA,EAAmBE,OAAOA,OAAOA,KAAKC,MAAM,CAC9DF,MAAM1Z,IAAI,CAAC2Z,KAAKE,QAAQ;IAE1BH,MAAM1Z,IAAI,CAAC2Z;IAEX,IAAID,MAAMzf,MAAM,GAAGuU,MAAMvU,MAAM,EAAE,OAAO;IACxC,IAAI,CAACqf,gBAAgBI,MAAMzf,MAAM,GAAGuU,MAAMvU,MAAM,EAAE,OAAO;IAEzD,IAAK,IAAIgG,IAAI,GAAG6Z,IAAIJ,MAAMzf,MAAM,GAAG,GAAGgG,IAAIuO,MAAMvU,MAAM,EAAEgG,KAAK6Z,IAAK;QAChE,MAAMH,OAAOD,KAAK,CAACI,EAAE;QACrB,IAAIzkB;QACJ,IAAI,AAAA,CAAA,GAAA0kB,OAAAA,YAAY,AAAZA,EAAaJ,OACftkB,QAAQskB,KAAK5jB,IAAI;aACZ,IAAI,AAAA,CAAA,GAAAikB,OAAAA,eAAe,AAAfA,EAAgBL,OACzBtkB,QAAQskB,KAAKtkB,KAAK;aACb,IAAI,AAAA,CAAA,GAAA4kB,OAAAA,gBAAgB,AAAhBA,EAAiBN,OAC1BtkB,QAAQ;aAER,OAAO;QAGT,IAAImZ,KAAK,CAACvO,EAAE,KAAK5K,OAAO,OAAO;IACjC;IAEA,OAAO;AACT;;;A;A,O,c,C,S,c;I,O;A;A,Q,U,G;A,Q,mB,G;A,Q,qB,G;A,Q,iB,G;A,Q,c,G;A,Q,qB,G;A,Q,yB,G;A,Q,sB,G;A,Q,mB,G;A,Q,iB,G;A,Q,e,G;A,Q,Q,G;A,Q,kB,G;A,Q,gB,G;A,Q,O,G;A,Q,a,G;A,Q,gB,G;A,Q,gB,G;A,Q,8B,G;A,Q,uB,G;A,Q,gB,G;A,Q,gB,G;A,Q,a,G;A,Q,O,G;A,Q,uB,G;A,Q,W,G;A,Q,kB,G;A,Q,iB,G;A,Q,iB,G;A,Q,a,G;A,Q,oB,G;A,Q,sB,G;A,Q,e,G;A,Q,qB,G;A,Q,a,G;A,Q,uB,G;A,Q,mB,G;A,Q,mB,G;A,Q,gB,G;A,Q,a,G;A,Q,c,G;A,Q,6B,G;A,Q,0B,G;A,Q,iB,G;A,Q,kB,G;A,Q,e,G;A,Q,sB,G;A,Q,mB,G;A,Q,kB,G;A,Q,iB,G;A,Q,mB,G;A,Q,W,G;A,Q,W,G;A,Q,kB,G;A,Q,c,G;A,Q,kB,G;A,Q,gB,G;A,Q,qB,G;A,Q,U,G;A,Q,iB,G;A,Q,mB,G;A,Q,iB,G;A,Q,qB,G;A,Q,Y,G;A,Q,gB,G;A,Q,kB,G;A,Q,gB,G;A,Q,kB,G;A,Q,gB,G;A,Q,sB,G;A,Q,sB,G;A,Q,mB,G;A,Q,0B,G;A,Q,wB,G;A,Q,wB,G;A,Q,0B,G;A,Q,iB,G;A,Q,Y,G;A,Q,qB,G;A,Q,mB,G;A,Q,M,G;A,Q,M,G;A,Q,oB,G;A,Q,iB,G;A,Q,e,G;A,Q,U,G;A,Q,K,G;A,Q,gB,G;A,Q,gB,G;A,Q,c,G;A,Q,e,G;A,Q,U,G;A,Q,qB,G;A,Q,oB,G;A,Q,gB,G;A,Q,wB,G;A,Q,mB,G;A,Q,uB,G;A,Q,Y,G;A,Q,a,G;A,Q,W,G;A,Q,Q,G;A,Q,iB,G;A,Q,mB,G;A,Q,wB,G;A,Q,kB,G;A,Q,0B,G;A,Q,2B,G;A,Q,iB,G;A,Q,mB,G;A,Q,mB,G;A,Q,sB,G;A,Q,kB,G;A,Q,yB,G;A,Q,sB,G;A,Q,4B,G;A,Q,K,G;A,Q,c,G;A,Q,mB,G;A,Q,oB,G;A,Q,Y,G;A,Q,oB,G;A,Q,wB,G;A,Q,a,G;A,Q,e,G;A,Q,qB,G;A,Q,mB,G;A,Q,mB,G;A,Q,oB,G;A,Q,oB,G;A,Q,gB,G;A,Q,S,G;A,Q,M,G;A,Q,kB,G;A,Q,S,G;A,Q,mB,G;A,Q,M,G;A,Q,kB,G;A,Q,c,G;A,Q,Q,G;A,Q,e,G;A,Q,qB,G;A,Q,mB,G;A,Q,kB,G;A,Q,iB,G;A,Q,e,G;A,Q,M,G;A,Q,a,G;A,Q,2B,G;A,Q,wB,G;A,Q,e,G;A,Q,6B,G;A,Q,sB,G;A,Q,gB,G;A,Q,kB,G;A,Q,c,G;A,Q,c,G;A,Q,e,G;A,Q,gB,G;A,Q,sB,G;A,Q,wB,G;A,Q,mB,G;A,Q,wB,G;A,Q,oB,G;A,Q,0B,G;A,Q,Y,G;A,Q,wB,G;A,Q,2B,G;A,Q,0B,G;A,Q,yB,G;A,Q,S,G;A,Q,a,G;A,Q,sB,G;A,Q,+B,G;A,Q,yB,G;A,Q,a,G;A,Q,S,G;A,Q,a,G;A,Q,S,G;A,Q,U,G;A,Q,S,G;A,Q,yB,G;A,Q,kB,G;A,Q,e,G;A,Q,c,G;A,Q,a,G;A,Q,c,G;A,Q,iB,G;A,Q,U,G;A,Q,oB,G;A,Q,e,G;A,Q,gB,G;A,Q,c,G;A,Q,W,G;A,Q,a,G;A,Q,e,G;A,Q,6B,G;A,Q,sB,G;A,Q,O,G;A,Q,Y,G;A,Q,iB,G;A,Q,sB,G;A,Q,c,G;A,Q,a,G;A,Q,gB,G;A,Q,Y,G;A,Q,iB,G;A,Q,kB,G;A,Q,4B,G;A,Q,mB,G;A,Q,iC,G;A,Q,mB,G;A,Q,mB,G;A,Q,iB,G;A,Q,c,G;A,Q,mB,G;A,Q,c,G;A,Q,oB,G;A,Q,+B,G;A,Q,2B,G;A,Q,gB,G;A,Q,2B,G;A,Q,c,G;A,Q,kB,G;A,Q,qB,G;A,Q,a,G;A,Q,2B,G;A,Q,iB,G;A,Q,wB,G;A,Q,oB,G;A,Q,oB,G;A,Q,e,G;A,Q,c,G;A,Q,mB,G;A,Q,e,G;A,Q,qB,G;A,Q,oB,G;A,Q,8B,G;A,Q,gB,G;A,Q,qB,G;A,Q,e,G;A,Q,iB,G;A,Q,iB,G;A,Q,gB,G;A,Q,qB,G;A,Q,qB,G;A,Q,qB,G;A,Q,iB,G;A,Q,Y,G;A,Q,uB,G;A,Q,iB,G;A,Q,iB,G;A,Q,Y,G;A,Q,a,G;A,Q,Q,G;A,Q,wB,G;A,Q,kB,G;A,Q,iB,G;A,Q,e,G;A,Q,e,G;A,Q,gB,G;A,Q,iB,G;A,Q,4B,G;A,Q,8B,G;A,Q,iB,G;A,Q,a,G;A,Q,iB,G;A,Q,oB,G;A,Q,a,G;A,Q,kB,G;A,Q,e,G;A,Q,0B,G;A,Q,iB,G;A,Q,iB,G;A,Q,gB,G;A,Q,gB,G;A,Q,oB,G;A,Q,gB,G;A,Q,gB,G;A,Q,c,G;A,Q,iB,G;A,Q,qB,G;A,Q,W,G;A,Q,gB,G;A,Q,oB,G;A,Q,e,G;A,Q,0B,G;A,Q,4B,G;A,Q,Y,G;A,Q,sB,G;A,Q,iB,G;A,Q,W,G;A,Q,qB,G;A,Q,kB,G;A,Q,mB,G;A,Q,uB,G;A,Q,qB,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,Q,e,G;A,Q,a,G;A,Q,gB,G;A,Q,c,G;A,Q,c,G;A,Q,c,G;A,Q,4B,G;A,Q,qB,G;A,Q,c,G;A,Q,c,G;A,Q,W,G;A,Q,qB,G;A,Q,S,G;A,Q,gB,G;A,Q,e,G;A,Q,e,G;A,Q,W,G;A,Q,kB,G;A,Q,oB,G;A,Q,a,G;A,Q,qB,G;A,Q,iB,G;A,Q,iB,G;A,Q,c,G;A,Q,Y,G;A,Q,2B,G;A,Q,wB,G;A,Q,e,G;A,Q,gB,G;A,Q,a,G;A,Q,oB,G;A,Q,iB,G;A,Q,gB,G;A,Q,e,G;A,Q,iB,G;A,Q,S,G;A,Q,S,G;A,Q,gB,G;A,Q,Y,G;A,Q,gB,G;A,Q,c,G;A,Q,mB,G;A,Q,e,G;A,Q,iB,G;A,Q,e,G;A,Q,mB,G;A,Q,c,G;A,Q,gB,G;A,Q,c,G;A,Q,gB,G;A,Q,c,G;A,Q,oB,G;A,Q,oB,G;A,Q,wB,G;A,Q,sB,G;A,Q,sB,G;A,Q,wB,G;A,Q,e,G;A,Q,mB,G;A,Q,I,G;A,Q,c,G;A,Q,c,G;A,Q,Y,G;A,Q,mB,G;A,Q,kB,G;A,Q,sB,G;A,Q,iB,G;A,Q,qB,G;A,Q,U,G;A,Q,W,G;A,Q,M,G;A,Q,e,G;A,Q,iB,G;A,Q,sB,G;A,Q,gB,G;A,Q,wB,G;A,Q,e,G;A,Q,iB,G;A,Q,iB,G;A,Q,oB,G;A,Q,gB,G;A,Q,uB,G;A,Q,oB,G;A,Q,0B,G;A,Q,Y,G,Q,Y,G;A,Q,iB,G,Q,iB,G;A,Q,kB,G,Q,kB,G;A,Q,U,G,Q,U,G;A,Q,kB,G,Q,kB,G;A,Q,sB,G,Q,sB,G;A,Q,W,G,Q,W,G;A,Q,a,G,Q,a,G;A,Q,mB,G,Q,mB,G;A,Q,iB,G,Q,iB,G;A,Q,iB,G,Q,iB,G;A,Q,kB,G,Q,kB,G;A,Q,kB,G,Q,kB,G;A,Q,c,G,Q,c,G;A,Q,O,G,Q,O,G;A,Q,gB,G;A,Q,iB,G;A,Q,gB,G;A,Q,Y,G;A,Q,mB,G;A,Q,gB,G;A,Q,a,G;A,Q,I,G;A,Q,W,G;A,Q,yB,G;A,Q,sB,G;A,Q,a,G;A,Q,2B,G;A,Q,oB,G;A,Q,c,G;A,Q,gB,G;A,Q,Y,G;A,Q,a,G;A,Q,c,G;A,Q,oB,G;A,Q,sB,G;A,Q,iB,G;A,Q,sB,G;A,Q,kB,G;A,Q,wB,G;A,Q,U,G;A,Q,sB,G;A,Q,yB,G;A,Q,wB,G;A,Q,uB,G;A,Q,oB,G;A,Q,6B,G;A,Q,uB,G;A,Q,W,G;A,Q,W,G;A,Q,O,G;A,Q,uB,G;A,Q,gB,G;A,Q,a,G;A,Q,Y,G;A,Q,W,G;A,Q,Y,G;A,Q,e,G;A,Q,kB,G;A,Q,a,G;A,Q,c,G;A,Q,W,G;A,Q,a,G;A,Q,2B,G;A,Q,oB,G;A,Q,K,G;A,Q,U,G;A,Q,e,G;A,Q,oB,G;A,Q,wB,G;A,Q,e,G;A,Q,e,G;A,Q,c,G;A,Q,kB,G;A,Q,c,G;A,Q,c,G;A,Q,Y,G;A,Q,Y,G,Q,Y,G;A,Q,W,G,Q,W,G;A,Q,c,G,Q,c,G;A,Q,e,G,Q,e,G;A,Q,gB,G,Q,gB,G;A,Q,0B,G,Q,0B,G;A,Q,iB,G,Q,iB,G;A,Q,+B,G,Q,+B,G;A,Q,iB,G,Q,iB,G;A,Q,iB,G,Q,iB,G;A,Q,e,G,Q,e,G;A,Q,iB,G,Q,iB,G;A,Q,Y,G,Q,Y,G;A,Q,kB,G,Q,kB,G;A,Q,6B,G,Q,6B,G;A,Q,yB,G,Q,yB,G;A,Q,c,G,Q,c,G;A,Q,yB,G,Q,yB,G;A,Q,Y,G,Q,Y,G;A,Q,gB,G,Q,gB,G;A,Q,mB,G,Q,mB,G;A,Q,W,G,Q,W,G;A,Q,yB,G,Q,yB,G;A,Q,e,G,Q,e,G;A,Q,sB,G,Q,sB,G;A,Q,kB,G,Q,kB,G;A,Q,kB,G,Q,kB,G;A,Q,a,G,Q,a,G;A,Q,Y,G,Q,Y,G;A,Q,iB,G,Q,iB,G;A,Q,a,G,Q,a,G;A,Q,mB,G,Q,mB,G;A,Q,kB,G,Q,kB,G;A,Q,4B,G,Q,4B,G;A,Q,c,G,Q,c,G;A,Q,mB,G,Q,mB,G;A,Q,a,G,Q,a,G;A,Q,e,G,Q,e,G;A,Q,e,G,Q,e,G;A,Q,c,G,Q,c,G;A,Q,mB,G,Q,mB,G;A,Q,mB,G,Q,mB,G;A,Q,mB,G,Q,mB,G;A,Q,e,G,Q,e,G;A,Q,U,G,Q,U,G;A,Q,qB,G,Q,qB,G;A,Q,e,G,Q,e,G;A,Q,e,G,Q,e,G;A,Q,U,G,Q,U,G;A,Q,W,G,Q,W,G;A,Q,sB,G,Q,sB,G;A,Q,gB,G,Q,gB,G;A,Q,e,G,Q,e,G;A,Q,a,G,Q,a,G;A,Q,c,G,Q,c,G;A,Q,e,G,Q,e,G;A,Q,0B,G,Q,0B,G;A,Q,4B,G,Q,4B,G;A,Q,e,G,Q,e,G;A,Q,W,G,Q,W,G;A,Q,e,G,Q,e,G;A,Q,kB,G,Q,kB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A,SAAStrB,MAAMrf,KAAKI;AACtB;;;A;A,O,c,C,S,c;I,O;A;A,O,c,C,S,c;I,Y;I,K;Q,O,O,U;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,mB,kB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,2B;I,Y;I,K;Q,O,O,uB;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,c,Y;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,c,kB;I;A;A,O,c,C,S,8B;I,Y;I,K;Q,O,c,0B;I;A;A,Q,K,G,K;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;AE3CA,IAAA8qC,oBAAAlxB,QAAA;AACAA,QAAAA;AACAA,QAAAA;AACAA,QAAAA;AACAA,QAAAA;AACAA,QAAAA;AACAA,QAAAA;AACA,IAAAmxB,SAAAnxB,QAAA;AASA,IAAAoxB,gBAAApxB,QAAA;AAKA,IAAAqxB,qBAAArxB,QAAA;AAGEvb,OAAOuE,IAAI,CAACsoC,mBAAAA,kBAAkB,EAC9BxvC,OAAO,CAACyvC,CAAAA;IACRC,OAAAA,kBAAkB,CAACD,gBAAgB,GACjCC,OAAAA,kBAAkB,CAACF,mBAAAA,kBAAkB,CAACC,gBAAgB,CAAC;AAC3D;AAGAE,kBAAiBC,OAAAA,YAAY;AAC7BD,kBAAiBE,OAAAA,UAAU;AAC3BF,kBAAiBD,OAAAA,kBAAkB;AACnCC,kBAAiBZ,OAAAA,WAAW;AAC5BY,kBAAiBf,OAAAA,YAAY;AAC7Be,kBAAiBG,OAAAA,eAAe;AAEhCH,kBAAiBI,cAAAA,kBAAkB;AACnCJ,kBAAiBK,cAAAA,0BAA0B;AAE3C,MAAMC,QAAoBzxB,QAAAyxB,KAAA,GAAG,EAAE,CAACxiC,MAAM,CACpC9K,OAAOuE,IAAI,CAAC0oC,OAAAA,YAAY,GACxBjtC,OAAOuE,IAAI,CAACwoC,OAAAA,kBAAkB,GAC9B/sC,OAAOuE,IAAI,CAAC4oC,OAAAA,eAAe;;;AC5C7B;AAEA,IAAI,YAAY;AAEhB,gFAAgF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OAAO,OAAO;IACnC;IAGF,OAAO;AACT;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AEpBA,IAAApF,6BAAAhyB,QAAA;AAUe,SAAS+zB,kBACtBtyC,IAAY,EACZ61C,WAAoB,IAAI;IAExB,IAAI,OAAO71C,SAAS,UAAU,OAAO;IAErC,IAAI61C,UAAU;QAEZ,IAAI,AAAA,CAAA,GAAAnD,2BAAAA,SAAS,AAATA,EAAU1yC,SAAS,AAAA,CAAA,GAAA81C,2BAAAA,oBAAoB,AAApBA,EAAqB91C,MAAM,OAChD,OAAO;IAEX;IAEA,OAAO,AAAA,CAAA,GAAA+1C,2BAAAA,gBAAgB,AAAhBA,EAAiB/1C;AAC1B;;;A;A,O,c,C,S,c;I,O;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,Y,gB;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,Y,gB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,Y,iB;I;A;A,O,c,C,S,a;I,Y;I,K;Q,O,S,S;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,S,c;I;A;A,O,c,C,S,gC;I,Y;I,K;Q,O,S,4B;I;A;A,O,c,C,S,4B;I,Y;I,K;Q,O,S,wB;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,S,oB;I;A;AExBA,IAAAg2C,cAAAz3B,QAAA;AAKA,IAAA03B,WAAA13B,QAAA;;;A;A,O,c,C,S,c;I,O;A;A,Q,gB,G;A,Q,gB,G;A,Q,iB,G;AEMA,IAAI23B,+BAA+B;AAEnC,IAAIC,0BAA0B;AAE9B,MAAMC,0BAA0B,IAAIC,OAClC,MAAMH,+BAA+B;AAEvC,MAAMI,qBAAqB,IAAID,OAC7B,MAAMH,+BAA+BC,0BAA0B;AAGjED,+BAA+BC,0BAA0B;AAQzx+C,MAAMC,wBAAwjwB,SAASC,cAAclpC,IAAY,EAAEmpC,GAAsB;IACzD,IAAIC,MAAM;IACV,IAAK,IAAIzsC,IAAI,GAAGhG,SAASwyC,IAAIxyC,MAAM,EAAEgG,IAAIhG,QAAQgG,KAAK,EAAG;QACvDysC,OAAOD,GAAG,CAACxsC,EAAE;QACb,IAAIysC,MAAMppC,MAAM,OAAO;QAEvBopC,OAAOD,GAAG,CAACxsC,IAAI,EAAE;QACjB,IAAIysC,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AU,AAAA,CAAA,GAAA0B,OAAAA,eAAe,AAAfA,EAAgB;YAC1BtU,UAAU;QACZ;QACAmiB,OAAO;YACLvP,UAAU,AAAA,CAAA,GAAA0B,OAAAA,eAAe,AAAfA,EAAgB;YAC1BtU,UAAU;QACZ;QACAsS,YAAY;YACVM,UAAU,AAAA,CAAA,GAAAsC,OAAAA,cAAc,AAAdA,EAAe;YACzBlV,UAAU;QACZ;QACAnZ,SAAS;YACP+rB,UAAU,AAAA,CAAA,GAAAsC,OAAAA,cAAc,AAAdA,EAAe;YACzBlV,UAAU;QACZ;IACF;AACF;;;A;A,O,c,C,S,c;I,O;A;A,Q,kB,G,K;AE1oBO,MAAMuT,qBAAkBhxB,QAAAgxB,kBAAA,GAAG;IAChC+O,mBAAmB;AACrB;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AEFA,IAAA78B,UAAAxD,QAAA;AAGe,SAASsgC,WAAWj7B,IAAU;IAC3C,IAAI,CAAC,AAAA,CAAA,GAAAk7B,QAAAA,OAAM,AAANA,EAAOl7B,OAAO;QAAA,IAAAm7B;QACjB,MAAMn2C,OAAI,AAAAm2C,CAAAA,aAAGn7B,QAAI,OAAA,KAAA,IAAJA,KAAMhb,IAAI,AAAJA,KAAI,OAAAm2C,aAAI93C,KAAKsC,SAAS,CAACqa;QAC1C,MAAM,IAAIze,UAAW,CAAA,0BAAA,EAA4ByD,KAAK,CAAA,CAAE;IAC1D;AACF;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AERA,IAAA+V,SAAAJ,QAAA;AAGe,SAASugC,OAAOl7B,IAAS;IACtC,OAAO,CAAC,CAAEA,CAAAA,QAAQqsB,OAAAA,YAAY,CAACrsB,KAAKhb,IAAI,CAAC,AAAD;AAC1C;;;A;A,O,c,C,S,c;I,O;A;A,Q,c,G;A,Q,uB,G;A,Q,yB,G;A,Q,qB,G;A,Q,kB,G;A,Q,yB,G;A,Q,6B,G;A,Q,0B,G;A,Q,uB,G;A,Q,qB,G;A,Q,mB,G;A,Q,Y,G;A,Q,sB,G;A,Q,oB,G;A,Q,W,G;A,Q,iB,G;A,Q,oB,G;A,Q,oB,G;A,Q,kC,G;A,Q,2B,G;A,Q,oB,G;A,Q,oB,G;A,Q,iB,G;A,Q,W,G;A,Q,2B,G;A,Q,e,G;A,Q,sB,G;A,Q,qB,G;A,Q,qB,G;A,Q,iB,G;A,Q,wB,G;A,Q,0B,G;A,Q,mB,G;A,Q,yB,G;A,Q,iB,G;A,Q,2B,G;A,Q,uB,G;A,Q,uB,G;A,Q,oB,G;A,Q,iB,G;A,Q,kB,G;A,Q,iC,G;A,Q,8B,G;A,Q,qB,G;A,Q,sB,G;A,Q,mB,G;A,Q,0B,G;A,Q,uB,G;A,Q,sB,G;A,Q,qB,G;A,Q,uB,G;A,Q,e,G;A,Q,e,G;A,Q,sB,G;A,Q,kB,G;A,Q,sB,G;A,Q,oB,G;A,Q,yB,G;A,Q,c,G;A,Q,qB,G;A,Q,uB,G;A,Q,qB,G;A,Q,yB,G;A,Q,gB,G;A,Q,oB,G;A,Q,sB,G;A,Q,oB,G;A,Q,sB,G;A,Q,oB,G;A,Q,0B,G;A,Q,0B,G;A,Q,uB,G;A,Q,8B,G;A,Q,4B,G;A,Q,4B,G;A,Q,8B,G;A,Q,qB,G;A,Q,gB,G;A,Q,yB,G;A,Q,uB,G;A,Q,U,G;A,Q,U,G;A,Q,wB,G;A,Q,qB,G;A,Q,mB,G;A,Q,c,G;A,Q,S,G;A,Q,oB,G;A,Q,oB,G;A,Q,kB,G;A,Q,mB,G;A,Q,c,G;A,Q,yB,G;A,Q,wB,G;A,Q,oB,G;A,Q,4B,G;A,Q,uB,G;A,Q,2B,G;A,Q,gB,G;A,Q,iB,G;A,Q,e,G;A,Q,Y,G;A,Q,qB,G;A,Q,uB,G;A,Q,4B,G;A,Q,sB,G;A,Q,8B,G;A,Q,+B,G;A,Q,qB,G;A,Q,uB,G;A,Q,uB,G;A,Q,0B,G;A,Q,sB,G;A,Q,6B,G;A,Q,0B,G;A,Q,gC,G;A,Q,S,G;A,Q,kB,G;A,Q,uB,G;A,Q,wB,G;A,Q,gB,G;A,Q,wB,G;A,Q,4B,G;A,Q,iB,G;A,Q,mB,G;A,Q,yB,G;A,Q,uB,G;A,Q,uB,G;A,Q,wB,G;A,Q,wB,G;A,Q,oB,G;A,Q,a,G;A,Q,U,G;A,Q,sB,G;A,Q,a,G;A,Q,uB,G;A,Q,U,G;A,Q,sB,G;A,Q,kB,G;A,Q,Y,G;A,Q,mB,G;A,Q,yB,G;A,Q,uB,G;A,Q,sB,G;A,Q,qB,G;A,Q,mB,G;A,Q,U,G;A,Q,iB,G;A,Q,+B,G;A,Q,4B,G;A,Q,mB,G;A,Q,iC,G;A,Q,0B,G;A,Q,oB,G;A,Q,sB,G;A,Q,kB,G;A,Q,kB,G;A,Q,mB,G;A,Q,oB,G;A,Q,0B,G;A,Q,4B,G;A,Q,uB,G;A,Q,4B,G;A,Q,wB,G;A,Q,8B,G;A,Q,gB,G;A,Q,4B,G;A,Q,+B,G;A,Q,8B,G;A,Q,6B,G;A,Q,a,G;A,Q,iB,G;A,Q,0B,G;A,Q,mC,G;A,Q,6B,G;A,Q,iB,G;A,Q,a,G;A,Q,iB,G;A,Q,a,G;A,Q,c,G;A,Q,a,G;A,Q,6B,G;A,Q,sB,G;A,Q,mB,G;A,Q,kB,G;A,Q,iB,G;A,Q,kB,G;A,Q,qB,G;A,Q,c,G;A,Q,wB,G;A,Q,mB,G;A,Q,oB,G;A,Q,kB,G;A,Q,e,G;A,Q,iB,G;A,Q,mB,G;A,Q,iC,G;A,Q,0B,G;A,Q,W,G;A,Q,gB,G;A,Q,qB,G;A,Q,0B,G;A,Q,kB,G;A,Q,iB,G;A,Q,oB,G;A,Q,gB,G;A,Q,qB,G;A,Q,sB,G;A,Q,gC,G;A,Q,uB,G;A,Q,qC,G;A,Q,uB,G;A,Q,uB,G;A,Q,qB,G;A,Q,kB,G;A,Q,uB,G;A,Q,kB,G;A,Q,wB,G;A,Q,mC,G;A,Q,+B,G;A,Q,oB,G;A,Q,+B,G;A,Q,kB,G;A,Q,sB,G;A,Q,yB,G;A,Q,iB,G;A,Q,+B,G;A,Q,qB,G;A,Q,4B,G;A,Q,wB,G;A,Q,wB,G;A,Q,mB,G;A,Q,kB,G;A,Q,uB,G;A,Q,mB,G;A,Q,yB,G;A,Q,wB,G;A,Q,kC,G;A,Q,oB,G;A,Q,yB,G;A,Q,mB,G;A,Q,qB,G;A,Q,qB,G;A,Q,oB,G;A,Q,yB,G;A,Q,yB,G;A,Q,yB,G;A,Q,qB,G;A,Q,gB,G;A,Q,2B,G;A,Q,qB,G;A,Q,qB,G;A,Q,gB,G;A,Q,iB,G;A,Q,Y,G;A,Q,4B,G;A,Q,sB,G;A,Q,qB,G;A,Q,mB,G;A,Q,mB,G;A,Q,oB,G;A,Q,qB,G;A,Q,gC,G;A,Q,kC,G;A,Q,qB,G;A,Q,iB,G;A,Q,qB,G;A,Q,wB,G;A,Q,iB,G;A,Q,sB,G;A,Q,mB,G;A,Q,8B,G;A,Q,qB,G;A,Q,qB,G;A,Q,oB,G;A,Q,oB,G;A,Q,wB,G;A,Q,oB,G;A,Q,oB,G;A,Q,kB,G;A,Q,qB,G;A,Q,yB,G;A,Q,e,G;A,Q,oB,G;A,Q,wB,G;A,Q,mB,G;A,Q,8B,G;A,Q,gC,G;A,Q,gB,G;A,Q,0B,G;A,Q,qB,G;A,Q,e,G;A,Q,yB,G;A,Q,sB,G;A,Q,uB,G;A,Q,2B,G;A,Q,yB,G;A,Q,wB,G;A,Q,c,G;A,Q,wB,G;A,Q,W,G;A,Q,oB,G;A,Q,mB,G;A,Q,qB,G;AEDA,IAAA8Y,MAAAnD,QAAA;AAEA,IAAAsE,sBAAAtE,QAAA;AAEA,SAASygC,OAAOp2C,IAAY,EAAEgb,IAAS,EAAEQ,IAAU;IACjD,IAAI,CAAC,AAAA,CAAA,GAAAmtB,IAAAA,OAAE,AAAFA,EAAG3oC,MAAMgb,MAAMQ,OAClB,MAAM,IAAI7hB,MACP,CAAA,eAAA,EAAiBqG,KAAK,cAAA,EAAgB3B,KAAKsC,SAAS,CAAC6a,MAAM,EAAA,CAAG,GAC5D,CAAA,iBAAA,EAAmBR,KAAKhb,IAAK,CAAA,EAAA,CAClC;AAEJ;AAEO,SAASq2C,sBACdr7B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS86B,2BACdt7B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAAS+6B,uBACdv7B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAASg7B,2BACdx7B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAASi7B,gBACdz7B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,aAAap7B,MAAMQ;AAC5B;AACO,SAASk7B,uBACd17B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAASm7B,qBACd37B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASo7B,qBACd57B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASq7B,qBACd77B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASs7B,kBACd97B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASu7B,4BACd/7B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,yBAAyBp7B,MAAMQ;AACxC;AACO,SAASw7B,wBACdh8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASy7B,wBACdj8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAAS07B,uBACdl8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAAS27B,qBACdn8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS47B,0BACdp8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAAS67B,WACdr8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,QAAQp7B,MAAMQ;AACvB;AACO,SAAS87B,qBACdt8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS+7B,mBACdv8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAASg8B,0BACdx8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAASi8B,yBACdz8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASk8B,iBACd18B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,cAAcp7B,MAAMQ;AAC7B;AACO,SAASm8B,kBACd38B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASo8B,uBACd58B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAASq8B,oBACd78B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASs8B,qBACd98B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASu8B,kBACd/8B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASw8B,qBACdh9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASy8B,oBACdj9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAAS08B,wBACdl9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAAS28B,uBACdn9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAAS48B,oBACdp9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAAS68B,cACdr9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,WAAWp7B,MAAMQ;AAC1B;AACO,SAAS88B,uBACdt9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAAS+8B,mBACdv9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAASg9B,qBACdx9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASi9B,kBACdz9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASk9B,sBACd19B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASm9B,yBACd39B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASo9B,8BACd59B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,2BAA2Bp7B,MAAMQ;AAC1C;AACO,SAASq9B,iBACd79B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,cAAcp7B,MAAMQ;AAC7B;AACO,SAASs9B,sBACd99B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASu9B,qBACd/9B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASw9B,qBACdh+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASy9B,mBACdj+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAAS09B,sBACdl+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS29B,uBACdn+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAAS49B,0BACdp+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAAS69B,yBACdr+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAAS89B,qBACdt+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS+9B,oBACdv+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASg+B,wBACdx+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASi+B,mBACdz+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAASlmB,8BACd0lB,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,2BAA2Bp7B,MAAMQ;AAC1C;AACO,SAASk+B,gBACd1+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,aAAap7B,MAAMQ;AAC5B;AACO,SAASm+B,sBACd3+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASo+B,uBACd5+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAASq+B,2BACd7+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAASs+B,+BACd9+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,4BAA4Bp7B,MAAMQ;AAC3C;AACO,SAASu+B,6BACd/+B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAASw+B,sBACdh/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASy+B,qBACdj/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS0+B,wBACdl/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAAS2+B,6BACdn/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAAS4+B,+BACdp/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,4BAA4Bp7B,MAAMQ;AAC3C;AACO,SAAS6+B,sBACdr/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS8+B,uBACdt/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAAS++B,mBACdv/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAASg/B,kBACdx/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASi/B,oBACdz/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASk/B,oBACd1/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASm/B,YACd3/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,SAASp7B,MAAMQ;AACxB;AACO,SAASo/B,+BACd5/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,4BAA4Bp7B,MAAMQ;AAC3C;AACO,SAASq/B,sBACd7/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASs/B,sBACd9/B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASu/B,sBACd//B,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASw/B,sBACdhgC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASy/B,aACdjgC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,UAAUp7B,MAAMQ;AACzB;AACO,SAAS0/B,oBACdlgC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAAS2/B,+BACdngC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,4BAA4Bp7B,MAAMQ;AAC3C;AACO,SAAS4/B,+BACdpgC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,4BAA4Bp7B,MAAMQ;AAC3C;AACO,SAAS6/B,6BACdrgC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAAS8/B,oBACdtgC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAAS+/B,4BACdvgC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,yBAAyBp7B,MAAMQ;AACxC;AACO,SAASggC,2BACdxgC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAASigC,yBACdzgC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASkgC,kBACd1gC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASmgC,kBACd3gC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASogC,wBACd5gC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASqgC,0BACd7gC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAASsgC,4BACd9gC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,yBAAyBp7B,MAAMQ;AACxC;AACO,SAASugC,mCACd/gC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gCAAgCp7B,MAAMQ;AAC/C;AACO,SAASwgC,gCACdhhC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,6BAA6Bp7B,MAAMQ;AAC5C;AACO,SAASygC,sBACdjhC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS0gC,mBACdlhC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAAS2gC,sBACdnhC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS4gC,uBACdphC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAAS6gC,oBACdrhC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAAS8gC,2BACdthC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAAS+gC,uBACdvhC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAASghC,wBACdxhC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASihC,sBACdzhC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASkhC,+BACd1hC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,4BAA4Bp7B,MAAMQ;AAC3C;AACO,SAASmhC,kCACd3hC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,+BAA+Bp7B,MAAMQ;AAC9C;AACO,SAASohC,wBACd5hC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASqhC,2BACd7hC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAASshC,6BACd9hC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAASuhC,wBACd/hC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASwhC,4BACdhiC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,yBAAyBp7B,MAAMQ;AACxC;AACO,SAASyhC,wBACdjiC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAAS0hC,uBACdliC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAAS2hC,2BACdniC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAAS4hC,8BACdpiC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,2BAA2Bp7B,MAAMQ;AAC1C;AACO,SAAS6hC,iCACdriC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,8BAA8Bp7B,MAAMQ;AAC7C;AACO,SAAS8hC,0BACdtiC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAAS+hC,0BACdviC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAASgiC,6BACdxiC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAASiiC,kCACdziC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,+BAA+Bp7B,MAAMQ;AAC9C;AACO,SAASkiC,2BACd1iC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAASmiC,2BACd3iC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAASoiC,6BACd5iC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAASqiC,6BACd7iC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAASsiC,wBACd9iC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASuiC,yBACd/iC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASwiC,+BACdhjC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,4BAA4Bp7B,MAAMQ;AAC3C;AACO,SAASyiC,iBACdjjC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,cAAcp7B,MAAMQ;AAC7B;AACO,SAAS0iC,8BACdljC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,2BAA2Bp7B,MAAMQ;AAC1C;AACO,SAAS2iC,kCACdnjC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,+BAA+Bp7B,MAAMQ;AAC9C;AACO,SAAS4iC,2BACdpjC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAAS6iC,2BACdrjC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAAS8iC,yBACdtjC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAAS+iC,0BACdvjC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAASgjC,2BACdxjC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAASijC,gBACdzjC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,aAAap7B,MAAMQ;AAC5B;AACO,SAASkjC,qBACd1jC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASmjC,yBACd3jC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASojC,oBACd5jC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASqjC,+BACd7jC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,4BAA4Bp7B,MAAMQ;AAC3C;AACO,SAASsjC,iCACd9jC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,8BAA8Bp7B,MAAMQ;AAC7C;AACO,SAASujC,0BACd/jC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAASwjC,eACdhkC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,YAAYp7B,MAAMQ;AAC3B;AACO,SAASyjC,yBACdjkC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAAS0jC,sBACdlkC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS2jC,sBACdnkC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS4jC,qBACdpkC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS6jC,qBACdrkC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS8jC,qBACdtkC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS+jC,wBACdvkC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASgkC,uBACdxkC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAASikC,uBACdzkC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAASkkC,0BACd1kC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAASmkC,wBACd3kC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASokC,gCACd5kC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,6BAA6Bp7B,MAAMQ;AAC5C;AACO,SAASqkC,mBACd7kC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAASskC,wBACd9kC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASukC,iBACd/kC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,cAAcp7B,MAAMQ;AAC7B;AACO,SAASwkC,yBACdhlC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASykC,6BACdjlC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAAS0kC,qBACdllC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS2kC,oBACdnlC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAAS4kC,0BACdplC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAAS6kC,wBACdrlC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAAS8kC,wBACdtlC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAAS+kC,yBACdvlC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASglC,cACdxlC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,WAAWp7B,MAAMQ;AAC1B;AACO,SAASilC,kBACdzlC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASklC,yBACd1lC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASmlC,yBACd3lC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASolC,WACd5lC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,QAAQp7B,MAAMQ;AACvB;AACO,SAASqlC,kBACd7lC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASslC,4BACd9lC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,yBAAyBp7B,MAAMQ;AACxC;AACO,SAASulC,0BACd/lC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAASwlC,qBACdhmC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASylC,sBACdjmC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS0lC,gBACdlmC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,aAAap7B,MAAMQ;AAC5B;AACO,SAAS2lC,mBACdnmC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAAS4lC,6BACdpmC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAAS6lC,uBACdrmC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAAS8lC,sBACdtmC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS+lC,qBACdvmC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASgmC,uBACdxmC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAASimC,qBACdzmC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASkmC,8BACd1mC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,2BAA2Bp7B,MAAMQ;AAC1C;AACO,SAASmmC,2BACd3mC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,wBAAwBp7B,MAAMQ;AACvC;AACO,SAASomC,oCACd5mC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iCAAiCp7B,MAAMQ;AAChD;AACO,SAASqmC,0BACd7mC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAASsmC,wBACd9mC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASumC,sBACd/mC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASwmC,sBACdhnC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASymC,iCACdjnC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,8BAA8Bp7B,MAAMQ;AAC7C;AACO,SAAS0mC,sCACdlnC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mCAAmCp7B,MAAMQ;AAClD;AACO,SAAS2mC,0BACdnnC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAAS4mC,wBACdpnC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAAS6mC,uBACdrnC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAAS8mC,mBACdtnC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAAS+mC,uBACdvnC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAASgnC,sBACdxnC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASinC,yBACdznC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASknC,qBACd1nC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASmnC,oBACd3nC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASonC,sBACd5nC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASqnC,sBACd7nC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASsnC,sBACd9nC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASunC,sBACd/nC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASwnC,yBACdhoC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASynC,uBACdjoC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAAS0nC,oBACdloC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAAS2nC,iBACdnoC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,cAAcp7B,MAAMQ;AAC7B;AACO,SAAS4nC,qBACdpoC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS6nC,wBACdroC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAAS8nC,sBACdtoC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS+nC,sBACdvoC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASgoC,kBACdxoC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASioC,oBACdzoC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASkoC,kBACd1oC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASmoC,kBACd3oC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASooC,qBACd5oC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASqoC,iBACd7oC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,cAAcp7B,MAAMQ;AAC7B;AACO,SAASsoC,yBACd9oC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASuoC,kBACd/oC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASwoC,yBACdhpC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASyoC,wBACdjpC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAAS0oC,kBACdlpC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAAS2oC,0BACdnpC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAAS4oC,qBACdppC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS6oC,0BACdrpC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAAS8oC,mBACdtpC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAAS+oC,oBACdvpC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASgpC,oCACdxpC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iCAAiCp7B,MAAMQ;AAChD;AACO,SAASipC,6BACdzpC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAASkpC,sBACd1pC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASmpC,6BACd3pC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,0BAA0Bp7B,MAAMQ;AACzC;AACO,SAASopC,gCACd5pC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,6BAA6Bp7B,MAAMQ;AAC5C;AACO,SAASqpC,qBACd7pC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASspC,4BACd9pC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,yBAAyBp7B,MAAMQ;AACxC;AACO,SAASupC,sBACd/pC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASwpC,wBACdhqC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASypC,mBACdjqC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAAS0pC,0BACdlqC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAAS2pC,oBACdnqC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAAS4pC,mBACdpqC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAAS6pC,gCACdrqC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,6BAA6Bp7B,MAAMQ;AAC5C;AACO,SAAS8pC,gCACdtqC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,6BAA6Bp7B,MAAMQ;AAC5C;AACO,SAAS+pC,0BACdvqC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAASgqC,yBACdxqC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAASiqC,mCACdzqC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gCAAgCp7B,MAAMQ;AAC/C;AACO,SAASkqC,uBACd1qC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,oBAAoBp7B,MAAMQ;AACnC;AACO,SAASmqC,mCACd3qC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gCAAgCp7B,MAAMQ;AAC/C;AACO,SAASoqC,iCACd5qC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,8BAA8Bp7B,MAAMQ;AAC7C;AACO,SAASqqC,sBACd7qC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASsqC,mBACd9qC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAASuqC,iBACd/qC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,cAAcp7B,MAAMQ;AAC7B;AACO,SAASwqC,aACdhrC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,UAAUp7B,MAAMQ;AACzB;AACO,SAASyqC,eACdjrC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,YAAYp7B,MAAMQ;AAC3B;AACO,SAAS0qC,kBACdlrC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAAS2qC,YACdnrC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,SAASp7B,MAAMQ;AACxB;AACO,SAAS4qC,gBACdprC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,aAAap7B,MAAMQ;AAC5B;AACO,SAAS6qC,qBACdrrC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS8qC,0BACdtrC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,uBAAuBp7B,MAAMQ;AACtC;AACO,SAAS+qC,kBACdvrC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASgrC,WACdxrC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,QAAQp7B,MAAMQ;AACvB;AACO,SAASirC,YACdzrC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,SAASp7B,MAAMQ;AACxB;AACO,SAASkrC,wBACd1rC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASmrC,UACd3rC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,OAAOp7B,MAAMQ;AACtB;AACO,SAASorC,oBACd5rC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASqrC,eACd7rC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,YAAYp7B,MAAMQ;AAC3B;AACO,SAASsrC,qBACd9rC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAASurC,cACd/rC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,WAAWp7B,MAAMQ;AAC1B;AACO,SAASwrC,kBACdhsC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAASyrC,kBACdjsC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,eAAep7B,MAAMQ;AAC9B;AACO,SAAS0rC,WACdlsC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,QAAQp7B,MAAMQ;AACvB;AACO,SAAS2rC,mBACdnsC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAAS4rC,cACdpsC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,WAAWp7B,MAAMQ;AAC1B;AACO,SAAS6rC,gBACdrsC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,aAAap7B,MAAMQ;AAC5B;AACO,SAAS8rC,wBACdtsC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAAS+rC,aACdvsC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,UAAUp7B,MAAMQ;AACzB;AACO,SAASgsC,mBACdxsC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAASisC,eACdzsC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,YAAYp7B,MAAMQ;AAC3B;AACO,SAASksC,gBACd1sC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,aAAap7B,MAAMQ;AAC5B;AACO,SAASmsC,cACd3sC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,WAAWp7B,MAAMQ;AAC1B;AACO,SAASosC,YACd5sC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,SAASp7B,MAAMQ;AACxB;AACO,SAASqsC,gCACd7sC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,6BAA6Bp7B,MAAMQ;AAC5C;AACO,SAASssC,wBACd9sC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,qBAAqBp7B,MAAMQ;AACpC;AACO,SAASusC,sBACd/sC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAASwsC,eACdhtC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,YAAYp7B,MAAMQ;AAC3B;AACO,SAASysC,cACdjtC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,WAAWp7B,MAAMQ;AAC1B;AACO,SAAS0sC,WACdltC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,QAAQp7B,MAAMQ;AACvB;AACO,SAAS2sC,eACdntC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,YAAYp7B,MAAMQ;AAC3B;AACO,SAAS4sC,yBACdptC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,sBAAsBp7B,MAAMQ;AACrC;AACO,SAAS6sC,sBACdrtC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,mBAAmBp7B,MAAMQ;AAClC;AACO,SAAS8sC,oBACdttC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAAS+sC,eACdvtC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,YAAYp7B,MAAMQ;AAC3B;AACO,SAASgtC,iBACdxtC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,cAAcp7B,MAAMQ;AAC7B;AACO,SAASitC,UACdztC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,OAAOp7B,MAAMQ;AACtB;AACO,SAASktC,oBACd1tC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASmtC,iBACd3tC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,cAAcp7B,MAAMQ;AAC7B;AACO,SAASotC,oBACd5tC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASqtC,aACd7tC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,UAAUp7B,MAAMQ;AACzB;AACO,SAASstC,iBACd9tC,IAA+B,EAC/BQ,IAAoB;IAEpB46B,OAAO,cAAcp7B,MAAMQ;AAC7B;AACO,SAASutC,oBAAoB/tC,IAAS,EAAEQ,IAAS;IACtD,CAAA,GAAA0S,oBAAAA,OAAkB,AAAlBA,EAAmB,uBAAuB;IAC1CkoB,OAAO,iBAAiBp7B,MAAMQ;AAChC;AACO,SAASwtC,mBAAmBhuC,IAAS,EAAEQ,IAAS;IACrD,CAAA,GAAA0S,oBAAAA,OAAkB,AAAlBA,EAAmB,sBAAsB;IACzCkoB,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAASytC,mBAAmBjuC,IAAS,EAAEQ,IAAS;IACrD,CAAA,GAAA0S,oBAAAA,OAAkB,AAAlBA,EAAmB,sBAAsB;IACzCkoB,OAAO,gBAAgBp7B,MAAMQ;AAC/B;AACO,SAAS0tC,qBAAqBluC,IAAS,EAAEQ,IAAS;IACvD,CAAA,GAAA0S,oBAAAA,OAAkB,AAAlBA,EAAmB,wBAAwB;IAC3CkoB,OAAO,kBAAkBp7B,MAAMQ;AACjC;AACO,SAAS2tC,wBAAwBnuC,IAAS,EAAEQ,IAAS;IAC1D,CAAA,GAAA0S,oBAAAA,OAAkB,AAAlBA,EACE,2BACA;IAEFkoB,OAAO,qBAAqBp7B,MAAMQ;AACpC;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G,K;AEzyDA,IAAAzF,SAAAJ,QAAA;AAQ+B,IAAA8E,WAAAxE,QAAAsE,OAAA,GAGhB6uC;AAcf,SAASA,kCAAkCppD,IAAY;IACrD,OAAQA;QACN,KAAK;YACH,OAAO,AAAA,CAAA,GAAA08B,OAAAA,oBAAoB,AAApBA;QACT,KAAK;YACH,OAAO,AAAA,CAAA,GAAAlB,OAAAA,oBAAoB,AAApBA;QACT,KAAK;YACH,OAAO,AAAA,CAAA,GAAA8B,OAAAA,kBAAkB,AAAlBA;QACT,KAAK;YACH,OAAO,AAAA,CAAA,GAAAjE,OAAAA,qBAAqB,AAArBA;QACT,KAAK;YACH,OAAO,AAAA,CAAA,GAAAwB,OAAAA,qBAAqB,AAArBA,EAAsB,AAAA,CAAA,GAAA/H,OAAAA,UAAU,AAAVA,EAAW;QAC1C,KAAK;YACH,OAAO,AAAA,CAAA,GAAA+H,OAAAA,qBAAqB,AAArBA,EAAsB,AAAA,CAAA,GAAA/H,OAAAA,UAAU,AAAVA,EAAW;QAC1C,KAAK;YACH,OAAO,AAAA,CAAA,GAAA+H,OAAAA,qBAAqB,AAArBA,EAAsB,AAAA,CAAA,GAAA/H,OAAAA,UAAU,AAAVA,EAAW;QAC1C,KAAK;YAGH,OAAO,AAAA,CAAA,GAAAoG,OAAAA,iBAAiB,AAAjBA;IACX;IACA,MAAM,IAAIv/B,MAAM,2BAA2BqG;AAC7C;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AE/CA,IAAA+V,SAAAJ,QAAA;AACA,IAAA6C,wBAAA7C,QAAA;AAOe,SAAS0zC,oBACtBluB,KAAqB;IAErB,MAAMmuB,YAAY,AAAA,CAAA,GAAAC,sBAAAA,OAAoB,AAApBA,EAAqBpuB;IAEvC,IAAImuB,UAAUhuD,MAAM,KAAK,GACvB,OAAOguD,SAAS,CAAC,EAAE;SAEnB,OAAO,AAAA,CAAA,GAAAjsB,OAAAA,mBAAmB,AAAnBA,EAAoBisB;AAE/B;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AElBA,IAAAvzC,SAAAJ,QAAA;AASA,SAAS6zC,iBAAiBxuC,IAAmC;IAC3D,OAAO,AAAA,CAAA,GAAAI,OAAAA,YAAY,AAAZA,EAAaJ,QAChBA,KAAK5jB,IAAI,GACR,CAAA,EAAE4jB,KAAK3jB,EAAE,CAACD,IAAK,CAAA,CAAA,EAAGoyD,iBAAiBxuC,KAAKwhB,aAAa,EAAE,CAAC;AAC/D;AAKe,SAAS+sB,qBACtBE,OAA6D;IAE7D,MAAM1uC,QAAQxa,MAAMmpD,IAAI,CAACD;IAEzB,MAAME,WAAW,IAAIC;IACrB,MAAMC,QAAQ,IAAID;IAGlB,MAAME,aAAa,IAAIp7B;IAEvB,MAAMyM,QAAsB,EAAE;IAE9B,IAAK,IAAI75B,IAAI,GAAGA,IAAIyZ,MAAMzf,MAAM,EAAEgG,IAAK;QACrC,MAAM0Z,OAAOD,KAAK,CAACzZ,EAAE;QACrB,IAAI,CAAC0Z,MAAM;QAGX,IAAImgB,MAAM3/B,OAAO,CAACwf,SAAS,GACzB;QAIF,IAAI,AAAA,CAAA,GAAA6F,OAAAA,mBAAmB,AAAnBA,EAAoB7F,OACtB,OAAO;YAACA;SAAK;QAGf,IAAI,AAAA,CAAA,GAAAsS,OAAAA,oBAAoB,AAApBA,EAAqBtS,OAAO;YAC9B6uC,MAAM/b,GAAG,CAAC9yB,KAAKhb,IAAI,EAAEgb;YACrB;QACF;QAEA,IAAI,AAAA,CAAA,GAAAgJ,OAAAA,qBAAqB,AAArBA,EAAsBhJ,OAAO;YAC/B,IAAI,CAAC8uC,WAAWh7B,GAAG,CAAC9T,KAAKmgB,KAAK,GAAG;gBAC/BpgB,MAAM1Z,IAAI,IAAI2Z,KAAKmgB,KAAK;gBACxB2uB,WAAWr1C,GAAG,CAACuG,KAAKmgB,KAAK;YAC3B;YACA;QACF;QAGA,IAAI,AAAA,CAAA,GAAAlZ,OAAAA,uBAAuB,AAAvBA,EAAwBjH,OAAO;YACjC,MAAM5jB,OAAOoyD,iBAAiBxuC,KAAK3jB,EAAE;YAErC,IAAIsyD,SAAS76B,GAAG,CAAC13B,OAAO;gBACtB,IAAI2yD,WAAmBJ,SAASvzC,GAAG,CAAChf;gBACpC,IAAI2yD,SAAStwB,cAAc,EACzB;oBAAA,IAAIze,KAAKye,cAAc,EAAE;wBACvBswB,SAAStwB,cAAc,CAACjuB,MAAM,CAACnK,IAAI,IAAI2Z,KAAKye,cAAc,CAACjuB,MAAM;wBACjEu+C,SAAStwB,cAAc,CAACjuB,MAAM,GAAG+9C,qBAC/BQ,SAAStwB,cAAc,CAACjuB,MAC1B;oBACF;gBAAA,OAEAu+C,WAAW/uC,KAAKye,cAAc;YAElC,OACEkwB,SAAS7b,GAAG,CAAC12C,MAAM4jB;YAGrB;QACF;QAEAmgB,MAAM95B,IAAI,CAAC2Z;IACb;IAGA,KAAK,MAAM,GAAGgvC,SAAS,IAAIH,MACzB1uB,MAAM95B,IAAI,CAAC2oD;IAIb,KAAK,MAAM,GAAGC,YAAY,IAAIN,SAC5BxuB,MAAM95B,IAAI,CAAC4oD;IAGb,OAAO9uB;AACT;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AE/FA,IAAAplB,SAAAJ,QAAA;AACA,IAAA6C,wBAAA7C,QAAA;AACA,IAAAa,UAAAb,QAAA;AAOe,SAASu0C,kBACtBC,eAAqD;IAErD,MAAMhvB,QAAQgvB,gBAAgBjsD,GAAG,CAAC8B,CAAAA;QAChC,OAAO,AAAA,CAAA,GAAA2qB,QAAAA,kBAAkB,AAAlBA,EAAmB3qB,QAAQA,KAAK44B,cAAc,GAAG54B;IAC1D;IACA,MAAMspD,YAAY,AAAA,CAAA,GAAAC,sBAAAA,OAAoB,AAApBA,EAAqBpuB;IAEvC,IAAImuB,UAAUhuD,MAAM,KAAK,GACvB,OAAOguD,SAAS,CAAC,EAAE;SAEnB,OAAO,AAAA,CAAA,GAAA/lB,OAAAA,WAAW,AAAXA,EAAY+lB;AAEvB;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AEtBA,IAAAvzC,SAAAJ,QAAA;AASA,SAAS6zC,iBAAiBxuC,IAAmC;IAC3D,OAAO,AAAA,CAAA,GAAAI,OAAAA,YAAY,AAAZA,EAAaJ,QAChBA,KAAK5jB,IAAI,GACR,CAAA,EAAE4jB,KAAK8V,KAAK,CAAC15B,IAAK,CAAA,CAAA,EAAGoyD,iBAAiBxuC,KAAKjM,IAAI,EAAE,CAAC;AACzD;AAKe,SAASw6C,qBACtBE,OAAgC;IAEhC,MAAM1uC,QAAQxa,MAAMmpD,IAAI,CAACD;IAEzB,MAAME,WAAW,IAAIC;IACrB,MAAMC,QAAQ,IAAID;IAGlB,MAAME,aAAa,IAAIp7B;IAEvB,MAAMyM,QAAoB,EAAE;IAE5B,IAAK,IAAI75B,IAAI,GAAGA,IAAIyZ,MAAMzf,MAAM,EAAEgG,IAAK;QACrC,MAAM0Z,OAAOD,KAAK,CAACzZ,EAAE;QACrB,IAAI,CAAC0Z,MAAM;QAGX,IAAImgB,MAAM3/B,OAAO,CAACwf,SAAS,GACzB;QAIF,IAAI,AAAA,CAAA,GAAAuM,OAAAA,cAAc,AAAdA,EAAevM,OACjB,OAAO;YAACA;SAAK;QAIf,IAAI,AAAA,CAAA,GAAAgT,OAAAA,YAAY,AAAZA,EAAahT,OAAO;YACtB6uC,MAAM/b,GAAG,CAAC9yB,KAAKhb,IAAI,EAAEgb;YACrB;QACF;QAEA,IAAI,AAAA,CAAA,GAAAgO,OAAAA,aAAa,AAAbA,EAAchO,OAAO;YACvB,IAAI,CAAC8uC,WAAWh7B,GAAG,CAAC9T,KAAKmgB,KAAK,GAAG;gBAC/BpgB,MAAM1Z,IAAI,IAAI2Z,KAAKmgB,KAAK;gBACxB2uB,WAAWr1C,GAAG,CAACuG,KAAKmgB,KAAK;YAC3B;YACA;QACF;QAGA,IAAI,AAAA,CAAA,GAAA5S,OAAAA,iBAAiB,AAAjBA,EAAkBvN,SAASA,KAAKye,cAAc,EAAE;YAClD,MAAMriC,OAAOoyD,iBAAiBxuC,KAAK0nB,QAAQ;YAE3C,IAAIinB,SAAS76B,GAAG,CAAC13B,OAAO;gBACtB,IAAI2yD,WAAyBJ,SAASvzC,GAAG,CAAChf;gBAC1C,IAAI2yD,SAAStwB,cAAc,EACzB;oBAAA,IAAIze,KAAKye,cAAc,EAAE;wBACvBswB,SAAStwB,cAAc,CAACjuB,MAAM,CAACnK,IAAI,IAAI2Z,KAAKye,cAAc,CAACjuB,MAAM;wBACjEu+C,SAAStwB,cAAc,CAACjuB,MAAM,GAAG+9C,qBAC/BQ,SAAStwB,cAAc,CAACjuB,MAC1B;oBACF;gBAAA,OAEAu+C,WAAW/uC,KAAKye,cAAc;YAElC,OACEkwB,SAAS7b,GAAG,CAAC12C,MAAM4jB;YAGrB;QACF;QAEAmgB,MAAM95B,IAAI,CAAC2Z;IACb;IAGA,KAAK,MAAM,GAAGgvC,SAAS,IAAIH,MACzB1uB,MAAM95B,IAAI,CAAC2oD;IAIb,KAAK,MAAM,GAAGC,YAAY,IAAIN,SAC5BxuB,MAAM95B,IAAI,CAAC4oD;IAGb,OAAO9uB;AACT;;;A;A,O,c,C,S,c;I,O;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,2B;I,Y;I,K;Q,O,O,uB;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,gC;I,Y;I,K;Q,O,O,4B;I;A;A,O,c,C,S,yB;I,Y;I,K;Q,O,O,qB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,yB;I,Y;I,K;Q,O,O,qB;I;A;A,O,c,C,S,a;I,Y;I,K;Q,O,O,S;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,yB;I,Y;I,K;Q,O,O,qB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,+B;I,Y;I,K;Q,O,O,2B;I;A;A,O,c,C,S,4B;I,Y;I,K;Q,O,O,wB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,a;I,Y;I,K;Q,O,O,S;I;A;A,O,c,C,S,a;I,Y;I,K;Q,O,O,S;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,4B;I,Y;I,K;Q,O,O,wB;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,4B;I,Y;I,K;Q,O,O,wB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,Q;I,Y;I,K;Q,O,O,I;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,yB;I,Y;I,K;Q,O,O,qB;I;A;A,O,c,C,S,c;I,Y;I,K;Q,O,O,U;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,U;I,Y;I,K;Q,O,O,M;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,4B;I,Y;I,K;Q,O,O,wB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,2B;I,Y;I,K;Q,O,O,uB;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,8B;I,Y;I,K;Q,O,O,0B;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,c;I,Y;I,K;Q,O,O,U;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,W;I,Y;I,K;Q,O,O,O;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,Q;I,Y;I,K;Q,O,O,I;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,6B;I,Y;I,K;Q,O,O,yB;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,+B;I,Y;I,K;Q,O,O,2B;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,4B;I,Y;I,K;Q,O,O,wB;I;A;A,O,c,C,S,c;I,Y;I,K;Q,O,O,U;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,6B;I,Y;I,K;Q,O,O,yB;I;A;A,O,c,C,S,4B;I,Y;I,K;Q,O,O,wB;I;A;A,O,c,C,S,2B;I,Y;I,K;Q,O,O,uB;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,iC;I,Y;I,K;Q,O,O,6B;I;A;A,O,c,C,S,2B;I,Y;I,K;Q,O,O,uB;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,W;I,Y;I,K;Q,O,O,O;I;A;A,O,c,C,S,2B;I,Y;I,K;Q,O,O,uB;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,+B;I,Y;I,K;Q,O,O,2B;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,S;I,Y;I,K;Q,O,O,K;I;A;A,O,c,C,S,c;I,Y;I,K;Q,O,O,U;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,8B;I,Y;I,K;Q,O,O,0B;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,mC;I,Y;I,K;Q,O,O,+B;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,iC;I,Y;I,K;Q,O,O,6B;I;A;A,O,c,C,S,6B;I,Y;I,K;Q,O,O,yB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,6B;I,Y;I,K;Q,O,O,yB;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,6B;I,Y;I,K;Q,O,O,yB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,qB;I,Y;I,K;Q,O,O,iB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,gC;I,Y;I,K;Q,O,O,4B;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,c;I,Y;I,K;Q,O,O,U;I;A;A,O,c,C,S,yB;I,Y;I,K;Q,O,O,qB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,c;I,Y;I,K;Q,O,O,U;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,0B;I,Y;I,K;Q,O,O,sB;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,8B;I,Y;I,K;Q,O,O,0B;I;A;A,O,c,C,S,gC;I,Y;I,K;Q,O,O,4B;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,e;I,Y;I,K;Q,O,O,W;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,4B;I,Y;I,K;Q,O,O,wB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,gB;I,Y;I,K;Q,O,O,Y;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,a;I,Y;I,K;Q,O,O,S;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,iB;I,Y;I,K;Q,O,O,a;I;A;A,O,c,C,S,4B;I,Y;I,K;Q,O,O,wB;I;A;A,O,c,C,S,8B;I,Y;I,K;Q,O,O,0B;I;A;A,O,c,C,S,wB;I,Y;I,K;Q,O,O,oB;I;A;A,O,c,C,S,mB;I,Y;I,K;Q,O,O,e;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,oB;I,Y;I,K;Q,O,O,gB;I;A;A,O,c,C,S,yB;I,Y;I,K;Q,O,O,qB;I;A;A,O,c,C,S,uB;I,Y;I,K;Q,O,O,mB;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,Y;I,Y;I,K;Q,O,O,Q;I;A;A,O,c,C,S,sB;I,Y;I,K;Q,O,O,kB;I;A;A,O,c,C,S,kB;I,Y;I,K;Q,O,O,c;I;A;A,O,c,C,S,iB;I,Y;I,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;IAC/B,CAAA,GAAA4iB,wBAAAA,OAAsB,AAAtBA,EAAuBv8B,OAAO2Z;IAC9B,CAAA,GAAAyiB,sBAAAA,OAAoB,AAApBA,EAAqBp8B,OAAO2Z;IAE5B,OAAO3Z;AACT;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AEjBA,IAAAm8B,WAAAr2C,QAAA;AAGe,SAAS22C,wBACtBz8B,KAAa,EACb2Z,MAAc;IAEd,CAAA,GAAA0iB,SAAAA,OAAO,AAAPA,EAAQ,oBAAoBr8B,OAAO2Z;AACrC;;;A;A,O,c,C,S,c;I,O;A;A,Q,O,G;AERA,IAAAzzB,SAAAJ,QAAA;AAMe,SAAS42C,eAAiCvxC,IAAO;IAC9D+2B,OAAAA,YAAY,CAACt6C,OAAO,CAACkE,CAAAA;QACnBqf,IAAI,CAACrf,IAAI,GAAG;IACd;IAEA,OAAOqf;AACT;;;A;A,O,c,C,S,c;I,O;A;A,Q,W,G,Q,uB,G,Q,e,G,Q,gB,G,Q,Y,G,Q,mB,G,Q,kB,G,Q,gB,G,Q,oB,G,Q,e,G,Q,kB,G,Q,c,G,Q,a,G,Q,c,G,Q,a,G,Q,a,G,Q,iB,G,Q,kB,G,Q,qB,G,Q,uB,G,Q,mB,G,Q,Y,G,Q,U,G,Q,U,G,Q,a,G,Q,S,G,Q,+B,G,Q,e,G,Q,c,G,Q,oB,G,Q,S,G,Q,mB,G,Q,U,G,Q,c,G,Q,mB,G,Q,qB,G,Q,wB,G,Q,gB,G,Q,uB,G,Q,uB,G,Q,gB,G,Q,c,G,Q,iB,G,Q,iB,G,Q,yB,G,Q,W,G,Q,W,G,Q,iB,G,Q,Y,G,Q,c,G,K;AERA,IAAAjF,SAAAJ,QAAA;AAEO,MAAM62C,qBAAkBv2C,QAAAu2C,kBAAA,GAAGrlB,OAAAA,kBAAkB,CAAC,eAAe;AAC7D,MAAMslB,mBAAgBx2C,QAAAw2C,gBAAA,GAAGtlB,OAAAA,kBAAkB,CAAC,aAAa;AACzD,MAAMulB,eAAYz2C,QAAAy2C,YAAA,GAAGvlB,OAAAA,kBAAkB,CAAC,SAAS;AACjD,MAAMwlB,iBAAc12C,QAAA02C,cAAA,GAAGxlB,OAAAA,kBAAkB,CAAC,WAAW;AACrD,MAAMylB,oBAAiB32C,QAAA22C,iBAAA,GAAGzlB,OAAAA,kBAAkB,CAAC,cAAc;AAC3D,MAAM0lB,cAAW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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-1dd629a3568aa71f.js","src/js/app.js","src/js/helper.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/js/backend.js","node_modules/pocketbase/dist/pocketbase.es.mjs","node_modules/pocketbase/src/ClientResponseError.ts","node_modules/pocketbase/src/stores/utils/cookie.ts","node_modules/pocketbase/src/stores/utils/jwt.ts","node_modules/pocketbase/src/stores/BaseAuthStore.ts","node_modules/pocketbase/src/stores/LocalAuthStore.ts","node_modules/pocketbase/src/services/utils/BaseService.ts","node_modules/pocketbase/src/services/SettingsService.ts","node_modules/pocketbase/src/services/utils/CrudService.ts","node_modules/pocketbase/src/services/utils/legacy.ts","node_modules/pocketbase/src/services/utils/refresh.ts","node_modules/pocketbase/src/services/AdminService.ts","node_modules/pocketbase/src/services/utils/options.ts","node_modules/pocketbase/src/services/RealtimeService.ts","node_modules/pocketbase/src/services/RecordService.ts","node_modules/pocketbase/src/services/CollectionService.ts","node_modules/pocketbase/src/services/LogService.ts","node_modules/pocketbase/src/services/HealthService.ts","node_modules/pocketbase/src/services/FileService.ts","node_modules/pocketbase/src/services/BackupService.ts","node_modules/pocketbase/src/Client.ts","node_modules/pocketbase/src/stores/AsyncAuthStore.ts","src/js/view.js","node_modules/@babel/types/lib/index.js","node_modules/@babel/types/src/index.ts","node_modules/@babel/types/lib/validators/react/isReactComponent.js","node_modules/@babel/types/src/validators/react/isReactComponent.ts","node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js","node_modules/@babel/types/src/validators/buildMatchMemberExpression.ts","node_modules/@babel/types/lib/validators/matchesPattern.js","node_modules/@babel/types/src/validators/matchesPattern.ts","node_modules/@babel/types/lib/validators/generated/index.js","node_modules/@babel/types/src/validators/generated/index.ts","node_modules/@babel/types/lib/utils/shallowEqual.js","node_modules/@babel/types/src/utils/shallowEqual.ts","node_modules/@babel/types/lib/utils/deprecationWarning.js","node_modules/@babel/types/src/utils/deprecationWarning.ts","node_modules/@babel/types/lib/validators/react/isCompatTag.js","node_modules/@babel/types/src/validators/react/isCompatTag.ts","node_modules/@babel/types/lib/builders/react/buildChildren.js","node_modules/@babel/types/src/builders/react/buildChildren.ts","node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js","node_modules/@babel/types/src/utils/react/cleanJSXElementLiteralChild.ts","node_modules/@babel/types/lib/builders/generated/index.js","node_modules/@babel/types/src/builders/generated/index.ts","node_modules/@babel/types/lib/builders/validateNode.js","node_modules/@babel/types/src/builders/validateNode.ts","node_modules/@babel/types/lib/validators/validate.js","node_modules/@babel/types/src/validators/validate.ts","node_modules/@babel/types/lib/definitions/index.js","node_modules/@babel/types/src/definitions/index.ts","node_modules/to-fast-properties/index.js","node_modules/@babel/types/lib/definitions/core.js","node_modules/@babel/types/src/definitions/core.ts","node_modules/@babel/types/lib/validators/is.js","node_modules/@babel/types/src/validators/is.ts","node_modules/@babel/types/lib/validators/isType.js","node_modules/@babel/types/src/validators/isType.ts","node_modules/@babel/types/lib/validators/isPlaceholderType.js","node_modules/@babel/types/src/validators/isPlaceholderType.ts","node_modules/@babel/types/lib/validators/isValidIdentifier.js","node_modules/@babel/types/src/validators/isValidIdentifier.ts","node_modules/@babel/helper-validator-identifier/lib/index.js","node_modules/@babel/helper-validator-identifier/src/index.ts","node_modules/@babel/helper-validator-identifier/lib/identifier.js","node_modules/@babel/helper-validator-identifier/src/identifier.ts","node_modules/@babel/helper-validator-identifier/lib/keyword.js","node_modules/@babel/helper-validator-identifier/src/keyword.ts","node_modules/@babel/helper-string-parser/lib/index.js","node_modules/@babel/helper-string-parser/src/index.ts","node_modules/@babel/types/lib/constants/index.js","node_modules/@babel/types/src/constants/index.ts","node_modules/@babel/types/lib/definitions/utils.js","node_modules/@babel/types/src/definitions/utils.ts","node_modules/@babel/types/lib/definitions/flow.js","node_modules/@babel/types/src/definitions/flow.ts","node_modules/@babel/types/lib/definitions/jsx.js","node_modules/@babel/types/src/definitions/jsx.ts","node_modules/@babel/types/lib/definitions/misc.js","node_modules/@babel/types/src/definitions/misc.ts","node_modules/@babel/types/lib/definitions/placeholders.js","node_modules/@babel/types/src/definitions/placeholders.ts","node_modules/@babel/types/lib/definitions/experimental.js","node_modules/@babel/types/src/definitions/experimental.ts","node_modules/@babel/types/lib/definitions/typescript.js","node_modules/@babel/types/src/definitions/typescript.ts","node_modules/@babel/types/lib/definitions/deprecated-aliases.js","node_modules/@babel/types/src/definitions/deprecated-aliases.ts","node_modules/@babel/types/lib/asserts/assertNode.js","node_modules/@babel/types/src/asserts/assertNode.ts","node_modules/@babel/types/lib/validators/isNode.js","node_modules/@babel/types/src/validators/isNode.ts","node_modules/@babel/types/lib/asserts/generated/index.js","node_modules/@babel/types/src/asserts/generated/index.ts","node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js","node_modules/@babel/types/src/builders/flow/createTypeAnnotationBasedOnTypeof.ts","node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js","node_modules/@babel/types/src/builders/flow/createFlowUnionType.ts","node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js","node_modules/@babel/types/src/modifications/flow/removeTypeDuplicates.ts","node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js","node_modules/@babel/types/src/builders/typescript/createTSUnionType.ts","node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js","node_modules/@babel/types/src/modifications/typescript/removeTypeDuplicates.ts","node_modules/@babel/types/lib/builders/generated/uppercase.js","node_modules/@babel/types/src/builders/generated/uppercase.js","node_modules/@babel/types/lib/builders/productions.js","node_modules/@babel/types/src/builders/productions.ts","node_modules/@babel/types/lib/clone/cloneNode.js","node_modules/@babel/types/src/clone/cloneNode.ts","node_modules/@babel/types/lib/clone/clone.js","node_modules/@babel/types/src/clone/clone.ts","node_modules/@babel/types/lib/clone/cloneDeep.js","node_modules/@babel/types/src/clone/cloneDeep.ts","node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js","node_modules/@babel/types/src/clone/cloneDeepWithoutLoc.ts","node_modules/@babel/types/lib/clone/cloneWithoutLoc.js","node_modules/@babel/types/src/clone/cloneWithoutLoc.ts","node_modules/@babel/types/lib/comments/addComment.js","node_modules/@babel/types/src/comments/addComment.ts","node_modules/@babel/types/lib/comments/addComments.js","node_modules/@babel/types/src/comments/addComments.ts","node_modules/@babel/types/lib/comments/inheritInnerComments.js","node_modules/@babel/types/src/comments/inheritInnerComments.ts","node_modules/@babel/types/lib/utils/inherit.js","node_modules/@babel/types/src/utils/inherit.ts","node_modules/@babel/types/lib/comments/inheritLeadingComments.js","node_modules/@babel/types/src/comments/inheritLeadingComments.ts","node_modules/@babel/types/lib/comments/inheritsComments.js","node_modules/@babel/types/src/comments/inheritsComments.ts","node_modules/@babel/types/lib/comments/inheritTrailingComments.js","node_modules/@babel/types/src/comments/inheritTrailingComments.ts","node_modules/@babel/types/lib/comments/removeComments.js","node_modules/@babel/types/src/comments/removeComments.ts","node_modules/@babel/types/lib/constants/generated/index.js","node_modules/@babel/types/src/constants/generated/index.ts","node_modules/@babel/types/lib/converters/ensureBlock.js","node_modules/@babel/types/src/converters/ensureBlock.ts","node_modules/@babel/types/lib/converters/toBlock.js","node_modules/@babel/types/src/converters/toBlock.ts","node_modules/@babel/types/lib/converters/toBindingIdentifierName.js","node_modules/@babel/types/src/converters/toBindingIdentifierName.ts","node_modules/@babel/types/lib/converters/toIdentifier.js","node_modules/@babel/types/src/converters/toIdentifier.ts","node_modules/@babel/types/lib/converters/toComputedKey.js","node_modules/@babel/types/src/converters/toComputedKey.ts","node_modules/@babel/types/lib/converters/toExpression.js","node_modules/@babel/types/src/converters/toExpression.ts","node_modules/@babel/types/lib/converters/toKeyAlias.js","node_modules/@babel/types/src/converters/toKeyAlias.ts","node_modules/@babel/types/lib/modifications/removePropertiesDeep.js","node_modules/@babel/types/src/modifications/removePropertiesDeep.ts","node_modules/@babel/types/lib/traverse/traverseFast.js","node_modules/@babel/types/src/traverse/traverseFast.ts","node_modules/@babel/types/lib/modifications/removeProperties.js","node_modules/@babel/types/src/modifications/removeProperties.ts","node_modules/@babel/types/lib/converters/toStatement.js","node_modules/@babel/types/src/converters/toStatement.ts","node_modules/@babel/types/lib/converters/valueToNode.js","node_modules/@babel/types/src/converters/valueToNode.ts","node_modules/@babel/types/lib/modifications/appendToMemberExpression.js","node_modules/@babel/types/src/modifications/appendToMemberExpression.ts","node_modules/@babel/types/lib/modifications/inherits.js","node_modules/@babel/types/src/modifications/inherits.ts","node_modules/@babel/types/lib/modifications/prependToMemberExpression.js","node_modules/@babel/types/src/modifications/prependToMemberExpression.ts","node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js","node_modules/@babel/types/src/retrievers/getBindingIdentifiers.ts","node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js","node_modules/@babel/types/src/retrievers/getOuterBindingIdentifiers.ts","node_modules/@babel/types/lib/traverse/traverse.js","node_modules/@babel/types/src/traverse/traverse.ts","node_modules/@babel/types/lib/validators/isBinding.js","node_modules/@babel/types/src/validators/isBinding.ts","node_modules/@babel/types/lib/validators/isBlockScoped.js","node_modules/@babel/types/src/validators/isBlockScoped.ts","node_modules/@babel/types/lib/validators/isLet.js","node_modules/@babel/types/src/validators/isLet.ts","node_modules/@babel/types/lib/validators/isImmutable.js","node_modules/@babel/types/src/validators/isImmutable.ts","node_modules/@babel/types/lib/validators/isNodesEquivalent.js","node_modules/@babel/types/src/validators/isNodesEquivalent.ts","node_modules/@babel/types/lib/validators/isReferenced.js","node_modules/@babel/types/src/validators/isReferenced.ts","node_modules/@babel/types/lib/validators/isScope.js","node_modules/@babel/types/src/validators/isScope.ts","node_modules/@babel/types/lib/validators/isSpecifierDefault.js","node_modules/@babel/types/src/validators/isSpecifierDefault.ts","node_modules/@babel/types/lib/validators/isValidES3Identifier.js","node_modules/@babel/types/src/validators/isValidES3Identifier.ts","node_modules/@babel/types/lib/validators/isVar.js","node_modules/@babel/types/src/validators/isVar.ts","node_modules/@babel/types/lib/converters/toSequenceExpression.js","node_modules/@babel/types/src/converters/toSequenceExpression.ts","node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","node_modules/@babel/types/src/converters/gatherSequenceExpressions.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"d7fe96c059a40e7a\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n    } catch (err) {\n      if (err.message) {\n        console.error(err.message);\n      }\n      ws = {};\n    }\n  }\n\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  if (ws instanceof WebSocket) {\n    ws.onerror = function (e) {\n      if (e.message) {\n        console.error(e.message);\n      }\n    };\n    ws.onclose = function () {\n      console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","// **STYLE IMPORTS** //\r\nimport 'normalize.css';\r\nimport '../styles/main.scss';\r\nimport '../styles/reset.css';\r\n\r\n// **MODULE IMPORTS** //\r\nimport helper from './helper';\r\nimport backend from './backend';\r\nimport view from './view';\r\nimport { assertArrowFunctionExpression, updateExpression } from '@babel/types';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  // Get announcements when page is loaded.\r\n  (async () => {\r\n    const posts = await backend.getPosts();\r\n    const user = backend.getCurrentUser();\r\n    view.buildPosts(posts, user);\r\n  })();\r\n\r\n  // Control selecting and opening modal\r\n  const newPostButton = document.getElementById('new-post-button');\r\n  newPostButton.addEventListener('click', () => {\r\n    // Select modal based on user auth status\r\n    const modal = backend.getCurrentUser()\r\n      ? document.getElementById('post-modal')\r\n      : document.getElementById('login-modal');\r\n\r\n    // Show selected modal\r\n    view.openModal(modal);\r\n  });\r\n\r\n  // Handle login submission\r\n  const loginForm = document.getElementById('login-form');\r\n  loginForm.addEventListener('submit', async (event) => {\r\n    event.preventDefault();\r\n    const elements = event.target.elements;\r\n\r\n    const auth = await backend.authUser(\r\n      elements.user.value,\r\n      elements.pwd.value\r\n    );\r\n\r\n    if (!auth) {\r\n      // TODO: Add error message to view\r\n      view.loginError('Invalid username or password');\r\n      return;\r\n    }\r\n\r\n    view.loginError('');\r\n    view.closeModal(document.getElementById('login-modal'));\r\n    loginForm.reset();\r\n    const posts = await backend.getPosts();\r\n    const user = backend.getCurrentUser();\r\n    view.buildPosts(posts, user);\r\n  });\r\n\r\n  // Handle new post submission\r\n  const form = document.getElementById('post-form');\r\n  form.addEventListener('submit', async (event) => {\r\n    event.preventDefault();\r\n    const elements = event.target.elements;\r\n    const user = backend.getCurrentUser();\r\n\r\n    // Build post from submitted data\r\n    const post = helper.buildPost(\r\n      elements.title.value,\r\n      elements.body.value,\r\n      user.name,\r\n      user.id\r\n    );\r\n\r\n    await backend.pushPost(post);\r\n\r\n    view.closeModal(document.getElementById('post-modal'));\r\n    const posts = await backend.getPosts();\r\n    view.buildPosts(posts, user);\r\n    form.reset();\r\n  });\r\n\r\n  //  Set modal close buttons\r\n  const modalClosers = document.querySelectorAll('.modal-close');\r\n  modalClosers.forEach((button) => {\r\n    button.addEventListener('click', (event) => {\r\n      const modal = event.target.parentElement.parentElement;\r\n\r\n      const form = event.target.parentElement.nextElementSibling;\r\n\r\n      view.closeModal(modal);\r\n      form.reset();\r\n    });\r\n  });\r\n\r\n  // Set action of deletion modal buttons\r\n  const deletionButtons = document.querySelectorAll('.deletion-button');\r\n  deletionButtons.forEach((button) => {\r\n    const dialog = button.parentElement.parentElement;\r\n    if (button.id === 'yes') {\r\n      button.addEventListener('click', async () => {\r\n        await backend.deletePost(dialog.dataset.post_id);\r\n        const upatedPosts = await backend.getPosts();\r\n        const user = backend.getCurrentUser();\r\n        view.buildPosts(upatedPosts, user);\r\n        view.closeModal(dialog);\r\n      });\r\n    }\r\n    if (button.id === 'no') {\r\n      button.addEventListener('click', () => {\r\n        view.closeModal(dialog);\r\n      });\r\n    }\r\n  });\r\n\r\n  const logout = document.getElementById('logout');\r\n  logout.addEventListener('click', async () => {\r\n    backend.logoutUser();\r\n    const posts = await backend.getPosts();\r\n    view.buildPosts(posts, null);\r\n  });\r\n});\r\n","const helper = (() => {\r\n  const buildPost = (title, body, author, author_id) => {\r\n    return {\r\n      title,\r\n      body,\r\n      author,\r\n      author_id,\r\n    };\r\n  };\r\n\r\n  return { buildPost };\r\n})();\r\n\r\nexport default helper;\r\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import PocketBase from 'pocketbase';\r\n\r\nconst url = 'https://mpls.pockethost.io/';\r\nconst pb = new PocketBase(url);\r\n\r\n// A module to handle api calls\r\nconst backend = (() => {\r\n  async function getPosts() {\r\n    try {\r\n      const records = await pb\r\n        .collection('posts')\r\n        .getFullList({ sort: '-created' });\r\n\r\n      return records;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function pushPost(post) {\r\n    if (!backend.getCurrentUser()) return;\r\n\r\n    try {\r\n      await pb.collection('posts').create(post);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function deletePost(id) {\r\n    if (!backend.getCurrentUser()) return false;\r\n\r\n    try {\r\n      await pb.collection('posts').delete(id);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function authUser(username, password) {\r\n    try {\r\n      const authData = await pb\r\n        .collection('users')\r\n        .authWithPassword(username, password);\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function getCurrentUser() {\r\n    return pb.authStore.model;\r\n  }\r\n\r\n  function logoutUser() {\r\n    return pb.authStore.clear();\r\n  }\r\n\r\n  return {\r\n    getPosts,\r\n    pushPost,\r\n    deletePost,\r\n    authUser,\r\n    getCurrentUser,\r\n    logoutUser,\r\n  };\r\n})();\r\n\r\nexport default backend;\r\n",null,"/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport class ClientResponseError extends Error {\n    url: string = \"\";\n    status: number = 0;\n    response: { [key: string]: any } = {};\n    isAbort: boolean = false;\n    originalError: any = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (errData !== null && typeof errData === \"object\") {\n            this.url = typeof errData.url === \"string\" ? errData.url : \"\";\n            this.status = typeof errData.status === \"number\" ? errData.status : 0;\n            this.isAbort = !!errData.isAbort;\n            this.originalError = errData.originalError;\n\n            if (errData.response !== null && typeof errData.response === \"object\") {\n                this.response = errData.response;\n            } else if (errData.data !== null && typeof errData.data === \"object\") {\n                this.response = errData.data;\n            } else {\n                this.response = {};\n            }\n        }\n\n        if (!this.originalError && !(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (typeof DOMException !== \"undefined\" && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.response?.message;\n        if (!this.message) {\n            if (this.isAbort) {\n                this.message =\n                    \"The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.\";\n            } else if (this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\")) {\n                this.message =\n                    \"Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).\";\n            } else {\n                this.message = \"Something went wrong while processing your request.\";\n            }\n        }\n    }\n\n    /**\n     * Alias for `this.response` to preserve the backward compatibility.\n     */\n    get data() {\n        return this.response;\n    }\n\n    /**\n     * Make a POJO's copy of the current error class instance.\n     * @see https://github.com/vuex-orm/vuex-orm/issues/255\n     */\n    toJSON() {\n        return { ...this };\n    }\n}\n","/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions {\n    decode?: (val: string) => string;\n}\n\n/**\n * Parses the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n */\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any } {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== \"string\") {\n        return result;\n    }\n\n    const opt = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf(\"=\", index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(\";\", index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n}\n\nexport interface SerializeOptions {\n    encode?: (val: string | number | boolean) => string;\n    maxAge?: number;\n    domain?: string;\n    path?: string;\n    expires?: Date;\n    httpOnly?: boolean;\n    secure?: boolean;\n    priority?: string;\n    sameSite?: boolean | string;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(\n    name: string,\n    val: string,\n    options?: SerializeOptions,\n): string {\n    const opt = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError(\"argument name is invalid\");\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError(\"argument val is invalid\");\n    }\n\n    let result = name + \"=\" + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError(\"option maxAge is invalid\");\n        }\n\n        result += \"; Max-Age=\" + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError(\"option domain is invalid\");\n        }\n\n        result += \"; Domain=\" + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError(\"option path is invalid\");\n        }\n\n        result += \"; Path=\" + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError(\"option expires is invalid\");\n        }\n\n        result += \"; Expires=\" + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += \"; HttpOnly\";\n    }\n\n    if (opt.secure) {\n        result += \"; Secure\";\n    }\n\n    if (opt.priority) {\n        const priority =\n            typeof opt.priority === \"string\" ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case \"low\":\n                result += \"; Priority=Low\";\n                break;\n            case \"medium\":\n                result += \"; Priority=Medium\";\n                break;\n            case \"high\":\n                result += \"; Priority=High\";\n                break;\n            default:\n                throw new TypeError(\"option priority is invalid\");\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite =\n            typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                result += \"; SameSite=Lax\";\n                break;\n            case \"strict\":\n                result += \"; SameSite=Strict\";\n                break;\n            case \"none\":\n                result += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(\"option sameSite is invalid\");\n        }\n    }\n\n    return result;\n}\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf(\"%\") !== -1 ? decodeURIComponent(val) : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return Object.prototype.toString.call(val) === \"[object Date]\" || val instanceof Date;\n}\n","let atobPolyfill: Function;\nif (typeof atob === \"function\") {\n    atobPolyfill = atob;\n} else {\n    /**\n     * The code was extracted from:\n     * https://github.com/davidchambers/Base64.js\n     */\n    atobPolyfill = (input: any) => {\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n        let str = String(input).replace(/=+$/, \"\");\n        if (str.length % 4 == 1) {\n            throw new Error(\n                \"'atob' failed: The string to be decoded is not correctly encoded.\",\n            );\n        }\n\n        for (\n            // initialize result and counters\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4)\n                ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n                : 0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    };\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n            const encodedPayload = decodeURIComponent(\n                atobPolyfill(token.split(\".\")[1])\n                    .split(\"\")\n                    .map(function (c: string) {\n                        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n                    })\n                    .join(\"\"),\n            );\n\n            return JSON.parse(encodedPayload) || {};\n        } catch (e) {}\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || payload.exp - expirationThreshold > Date.now() / 1000)\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import { cookieParse, cookieSerialize, SerializeOptions } from \"@/stores/utils/cookie\";\nimport { isTokenExpired, getTokenPayload } from \"@/stores/utils/jwt\";\n\nexport type AuthModel = { [key: string]: any } | null;\n\nexport type OnStoreChangeFunc = (token: string, model: AuthModel) => void;\n\nconst defaultCookieKey = \"pb_auth\";\n\n/**\n * Base AuthStore class that is intended to be extended by all other\n * PocketBase AuthStore implementations.\n */\nexport abstract class BaseAuthStore {\n    protected baseToken: string = \"\";\n    protected baseModel: AuthModel = null;\n\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get model(): AuthModel {\n        return this.baseModel;\n    }\n\n    /**\n     * Loosely checks if the store has valid token (aka. existing and unexpired exp claim).\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Checks whether the current store state is for admin authentication.\n     */\n    get isAdmin(): boolean {\n        return getTokenPayload(this.token).type === \"admin\";\n    }\n\n    /**\n     * Checks whether the current store state is for auth record authentication.\n     */\n    get isAuthRecord(): boolean {\n        return getTokenPayload(this.token).type === \"authRecord\";\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, model?: AuthModel): void {\n        this.baseToken = token || \"\";\n        this.baseModel = model || null;\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = \"\";\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     *\n     * NB! This function doesn't validate the token or its data.\n     * Usually this isn't a concern if you are interacting only with the\n     * PocketBase API because it has the proper server-side security checks in place,\n     * but if you are using the store `isValid` state for permission controls\n     * in a node server (eg. SSR), then it is recommended to call `authRefresh()`\n     * after loading the cookie to ensure an up-to-date token and model state.\n     * For example:\n     *\n     * ```js\n     * pb.authStore.loadFromCookie(\"cookie string...\");\n     *\n     * try {\n     *     // get an up-to-date auth store state by veryfing and refreshing the loaded auth model (if any)\n     *     pb.authStore.isValid && await pb.collection('users').authRefresh();\n     * } catch (_) {\n     *     // clear the auth store on failed refresh\n     *     pb.authStore.clear();\n     * }\n     * ```\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || \"\")[key] || \"\";\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== \"object\" || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || \"\", data.model || null);\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure: true,\n            sameSite: true,\n            httpOnly: true,\n            path: \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date(\"1970-01-01\");\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            model: this.model ? JSON.parse(JSON.stringify(this.model)) : null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength =\n            typeof Blob !== \"undefined\" ? new Blob([result]).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.model && resultLength > 4096) {\n            rawData.model = { id: rawData?.model?.id, email: rawData?.model?.email };\n            const extraProps = [\"collectionId\", \"username\", \"verified\"];\n            for (const prop in this.model) {\n                if (extraProps.includes(prop)) {\n                    rawData.model[prop] = this.model[prop];\n                }\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * You can set the `fireImmediately` argument to true in order to invoke\n     * the provided callback right after registration.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        if (fireImmediately) {\n            callback(this.token, this.model);\n        }\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i]; // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        };\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.model);\n        }\n    }\n}\n","import { BaseAuthStore, AuthModel } from \"@/stores/BaseAuthStore\";\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (eg. in node env).\n */\nexport class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string;\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n\n        this._bindStorageEvent();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || \"\";\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get model(): AuthModel {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.model || null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model?: AuthModel) {\n        this._storageSet(this.storageKey, {\n            token: token,\n            model: model,\n        });\n\n        super.save(token, model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            const rawValue = window.localStorage.getItem(key) || \"\";\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) {\n                // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== \"string\") {\n                normalizedVal = JSON.stringify(value);\n            }\n            window.localStorage.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            window.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n\n    /**\n     * Updates the current store state on localStorage change.\n     */\n    private _bindStorageEvent() {\n        if (\n            typeof window === \"undefined\" ||\n            !window?.localStorage ||\n            !window.addEventListener\n        ) {\n            return;\n        }\n\n        window.addEventListener(\"storage\", (e) => {\n            if (e.key != this.storageKey) {\n                return;\n            }\n\n            const data = this._storageGet(this.storageKey) || {};\n\n            super.save(data.token || \"\", data.model || null);\n        });\n    }\n}\n","import Client from \"@/Client\";\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport abstract class BaseService {\n    readonly client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n","import { BaseService } from \"@/services/utils/BaseService\";\nimport { CommonOptions } from \"@/services/utils/options\";\n\ninterface appleClientSecret {\n    secret: string;\n}\n\nexport class SettingsService extends BaseService {\n    /**\n     * Fetch all available app settings.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getAll(options?: CommonOptions): Promise<{ [key: string]: any }> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings\", options);\n    }\n\n    /**\n     * Bulk updates app settings.\n     *\n     * @throws {ClientResponseError}\n     */\n    async update(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<{ [key: string]: any }> {\n        options = Object.assign(\n            {\n                method: \"PATCH\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings\", options);\n    }\n\n    /**\n     * Performs a S3 filesystem connection test.\n     *\n     * The currently supported `filesystem` are \"storage\" and \"backups\".\n     *\n     * @throws {ClientResponseError}\n     */\n    async testS3(\n        filesystem: string = \"storage\",\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    filesystem: filesystem,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/test/s3\", options).then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     *\n     * @throws {ClientResponseError}\n     */\n    async testEmail(\n        toEmail: string,\n        emailTemplate: string,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    email: toEmail,\n                    template: emailTemplate,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/test/email\", options).then(() => true);\n    }\n\n    /**\n     * Generates a new Apple OAuth2 client secret.\n     *\n     * @throws {ClientResponseError}\n     */\n    async generateAppleClientSecret(\n        clientId: string,\n        teamId: string,\n        keyId: string,\n        privateKey: string,\n        duration: number,\n        options?: CommonOptions,\n    ): Promise<appleClientSecret> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    clientId,\n                    teamId,\n                    keyId,\n                    privateKey,\n                    duration,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/apple/generate-client-secret\", options);\n    }\n}\n","import { BaseService } from \"@/services/utils/BaseService\";\nimport { ClientResponseError } from \"@/ClientResponseError\";\nimport { ListResult } from \"@/services/utils/dtos\";\nimport { CommonOptions, ListOptions, FullListOptions } from \"@/services/utils/options\";\n\nexport abstract class CrudService<M> extends BaseService {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract get baseCrudPath(): string;\n\n    /**\n     * Response data decoder.\n     */\n    decode<T = M>(data: { [key: string]: any }): T {\n        return data as T;\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once\n     * (by default 500 items per request; to change it set the `batch` query param).\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList<T = M>(options?: FullListOptions): Promise<Array<T>>;\n\n    /**\n     * Legacy version of getFullList with explicitly specified batch size.\n     */\n    async getFullList<T = M>(batch?: number, options?: ListOptions): Promise<Array<T>>;\n\n    async getFullList<T = M>(\n        batchOrqueryParams?: number | FullListOptions,\n        options?: ListOptions,\n    ): Promise<Array<T>> {\n        if (typeof batchOrqueryParams == \"number\") {\n            return this._getFullList<T>(batchOrqueryParams, options);\n        }\n\n        options = Object.assign({}, batchOrqueryParams, options);\n\n        let batch = 500;\n        if (options.batch) {\n            batch = options.batch;\n            delete options.batch;\n        }\n\n        return this._getFullList<T>(batch, options);\n    }\n\n    /**\n     * Returns paginated items list.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getList<T = M>(\n        page = 1,\n        perPage = 30,\n        options?: ListOptions,\n    ): Promise<ListResult<T>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        options.query = Object.assign(\n            {\n                page: page,\n                perPage: perPage,\n            },\n            options.query,\n        );\n\n        return this.client.send(this.baseCrudPath, options).then((responseData: any) => {\n            responseData.items =\n                responseData.items?.map((item: any) => {\n                    return this.decode<T>(item);\n                }) || [];\n\n            return responseData;\n        });\n    }\n\n    /**\n     * Returns the first found item by the specified filter.\n     *\n     * Internally it calls `getList(1, 1, { filter, skipTotal })` and\n     * returns the first found item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * For consistency with `getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFirstListItem<T = M>(filter: string, options?: CommonOptions): Promise<T> {\n        options = Object.assign(\n            {\n                requestKey: \"one_by_filter_\" + this.baseCrudPath + \"_\" + filter,\n            },\n            options,\n        );\n\n        options.query = Object.assign(\n            {\n                filter: filter,\n                skipTotal: 1,\n            },\n            options.query,\n        );\n\n        return this.getList<T>(1, 1, options).then((result) => {\n            if (!result?.items?.length) {\n                throw new ClientResponseError({\n                    status: 404,\n                    response: {\n                        code: 404,\n                        message: \"The requested resource wasn't found.\",\n                        data: {},\n                    },\n                });\n            }\n\n            return result.items[0];\n        });\n    }\n\n    /**\n     * Returns single item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * If `id` is empty it will throw a 404 error.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getOne<T = M>(id: string, options?: CommonOptions): Promise<T> {\n        if (!id) {\n            throw new ClientResponseError({\n                url: this.client.buildUrl(this.baseCrudPath + \"/\"),\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"Missing required record id.\",\n                    data: {},\n                },\n            });\n        }\n\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Creates a new item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async create<T = M>(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath, options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Updates an existing item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async update<T = M>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign(\n            {\n                method: \"PATCH\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     *\n     * @throws {ClientResponseError}\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then(() => true);\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList<T = M>(\n        batchSize = 500,\n        options?: ListOptions,\n    ): Promise<Array<T>> {\n        options = options || {};\n        options.query = Object.assign(\n            {\n                skipTotal: 1,\n            },\n            options.query,\n        );\n\n        let result: Array<T> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this.getList(page, batchSize || 500, options).then((list) => {\n                const castedList = list as any as ListResult<T>;\n                const items = castedList.items;\n\n                result = result.concat(items);\n\n                if (items.length == list.perPage) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        };\n\n        return request(1);\n    }\n}\n","import { SendOptions } from \"@/services/utils/options\";\n\nexport function normalizeLegacyOptionsArgs(\n    legacyWarn: string,\n    baseOptions: SendOptions,\n    bodyOrOptions?: any,\n    query?: any,\n): SendOptions {\n    const hasBodyOrOptions = typeof bodyOrOptions !== \"undefined\";\n    const hasQuery = typeof query !== \"undefined\";\n\n    if (!hasQuery && !hasBodyOrOptions) {\n        return baseOptions;\n    }\n\n    if (hasQuery) {\n        console.warn(legacyWarn);\n        baseOptions.body = Object.assign({}, baseOptions.body, bodyOrOptions);\n        baseOptions.query = Object.assign({}, baseOptions.query, query);\n\n        return baseOptions;\n    }\n\n    return Object.assign(baseOptions, bodyOrOptions);\n}\n","import Client from \"@/Client\";\nimport { isTokenExpired } from \"@/stores/utils/jwt\";\n\n// reset previous auto refresh registrations\nexport function resetAutoRefresh(client: Client) {\n    (client as any)._resetAutoRefresh?.();\n}\n\nexport function registerAutoRefresh(\n    client: Client,\n    threshold: number,\n    refreshFunc: () => Promise<any>,\n    reauthenticateFunc: () => Promise<any>,\n) {\n    resetAutoRefresh(client);\n\n    const oldBeforeSend = client.beforeSend;\n    const oldModel = client.authStore.model;\n\n    // unset the auto refresh in case the auth store was cleared\n    // OR a new model was authenticated\n    const unsubStoreChange = client.authStore.onChange((newToken, model) => {\n        if (\n            !newToken ||\n            model?.id != oldModel?.id ||\n            // check the collection id in case an admin and auth record share the same id\n            ((model?.collectionId || oldModel?.collectionId) &&\n                model?.collectionId != oldModel?.collectionId)\n        ) {\n            resetAutoRefresh(client);\n        }\n    });\n\n    // initialize a reset function and attach it dynamically to the client\n    (client as any)._resetAutoRefresh = function () {\n        unsubStoreChange();\n        client.beforeSend = oldBeforeSend;\n        delete (client as any)._resetAutoRefresh;\n    };\n\n    client.beforeSend = async (url, sendOptions) => {\n        const oldToken = client.authStore.token;\n\n        if (sendOptions.query?.autoRefresh) {\n            return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n        }\n\n        let isValid = client.authStore.isValid;\n        if (\n            // is loosely valid\n            isValid &&\n            // but it is going to expire in the next \"threshold\" seconds\n            isTokenExpired(client.authStore.token, threshold)\n        ) {\n            try {\n                await refreshFunc();\n            } catch (_) {\n                isValid = false;\n            }\n        }\n\n        // still invalid -> reauthenticate\n        if (!isValid) {\n            await reauthenticateFunc();\n        }\n\n        // the request wasn't sent with a custom token\n        const headers = sendOptions.headers || {};\n        for (let key in headers) {\n            if (\n                key.toLowerCase() == \"authorization\" &&\n                // the request wasn't sent with a custom token\n                oldToken == headers[key] &&\n                client.authStore.token\n            ) {\n                // set the latest store token\n                headers[key] = client.authStore.token;\n                break;\n            }\n        }\n        sendOptions.headers = headers;\n\n        return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n    };\n}\n","import { CrudService } from \"@/services/utils/CrudService\";\nimport { AdminModel } from \"@/services/utils/dtos\";\nimport { AuthOptions, CommonOptions } from \"@/services/utils/options\";\nimport { normalizeLegacyOptionsArgs } from \"@/services/utils/legacy\";\nimport { registerAutoRefresh, resetAutoRefresh } from \"@/services/utils/refresh\";\n\nexport interface AdminAuthResponse {\n    [key: string]: any;\n\n    token: string;\n    admin: AdminModel;\n}\n\nexport class AdminService extends CrudService<AdminModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return \"/api/admins\";\n    }\n\n    // ---------------------------------------------------------------\n    // Post update/delete AuthStore sync\n    // ---------------------------------------------------------------\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    async update<T = AdminModel>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        return super.update(id, bodyParams, options).then((item) => {\n            // update the store state if the updated item id matches with the stored model\n            if (\n                this.client.authStore.model?.id === item.id &&\n                typeof this.client.authStore.model?.collectionId === \"undefined\" // is not record auth\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            // clear the store state if the deleted item id matches with the stored model\n            if (\n                success &&\n                this.client.authStore.model?.id === id &&\n                typeof this.client.authStore.model?.collectionId === \"undefined\" // is not record auth\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful authorize response.\n     */\n    protected authResponse(responseData: any): AdminAuthResponse {\n        const admin = this.decode(responseData?.admin || {});\n\n        if (responseData?.token && responseData?.admin) {\n            this.client.authStore.save(responseData.token, admin);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            token: responseData?.token || \"\",\n            admin: admin,\n        });\n    }\n\n    /**\n     * Authenticate an admin account with its email and password\n     * and returns a new admin token and data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithPassword(\n        email: string,\n        password: string,\n        options?: AuthOptions,\n    ): Promise<AdminAuthResponse>;\n\n    /**\n     * @deprecated\n     * Consider using authWithPassword(email, password, options?).\n     */\n    async authWithPassword(\n        email: string,\n        password: string,\n        body?: any,\n        query?: any,\n    ): Promise<AdminAuthResponse>;\n\n    async authWithPassword(\n        email: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<AdminAuthResponse> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                identity: email,\n                password: password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authWithPassword(email, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(email, pass, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        const autoRefreshThreshold = options.autoRefreshThreshold;\n        delete options.autoRefreshThreshold;\n\n        // not from auto refresh reauthentication\n        if (!options.autoRefresh) {\n            resetAutoRefresh(this.client);\n        }\n\n        let authData = await this.client.send(\n            this.baseCrudPath + \"/auth-with-password\",\n            options,\n        );\n\n        authData = this.authResponse(authData);\n\n        if (autoRefreshThreshold) {\n            registerAutoRefresh(\n                this.client,\n                autoRefreshThreshold,\n                () => this.authRefresh({ autoRefresh: true }),\n                () =>\n                    this.authWithPassword(\n                        email,\n                        password,\n                        Object.assign({ autoRefresh: true }, options),\n                    ),\n            );\n        }\n\n        return authData;\n    }\n\n    /**\n     * Refreshes the current admin authenticated instance and\n     * returns a new token and admin data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authRefresh(options?: CommonOptions): Promise<AdminAuthResponse>;\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    async authRefresh(body?: any, query?: any): Promise<AdminAuthResponse>;\n\n    async authRefresh(bodyOrOptions?: any, query?: any): Promise<AdminAuthResponse> {\n        let options: any = {\n            method: \"POST\",\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/auth-refresh\", options)\n            .then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends admin password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    async requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestPasswordReset(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/request-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms admin password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmPasswordReset(\n        resetToken: string,\n        password: string,\n        passwordConfirm: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(resetToken, password, passwordConfirm, options?).\n     */\n    async confirmPasswordReset(\n        resetToken: string,\n        password: string,\n        passwordConfirm: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmPasswordReset(\n        resetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: resetToken,\n                password: password,\n                passwordConfirm: passwordConfirm,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmPasswordReset(resetToken, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(resetToken, password, passwordConfirm, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/confirm-password-reset\", options)\n            .then(() => true);\n    }\n}\n","export interface SendOptions extends RequestInit {\n    // for backward compatibility and to minimize the verbosity,\n    // any top-level field that doesn't exist in RequestInit or the\n    // fields below will be treated as query parameter.\n    [key: string]: any;\n\n    /**\n     * Optional custom fetch function to use for sending the request.\n     */\n    fetch?: (url: RequestInfo | URL, config?: RequestInit) => Promise<Response>;\n\n    /**\n     * Custom headers to send with the requests.\n     */\n    headers?: { [key: string]: string };\n\n    /**\n     * The body of the request (serialized automatically for json requests).\n     */\n    body?: any;\n\n    /**\n     * Query parameters that will be appended to the request url.\n     */\n    query?: { [key: string]: any };\n\n    /**\n     * @deprecated use `query` instead\n     *\n     * for backward-compatibility `params` values are merged with `query`,\n     * but this option may get removed in the final v1 release\n     */\n    params?: { [key: string]: any };\n\n    /**\n     * The request identifier that can be used to cancel pending requests.\n     */\n    requestKey?: string | null;\n\n    /**\n     * @deprecated use `requestKey:string` instead\n     */\n    $cancelKey?: string;\n\n    /**\n     * @deprecated use `requestKey:null` instead\n     */\n    $autoCancel?: boolean;\n}\n\nexport interface CommonOptions extends SendOptions {\n    fields?: string;\n}\n\nexport interface ListOptions extends CommonOptions {\n    page?: number;\n    perPage?: number;\n    sort?: string;\n    filter?: string;\n    skipTotal?: boolean;\n}\n\nexport interface FullListOptions extends ListOptions {\n    batch?: number;\n}\n\nexport interface RecordOptions extends CommonOptions {\n    expand?: string;\n}\n\nexport interface RecordListOptions extends ListOptions, RecordOptions {}\n\nexport interface RecordFullListOptions extends FullListOptions, RecordOptions {}\n\nexport interface LogStatsOptions extends CommonOptions {\n    filter?: string;\n}\n\nexport interface FileOptions extends CommonOptions {\n    thumb?: string;\n    download?: boolean;\n}\n\nexport interface AuthOptions extends CommonOptions {\n    /**\n     * If autoRefreshThreshold is set it will take care to auto refresh\n     * when necessary the auth data before each request to ensure that\n     * the auth state is always valid.\n     *\n     * The value must be in seconds, aka. the amount of seconds\n     * that will be subtracted from the current token `exp` claim in order\n     * to determine whether it is going to expire within the specified time threshold.\n     *\n     * For example, if you want to auto refresh the token if it is\n     * going to expire in the next 30mins (or already has expired),\n     * it can be set to `1800`\n     */\n    autoRefreshThreshold?: number;\n}\n\n// -------------------------------------------------------------------\n\n// list of known SendOptions keys (everything else is treated as query param)\nconst knownSendOptionsKeys = [\n    \"requestKey\",\n    \"$cancelKey\",\n    \"$autoCancel\",\n    \"fetch\",\n    \"headers\",\n    \"body\",\n    \"query\",\n    \"params\",\n    // ---,\n    \"cache\",\n    \"credentials\",\n    \"headers\",\n    \"integrity\",\n    \"keepalive\",\n    \"method\",\n    \"mode\",\n    \"redirect\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"signal\",\n    \"window\",\n];\n\n// modifies in place the provided options by moving unknown send options as query parameters.\nexport function normalizeUnknownQueryParams(options?: SendOptions): void {\n    if (!options) {\n        return;\n    }\n\n    options.query = options.query || {};\n    for (let key in options) {\n        if (knownSendOptionsKeys.includes(key)) {\n            continue;\n        }\n\n        options.query[key] = options[key];\n        delete options[key];\n    }\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseService } from \"@/services/utils/BaseService\";\nimport { SendOptions, normalizeUnknownQueryParams } from \"@/services/utils/options\";\n\ninterface promiseCallbacks {\n    resolve: Function;\n    reject: Function;\n}\n\ntype Subscriptions = { [key: string]: Array<EventListener> };\n\nexport type UnsubscribeFunc = () => Promise<void>;\n\nexport class RealtimeService extends BaseService {\n    clientId: string = \"\";\n\n    private eventSource: EventSource | null = null;\n    private subscriptions: Subscriptions = {};\n    private lastSentSubscriptions: Array<string> = [];\n    private connectTimeoutId: any;\n    private maxConnectTimeout: number = 15000;\n    private reconnectTimeoutId: any;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = Infinity;\n    private predefinedReconnectIntervals: Array<number> = [\n        200, 300, 500, 1000, 1200, 1500, 2000,\n    ];\n    private pendingConnects: Array<promiseCallbacks> = [];\n\n    /**\n     * Returns whether the realtime connection has been established.\n     */\n    get isConnected(): boolean {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n\n    /**\n     * Register the subscription listener.\n     *\n     * You can subscribe multiple times to the same topic.\n     *\n     * If the SSE connection is not started yet,\n     * this method will also initialize it.\n     */\n    async subscribe(\n        topic: string,\n        callback: (data: any) => void,\n        options?: SendOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"topic must be set.\");\n        }\n\n        let key = topic;\n\n        // serialize and append the topic options (if any)\n        if (options) {\n            normalizeUnknownQueryParams(options);\n            const serialized =\n                \"options=\" +\n                encodeURIComponent(\n                    JSON.stringify({ query: options.query, headers: options.headers }),\n                );\n            key += (key.includes(\"?\") ? \"&\" : \"?\") + serialized;\n        }\n\n        const listener = function (e: Event) {\n            const msgEvent = e as MessageEvent;\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        };\n\n        // store the listener\n        if (!this.subscriptions[key]) {\n            this.subscriptions[key] = [];\n        }\n        this.subscriptions[key].push(listener);\n\n        if (!this.isConnected) {\n            // initialize sse connection\n            await this.connect();\n        } else if (this.subscriptions[key].length === 1) {\n            // send the updated subscriptions (if it is the first for the key)\n            await this.submitSubscriptions();\n        } else {\n            // only register the listener\n            this.eventSource?.addEventListener(key, listener);\n        }\n\n        return async (): Promise<void> => {\n            return this.unsubscribeByTopicAndListener(topic, listener);\n        };\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners with the specified topic.\n     *\n     * If `topic` is not provided, then this method will unsubscribe\n     * from all active subscriptions.\n     *\n     * This method is no-op if there are no active subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        let needToSubmit = false;\n\n        if (!topic) {\n            // remove all subscriptions\n            this.subscriptions = {};\n        } else {\n            // remove all listeners related to the topic\n            const subs = this.getSubscriptionsByTopic(topic);\n            for (let key in subs) {\n                if (!this.hasSubscriptionListeners(key)) {\n                    continue; // already unsubscribed\n                }\n\n                for (let listener of this.subscriptions[key]) {\n                    this.eventSource?.removeEventListener(key, listener);\n                }\n                delete this.subscriptions[key];\n\n                // mark for subscriptions change submit if there are no other listeners\n                if (!needToSubmit) {\n                    needToSubmit = true;\n                }\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\n     *\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByPrefix(keyPrefix: string): Promise<void> {\n        let hasAtleastOneTopic = false;\n        for (let key in this.subscriptions) {\n            // \"?\" so that it can be used as end delimiter for the prefix\n            if (!(key + \"?\").startsWith(keyPrefix)) {\n                continue;\n            }\n\n            hasAtleastOneTopic = true;\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            delete this.subscriptions[key];\n        }\n\n        if (!hasAtleastOneTopic) {\n            return; // nothing to unsubscribe from\n        }\n\n        if (this.hasSubscriptionListeners()) {\n            // submit the deleted subscriptions\n            await this.submitSubscriptions();\n        } else {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\n     *\n     * This method is no-op if there are no active subscription with\n     * the specified topic and listener.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByTopicAndListener(\n        topic: string,\n        listener: EventListener,\n    ): Promise<void> {\n        let needToSubmit = false;\n\n        const subs = this.getSubscriptionsByTopic(topic);\n        for (let key in subs) {\n            if (\n                !Array.isArray(this.subscriptions[key]) ||\n                !this.subscriptions[key].length\n            ) {\n                continue; // already unsubscribed\n            }\n\n            let exist = false;\n            for (let i = this.subscriptions[key].length - 1; i >= 0; i--) {\n                if (this.subscriptions[key][i] !== listener) {\n                    continue;\n                }\n\n                exist = true; // has at least one matching listener\n                delete this.subscriptions[key][i]; // removes the function reference\n                this.subscriptions[key].splice(i, 1); // reindex the array\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            if (!exist) {\n                continue;\n            }\n\n            // remove the key from the subscriptions list if there are no other listeners\n            if (!this.subscriptions[key].length) {\n                delete this.subscriptions[key];\n            }\n\n            // mark for subscriptions change submit if there are no other listeners\n            if (!needToSubmit && !this.hasSubscriptionListeners(key)) {\n                needToSubmit = true;\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    private hasSubscriptionListeners(keyToCheck?: string): boolean {\n        this.subscriptions = this.subscriptions || {};\n\n        // check the specified key\n        if (keyToCheck) {\n            return !!this.subscriptions[keyToCheck]?.length;\n        }\n\n        // check for at least one non-empty subscription\n        for (let key in this.subscriptions) {\n            if (!!this.subscriptions[key]?.length) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private async submitSubscriptions(): Promise<void> {\n        if (!this.clientId) {\n            return; // no client/subscriber\n        }\n\n        // optimistic update\n        this.addAllSubscriptionListeners();\n\n        this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys();\n\n        return this.client\n            .send(\"/api/realtime\", {\n                method: \"POST\",\n                body: {\n                    clientId: this.clientId,\n                    subscriptions: this.lastSentSubscriptions,\n                },\n                requestKey: this.getSubscriptionsCancelKey(),\n            })\n            .catch((err) => {\n                if (err?.isAbort) {\n                    return; // silently ignore aborted pending requests\n                }\n                throw err;\n            });\n    }\n\n    private getSubscriptionsCancelKey(): string {\n        return \"realtime_\" + this.clientId;\n    }\n\n    private getSubscriptionsByTopic(topic: string): Subscriptions {\n        const result: Subscriptions = {};\n\n        // \"?\" so that it can be used as end delimiter for the topic\n        topic = topic.includes(\"?\") ? topic : topic + \"?\";\n\n        for (let key in this.subscriptions) {\n            if ((key + \"?\").startsWith(topic)) {\n                result[key] = this.subscriptions[key];\n            }\n        }\n\n        return result;\n    }\n\n    private getNonEmptySubscriptionKeys(): Array<string> {\n        const result: Array<string> = [];\n\n        for (let key in this.subscriptions) {\n            if (this.subscriptions[key].length) {\n                result.push(key);\n            }\n        }\n\n        return result;\n    }\n\n    private addAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeAllSubscriptionListeners();\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.addEventListener(key, listener);\n            }\n        }\n    }\n\n    private removeAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.removeEventListener(key, listener);\n            }\n        }\n    }\n\n    private async connect(): Promise<void> {\n        if (this.reconnectAttempts > 0) {\n            // immediately resolve the promise to avoid indefinitely\n            // blocking the client during reconnection\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.pendingConnects.push({ resolve, reject });\n\n            if (this.pendingConnects.length > 1) {\n                // all promises will be resolved once the connection is established\n                return;\n            }\n\n            this.initConnect();\n        });\n    }\n\n    private initConnect() {\n        this.disconnect(true);\n\n        // wait up to 15s for connect\n        clearTimeout(this.connectTimeoutId);\n        this.connectTimeoutId = setTimeout(() => {\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout);\n\n        this.eventSource = new EventSource(this.client.buildUrl(\"/api/realtime\"));\n\n        this.eventSource.onerror = (_) => {\n            this.connectErrorHandler(\n                new Error(\"Failed to establish realtime connection.\"),\n            );\n        };\n\n        this.eventSource.addEventListener(\"PB_CONNECT\", (e) => {\n            const msgEvent = e as MessageEvent;\n            this.clientId = msgEvent?.lastEventId;\n\n            this.submitSubscriptions()\n                .then(async () => {\n                    let retries = 3;\n                    while (this.hasUnsentSubscriptions() && retries > 0) {\n                        retries--;\n                        // resubscribe to ensure that the latest topics are submitted\n                        //\n                        // This is needed because missed topics could happen on reconnect\n                        // if after the pending sent `submitSubscriptions()` call another `subscribe()`\n                        // was made before the submit was able to complete.\n                        await this.submitSubscriptions();\n                    }\n                })\n                .then(() => {\n                    for (let p of this.pendingConnects) {\n                        p.resolve();\n                    }\n\n                    // reset connect meta\n                    this.pendingConnects = [];\n                    this.reconnectAttempts = 0;\n                    clearTimeout(this.reconnectTimeoutId);\n                    clearTimeout(this.connectTimeoutId);\n\n                    // propagate the PB_CONNECT event\n                    const connectSubs = this.getSubscriptionsByTopic(\"PB_CONNECT\");\n                    for (let key in connectSubs) {\n                        for (let listener of connectSubs[key]) {\n                            listener(e);\n                        }\n                    }\n                })\n                .catch((err) => {\n                    this.clientId = \"\";\n                    this.connectErrorHandler(err);\n                });\n        });\n    }\n\n    private hasUnsentSubscriptions(): boolean {\n        const latestTopics = this.getNonEmptySubscriptionKeys();\n        if (latestTopics.length != this.lastSentSubscriptions.length) {\n            return true;\n        }\n\n        for (const t of latestTopics) {\n            if (!this.lastSentSubscriptions.includes(t)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private connectErrorHandler(err: any) {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n\n        if (\n            // wasn't previously connected -> direct reject\n            (!this.clientId && !this.reconnectAttempts) ||\n            // was previously connected but the max reconnection limit has been reached\n            this.reconnectAttempts > this.maxReconnectAttempts\n        ) {\n            for (let p of this.pendingConnects) {\n                p.reject(new ClientResponseError(err));\n            }\n            this.pendingConnects = [];\n            this.disconnect();\n            return;\n        }\n\n        // otherwise -> reconnect in the background\n        this.disconnect(true);\n        const timeout =\n            this.predefinedReconnectIntervals[this.reconnectAttempts] ||\n            this.predefinedReconnectIntervals[\n                this.predefinedReconnectIntervals.length - 1\n            ];\n        this.reconnectAttempts++;\n        this.reconnectTimeoutId = setTimeout(() => {\n            this.initConnect();\n        }, timeout);\n    }\n\n    private disconnect(fromReconnect = false): void {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n        this.removeAllSubscriptionListeners();\n        this.client.cancelRequest(this.getSubscriptionsCancelKey());\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n\n        if (!fromReconnect) {\n            this.reconnectAttempts = 0;\n\n            // resolve any remaining connect promises\n            //\n            // this is done to avoid unnecessary throwing errors in case\n            // unsubscribe is called before the pending connect promises complete\n            // (see https://github.com/pocketbase/pocketbase/discussions/2897#discussioncomment-6423818)\n            for (let p of this.pendingConnects) {\n                p.resolve();\n            }\n            this.pendingConnects = [];\n        }\n    }\n}\n","import Client from \"@/Client\";\nimport { getTokenPayload } from \"@/stores/utils/jwt\";\nimport { CrudService } from \"@/services/utils/CrudService\";\nimport { RealtimeService, UnsubscribeFunc } from \"@/services/RealtimeService\";\nimport { ClientResponseError } from \"@/ClientResponseError\";\nimport { ListResult, RecordModel, ExternalAuthModel } from \"@/services/utils/dtos\";\nimport {\n    SendOptions,\n    CommonOptions,\n    RecordOptions,\n    RecordListOptions,\n    RecordFullListOptions,\n} from \"@/services/utils/options\";\nimport { normalizeLegacyOptionsArgs } from \"@/services/utils/legacy\";\n\nexport interface RecordAuthResponse<T = RecordModel> {\n    /**\n     * The signed PocketBase auth record.\n     */\n    record: T;\n\n    /**\n     * The PocketBase record auth token.\n     *\n     * If you are looking for the OAuth2 access and refresh tokens\n     * they are available under the `meta.accessToken` and `meta.refreshToken` props.\n     */\n    token: string;\n\n    /**\n     * Auth meta data usually filled when OAuth2 is used.\n     */\n    meta?: { [key: string]: any };\n}\n\nexport interface AuthProviderInfo {\n    name: string;\n    displayName: string;\n    state: string;\n    authUrl: string;\n    codeVerifier: string;\n    codeChallenge: string;\n    codeChallengeMethod: string;\n}\n\nexport interface AuthMethodsList {\n    usernamePassword: boolean;\n    emailPassword: boolean;\n    onlyVerified: boolean;\n    authProviders: Array<AuthProviderInfo>;\n}\n\nexport interface RecordSubscription<T = RecordModel> {\n    action: string; // eg. create, update, delete\n    record: T;\n}\n\nexport type OAuth2UrlCallback = (url: string) => void | Promise<void>;\n\nexport interface OAuth2AuthConfig extends SendOptions {\n    // the name of the OAuth2 provider (eg. \"google\")\n    provider: string;\n\n    // custom scopes to overwrite the default ones\n    scopes?: Array<string>;\n\n    // optional record create data\n    createData?: { [key: string]: any };\n\n    // optional callback that is triggered after the OAuth2 sign-in/sign-up url generation\n    urlCallback?: OAuth2UrlCallback;\n\n    // optional query params to send with the PocketBase auth request (eg. fields, expand, etc.)\n    query?: RecordOptions;\n}\n\nexport class RecordService<M = RecordModel> extends CrudService<M> {\n    readonly collectionIdOrName: string;\n\n    constructor(client: Client, collectionIdOrName: string) {\n        super(client);\n\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return this.baseCollectionPath + \"/records\";\n    }\n\n    /**\n     * Returns the current collection service base path.\n     */\n    get baseCollectionPath(): string {\n        return \"/api/collections/\" + encodeURIComponent(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Realtime handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\n     *\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\n     * any record changes in the collection.\n     *\n     * If `topic` is a record id, then this method will subscribe only\n     * to changes of the specified record id.\n     *\n     * It's OK to subscribe multiple times to the same topic.\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\n     */\n    async subscribe<T = M>(\n        topic: string,\n        callback: (data: RecordSubscription<T>) => void,\n        options?: SendOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"Missing topic.\");\n        }\n\n        if (!callback) {\n            throw new Error(\"Missing subscription callback.\");\n        }\n\n        return this.client.realtime.subscribe(\n            this.collectionIdOrName + \"/\" + topic,\n            callback,\n            options,\n        );\n    }\n\n    /**\n     * Unsubscribe from all subscriptions of the specified topic\n     * (\"*\" or record id).\n     *\n     * If `topic` is not set, then this method will unsubscribe from\n     * all subscriptions associated to the current collection.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        // unsubscribe from the specified topic\n        if (topic) {\n            return this.client.realtime.unsubscribe(\n                this.collectionIdOrName + \"/\" + topic,\n            );\n        }\n\n        // unsubscribe from everything related to the collection\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Crud handers\n    // ---------------------------------------------------------------\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(options?: RecordFullListOptions): Promise<Array<T>>;\n\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(\n        batch?: number,\n        options?: RecordListOptions,\n    ): Promise<Array<T>>;\n\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(\n        batchOrOptions?: number | RecordFullListOptions,\n        options?: RecordListOptions,\n    ): Promise<Array<T>> {\n        if (typeof batchOrOptions == \"number\") {\n            return super.getFullList<T>(batchOrOptions, options);\n        }\n\n        const params = Object.assign({}, batchOrOptions, options);\n\n        return super.getFullList<T>(params);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getList<T = M>(\n        page = 1,\n        perPage = 30,\n        options?: RecordListOptions,\n    ): Promise<ListResult<T>> {\n        return super.getList<T>(page, perPage, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getFirstListItem<T = M>(\n        filter: string,\n        options?: RecordListOptions,\n    ): Promise<T> {\n        return super.getFirstListItem<T>(filter, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getOne<T = M>(id: string, options?: RecordOptions): Promise<T> {\n        return super.getOne<T>(id, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async create<T = M>(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): Promise<T> {\n        return super.create<T>(bodyParams, options);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    async update<T = M>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): Promise<T> {\n        return super.update<RecordModel>(id, bodyParams, options).then((item) => {\n            if (\n                // is record auth\n                this.client.authStore.model?.id === item?.id &&\n                (this.client.authStore.model?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.model?.collectionName ===\n                        this.collectionIdOrName)\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            if (\n                success &&\n                // is record auth\n                this.client.authStore.model?.id === id &&\n                (this.client.authStore.model?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.model?.collectionName ===\n                        this.collectionIdOrName)\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful collection authorization response.\n     */\n    protected authResponse<T = M>(responseData: any): RecordAuthResponse<T> {\n        const record = this.decode(responseData?.record || {});\n\n        this.client.authStore.save(responseData?.token, record as any);\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            token: responseData?.token || \"\",\n            record: record as any as T,\n        });\n    }\n\n    /**\n     * Returns all available collection auth methods.\n     *\n     * @throws {ClientResponseError}\n     */\n    async listAuthMethods(options?: CommonOptions): Promise<AuthMethodsList> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-methods\", options)\n            .then((responseData: any) => {\n                return Object.assign({}, responseData, {\n                    // normalize common fields\n                    usernamePassword: !!responseData?.usernamePassword,\n                    emailPassword: !!responseData?.emailPassword,\n                    authProviders: Array.isArray(responseData?.authProviders)\n                        ? responseData?.authProviders\n                        : [],\n                });\n            });\n    }\n\n    /**\n     * Authenticate a single auth collection record via its username/email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithPassword<T = M>(\n        usernameOrEmail: string,\n        password: string,\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authWithPassword(usernameOrEmail, password, options?).\n     */\n    async authWithPassword<T = M>(\n        usernameOrEmail: string,\n        password: string,\n        body?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>>;\n\n    async authWithPassword<T = M>(\n        usernameOrEmail: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                identity: usernameOrEmail,\n                password: password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authWithPassword(usernameOrEmail, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(usernameOrEmail, pass, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-with-password\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Authenticate a single auth collection record with OAuth2 code.\n     *\n     * If you don't have an OAuth2 code you may also want to check `authWithOAuth2` method.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createdData, options?).\n     */\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        body?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>>;\n\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                provider: provider,\n                code: code,\n                codeVerifier: codeVerifier,\n                redirectUrl: redirectUrl,\n                createData: createData,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-with-oauth2\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * @deprecated This form of authWithOAuth2 is deprecated.\n     *\n     * Please use `authWithOAuth2Code()` OR its simplified realtime version\n     * as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\n     */\n    async authWithOAuth2<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        bodyParams?: { [key: string]: any },\n        queryParams?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * Authenticate a single auth collection record with OAuth2\n     * **without custom redirects, deeplinks or even page reload**.\n     *\n     * This method initializes a one-off realtime subscription and will\n     * open a popup window with the OAuth2 vendor page to authenticate.\n     * Once the external OAuth2 sign-in/sign-up flow is completed, the popup\n     * window will be automatically closed and the OAuth2 data sent back\n     * to the user through the previously established realtime connection.\n     *\n     * You can specify an optional `urlCallback` prop to customize\n     * the default url `window.open` behavior.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * Example:\n     *\n     * ```js\n     * const authData = await pb.collection(\"users\").authWithOAuth2({\n     *     provider: \"google\",\n     * })\n     * ```\n     *\n     * _Site-note_: when creating the OAuth2 app in the provider dashboard\n     * you have to configure `https://yourdomain.com/api/oauth2-redirect`\n     * as redirect URL.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOAuth2<T = M>(\n        options: OAuth2AuthConfig,\n    ): Promise<RecordAuthResponse<T>>;\n\n    async authWithOAuth2<T = M>(...args: any): Promise<RecordAuthResponse<T>> {\n        // fallback to legacy format\n        if (args.length > 1 || typeof args?.[0] === \"string\") {\n            console.warn(\n                \"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\",\n            );\n            return this.authWithOAuth2Code<T>(\n                args?.[0] || \"\",\n                args?.[1] || \"\",\n                args?.[2] || \"\",\n                args?.[3] || \"\",\n                args?.[4] || {},\n                args?.[5] || {},\n                args?.[6] || {},\n            );\n        }\n\n        const config = args?.[0] || {};\n\n        const authMethods = await this.listAuthMethods();\n\n        const provider = authMethods.authProviders.find(\n            (p) => p.name === config.provider,\n        );\n        if (!provider) {\n            throw new ClientResponseError(\n                new Error(`Missing or invalid provider \"${config.provider}\".`),\n            );\n        }\n\n        const redirectUrl = this.client.buildUrl(\"/api/oauth2-redirect\");\n\n        // initialize a one-off realtime service\n        const realtime = new RealtimeService(this.client);\n\n        // open a new popup window in case config.urlCallback is not set\n        //\n        // note: it is opened before the async call due to Safari restrictions\n        // (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061)\n        let eagerDefaultPopup: Window | null = null;\n        if (!config.urlCallback) {\n            eagerDefaultPopup = openBrowserPopup(undefined);\n        }\n\n        function cleanup() {\n            eagerDefaultPopup?.close();\n            realtime.unsubscribe();\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                await realtime.subscribe(\"@oauth2\", async (e) => {\n                    const oldState = realtime.clientId;\n\n                    try {\n                        if (!e.state || oldState !== e.state) {\n                            throw new Error(\"State parameters don't match.\");\n                        }\n\n                        if (e.error || !e.code) {\n                            throw new Error(\n                                \"OAuth2 redirect error or missing code: \" + e.error,\n                            );\n                        }\n\n                        // clear the non SendOptions props\n                        const options = Object.assign({}, config);\n                        delete options.provider;\n                        delete options.scopes;\n                        delete options.createData;\n                        delete options.urlCallback;\n\n                        const authData = await this.authWithOAuth2Code<T>(\n                            provider.name,\n                            e.code,\n                            provider.codeVerifier,\n                            redirectUrl,\n                            config.createData,\n                            options,\n                        );\n\n                        resolve(authData);\n                    } catch (err) {\n                        reject(new ClientResponseError(err));\n                    }\n\n                    cleanup();\n                });\n\n                const replacements: { [key: string]: any } = {\n                    state: realtime.clientId,\n                };\n                if (config.scopes?.length) {\n                    replacements[\"scope\"] = config.scopes.join(\" \");\n                }\n\n                const url = this._replaceQueryParams(\n                    provider.authUrl + redirectUrl,\n                    replacements,\n                );\n\n                let urlCallback =\n                    config.urlCallback ||\n                    function (url: string) {\n                        if (eagerDefaultPopup) {\n                            eagerDefaultPopup.location.href = url;\n                        } else {\n                            // it could have been blocked due to its empty initial url,\n                            // try again...\n                            eagerDefaultPopup = openBrowserPopup(url);\n                        }\n                    };\n\n                await urlCallback(url);\n            } catch (err) {\n                cleanup();\n                reject(new ClientResponseError(err));\n            }\n        });\n    }\n\n    /**\n     * Refreshes the current authenticated record instance and\n     * returns a new token and record data.\n     *\n     * On success this method also automatically updates the client's AuthStore.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authRefresh<T = M>(options?: RecordOptions): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    async authRefresh<T = M>(body?: any, query?: any): Promise<RecordAuthResponse<T>>;\n\n    async authRefresh<T = M>(\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-refresh\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Sends auth record password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    async requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestPasswordReset(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(passwordResetToken, password, passwordConfirm, options?).\n     */\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: passwordResetToken,\n                password: password,\n                passwordConfirm: passwordConfirm,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends auth record verification email request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestVerification(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestVerification(email, options?).\n     */\n    async requestVerification(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestVerification(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-verification\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record email verification request.\n     *\n     * If the current `client.authStore.model` matches with the auth record from the token,\n     * then on success the `client.authStore.model.verified` will be updated to `true`.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmVerification(\n        verificationToken: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmVerification(verificationToken, options?).\n     */\n    async confirmVerification(\n        verificationToken: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmVerification(\n        verificationToken: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: verificationToken,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-verification\", options)\n            .then(() => {\n                // on success manually update the current auth record verified state\n                const payload = getTokenPayload(verificationToken);\n                const model = this.client.authStore.model;\n                if (\n                    model &&\n                    !model.verified &&\n                    model.id === payload.id &&\n                    model.collectionId === payload.collectionId\n                ) {\n                    model.verified = true;\n                    this.client.authStore.save(this.client.authStore.token, model);\n                }\n\n                return true;\n            });\n    }\n\n    /**\n     * Sends an email change request to the authenticated record model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestEmailChange(newEmail: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestEmailChange(newEmail, options?).\n     */\n    async requestEmailChange(newEmail: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestEmailChange(\n        newEmail: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                newEmail: newEmail,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-email-change\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record's new email address.\n     *\n     * If the current `client.authStore.model` matches with the auth record from the token,\n     * then on success the `client.authStore` will be cleared.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmEmailChange(emailChangeToken, password, options?).\n     */\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: emailChangeToken,\n                password: password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-email-change\", options)\n            .then(() => {\n                const payload = getTokenPayload(emailChangeToken);\n                const model = this.client.authStore.model;\n                if (\n                    model &&\n                    model.id === payload.id &&\n                    model.collectionId === payload.collectionId\n                ) {\n                    this.client.authStore.clear();\n                }\n\n                return true;\n            });\n    }\n\n    /**\n     * Lists all linked external auth providers for the specified auth record.\n     *\n     * @throws {ClientResponseError}\n     */\n    async listExternalAuths(\n        recordId: string,\n        options?: CommonOptions,\n    ): Promise<Array<ExternalAuthModel>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\n            this.baseCrudPath + \"/\" + encodeURIComponent(recordId) + \"/external-auths\",\n            options,\n        );\n    }\n\n    /**\n     * Unlink a single external auth provider from the specified auth record.\n     *\n     * @throws {ClientResponseError}\n     */\n    async unlinkExternalAuth(\n        recordId: string,\n        provider: string,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(\n                this.baseCrudPath +\n                    \"/\" +\n                    encodeURIComponent(recordId) +\n                    \"/external-auths/\" +\n                    encodeURIComponent(provider),\n                options,\n            )\n            .then(() => true);\n    }\n\n    // ---------------------------------------------------------------\n\n    // very rudimentary url query params replacement because at the moment\n    // URL (and URLSearchParams) doesn't seem to be fully supported in React Native\n    //\n    // note: for details behind some of the decode/encode parsing check https://unixpapa.com/js/querystring.html\n    private _replaceQueryParams(\n        url: string,\n        replacements: { [key: string]: any } = {},\n    ): string {\n        let urlPath = url;\n        let query = \"\";\n\n        const queryIndex = url.indexOf(\"?\");\n        if (queryIndex >= 0) {\n            urlPath = url.substring(0, url.indexOf(\"?\"));\n            query = url.substring(url.indexOf(\"?\") + 1);\n        }\n\n        const parsedParams: { [key: string]: string } = {};\n\n        // parse the query parameters\n        const rawParams = query.split(\"&\");\n        for (const param of rawParams) {\n            if (param == \"\") {\n                continue;\n            }\n\n            const pair = param.split(\"=\");\n            parsedParams[decodeURIComponent(pair[0].replace(/\\+/g, \" \"))] =\n                decodeURIComponent((pair[1] || \"\").replace(/\\+/g, \" \"));\n        }\n\n        // apply the replacements\n        for (let key in replacements) {\n            if (!replacements.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (replacements[key] == null) {\n                delete parsedParams[key];\n            } else {\n                parsedParams[key] = replacements[key];\n            }\n        }\n\n        // construct back the full query string\n        query = \"\";\n        for (let key in parsedParams) {\n            if (!parsedParams.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (query != \"\") {\n                query += \"&\";\n            }\n\n            query +=\n                encodeURIComponent(key.replace(/%20/g, \"+\")) +\n                \"=\" +\n                encodeURIComponent(parsedParams[key].replace(/%20/g, \"+\"));\n        }\n\n        return query != \"\" ? urlPath + \"?\" + query : urlPath;\n    }\n}\n\nfunction openBrowserPopup(url?: string): Window | null {\n    if (typeof window === \"undefined\" || !window?.open) {\n        throw new ClientResponseError(\n            new Error(\n                `Not in a browser context - please pass a custom urlCallback function.`,\n            ),\n        );\n    }\n\n    let width = 1024;\n    let height = 768;\n\n    let windowWidth = window.innerWidth;\n    let windowHeight = window.innerHeight;\n\n    // normalize window size\n    width = width > windowWidth ? windowWidth : width;\n    height = height > windowHeight ? windowHeight : height;\n\n    let left = windowWidth / 2 - width / 2;\n    let top = windowHeight / 2 - height / 2;\n\n    // note: we don't use the noopener and noreferrer attributes since\n    // for some reason browser blocks such windows then url is undefined/blank\n    return window.open(\n        url,\n        \"popup_window\",\n        \"width=\" +\n            width +\n            \",height=\" +\n            height +\n            \",top=\" +\n            top +\n            \",left=\" +\n            left +\n            \",resizable,menubar=no\",\n    );\n}\n","import { CrudService } from \"@/services/utils/CrudService\";\nimport { CollectionModel } from \"@/services/utils/dtos\";\nimport { CommonOptions } from \"@/services/utils/options\";\n\nexport class CollectionService extends CrudService<CollectionModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return \"/api/collections\";\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and schema fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     *\n     * @throws {ClientResponseError}\n     */\n    async import(\n        collections: Array<CollectionModel>,\n        deleteMissing: boolean = false,\n        options?: CommonOptions,\n    ): Promise<true> {\n        options = Object.assign(\n            {\n                method: \"PUT\",\n                body: {\n                    collections: collections,\n                    deleteMissing: deleteMissing,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCrudPath + \"/import\", options).then(() => true);\n    }\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseService } from \"@/services/utils/BaseService\";\nimport { ListResult, LogModel } from \"@/services/utils/dtos\";\nimport { CommonOptions, ListOptions, LogStatsOptions } from \"@/services/utils/options\";\n\nexport interface HourlyStats {\n    total: number;\n    date: string;\n}\n\nexport class LogService extends BaseService {\n    /**\n     * Returns paginated logs list.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getList(\n        page = 1,\n        perPage = 30,\n        options?: ListOptions,\n    ): Promise<ListResult<LogModel>> {\n        options = Object.assign({ method: \"GET\" }, options);\n\n        options.query = Object.assign(\n            {\n                page: page,\n                perPage: perPage,\n            },\n            options.query,\n        );\n\n        return this.client.send(\"/api/logs\", options);\n    }\n\n    /**\n     * Returns a single log by its id.\n     *\n     * If `id` is empty it will throw a 404 error.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getOne(id: string, options?: CommonOptions): Promise<LogModel> {\n        if (!id) {\n            throw new ClientResponseError({\n                url: this.client.buildUrl(\"/api/logs/\"),\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"Missing required log id.\",\n                    data: {},\n                },\n            });\n        }\n\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/logs/\" + encodeURIComponent(id), options);\n    }\n\n    /**\n     * Returns logs statistics.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getStats(options?: LogStatsOptions): Promise<Array<HourlyStats>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/logs/stats\", options);\n    }\n}\n","import { BaseService } from \"@/services/utils/BaseService\";\nimport { CommonOptions } from \"@/services/utils/options\";\n\nexport interface HealthCheckResponse {\n    code: number;\n    message: string;\n    data: { [key: string]: any };\n}\n\nexport class HealthService extends BaseService {\n    /**\n     * Checks the health status of the api.\n     *\n     * @throws {ClientResponseError}\n     */\n    async check(options?: CommonOptions): Promise<HealthCheckResponse> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/health\", options);\n    }\n}\n","import { BaseService } from \"@/services/utils/BaseService\";\nimport { CommonOptions, FileOptions } from \"@/services/utils/options\";\n\nexport class FileService extends BaseService {\n    /**\n     * Builds and returns an absolute record file url for the provided filename.\n     */\n    getUrl(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        if (\n            !filename ||\n            !record?.id ||\n            !(record?.collectionId || record?.collectionName)\n        ) {\n            return \"\";\n        }\n\n        const parts = [];\n        parts.push(\"api\");\n        parts.push(\"files\");\n        parts.push(encodeURIComponent(record.collectionId || record.collectionName));\n        parts.push(encodeURIComponent(record.id));\n        parts.push(encodeURIComponent(filename));\n\n        let result = this.client.buildUrl(parts.join(\"/\"));\n\n        if (Object.keys(queryParams).length) {\n            // normalize the download query param for consistency with the Dart sdk\n            if (queryParams.download === false) {\n                delete queryParams.download;\n            }\n\n            const params = new URLSearchParams(queryParams);\n\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n        }\n\n        return result;\n    }\n\n    /**\n     * Requests a new private file access token for the current auth model (admin or record).\n     *\n     * @throws {ClientResponseError}\n     */\n    async getToken(options?: CommonOptions): Promise<string> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(\"/api/files/token\", options)\n            .then((data) => data?.token || \"\");\n    }\n}\n","import { BaseService } from \"@/services/utils/BaseService\";\nimport { CommonOptions } from \"@/services/utils/options\";\n\nexport interface BackupFileInfo {\n    key: string;\n    size: number;\n    modified: string;\n}\n\nexport class BackupService extends BaseService {\n    /**\n     * Returns list with all available backup files.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList(options?: CommonOptions): Promise<Array<BackupFileInfo>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups\", options);\n    }\n\n    /**\n     * Initializes a new backup.\n     *\n     * @throws {ClientResponseError}\n     */\n    async create(basename: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    name: basename,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups\", options).then(() => true);\n    }\n\n    /**\n     * Uploads an existing backup file.\n     *\n     * Example:\n     *\n     * ```js\n     * await pb.backups.upload({\n     *     file: new Blob([...]),\n     * });\n     * ```\n     *\n     * @throws {ClientResponseError}\n     */\n    async upload(\n        bodyParams: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups/upload\", options).then(() => true);\n    }\n\n    /**\n     * Deletes a single backup file.\n     *\n     * @throws {ClientResponseError}\n     */\n    async delete(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/backups/${encodeURIComponent(key)}`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Initializes an app data restore from an existing backup.\n     *\n     * @throws {ClientResponseError}\n     */\n    async restore(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/backups/${encodeURIComponent(key)}/restore`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Builds a download url for a single existing backup using an\n     * admin file token and the backup file key.\n     *\n     * The file token can be generated via `pb.files.getToken()`.\n     */\n    getDownloadUrl(token: string, key: string): string {\n        return this.client.buildUrl(\n            `/api/backups/${encodeURIComponent(key)}?token=${encodeURIComponent(token)}`,\n        );\n    }\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseAuthStore } from \"@/stores/BaseAuthStore\";\nimport { LocalAuthStore } from \"@/stores/LocalAuthStore\";\nimport { SettingsService } from \"@/services/SettingsService\";\nimport { AdminService } from \"@/services/AdminService\";\nimport { RecordService } from \"@/services/RecordService\";\nimport { CollectionService } from \"@/services/CollectionService\";\nimport { LogService } from \"@/services/LogService\";\nimport { RealtimeService } from \"@/services/RealtimeService\";\nimport { HealthService } from \"@/services/HealthService\";\nimport { FileService } from \"@/services/FileService\";\nimport { BackupService } from \"@/services/BackupService\";\nimport { RecordModel } from \"@/services/utils/dtos\";\nimport {\n    SendOptions,\n    FileOptions,\n    normalizeUnknownQueryParams,\n} from \"@/services/utils/options\";\n\nexport interface BeforeSendResult {\n    [key: string]: any; // for backward compatibility\n    url?: string;\n    options?: { [key: string]: any };\n}\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseUrl: string;\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect and modify the url and request options.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * You can return a non-empty result object `{ url, options }` to replace the url and request options entirely.\n     *\n     * Example:\n     * ```js\n     * client.beforeSend = function (url, options) {\n     *     options.headers = Object.assign({}, options.headers, {\n     *         'X-Custom-Header': 'example',\n     *     });\n     *\n     *     return { url, options }\n     * };\n     * ```\n     */\n    beforeSend?: (\n        url: string,\n        options: SendOptions,\n    ) => BeforeSendResult | Promise<BeforeSendResult>;\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * client.afterSend = function (response, data) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             response: { ... },\n     *         });\n     *     }\n     *\n     *     return data;\n     * };\n     * ```\n     */\n    afterSend?: (response: Response, data: any) => any;\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replaceable instance of the local auth store service.\n     */\n    authStore: BaseAuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: SettingsService;\n\n    /**\n     * An instance of the service that handles the **Admin APIs**.\n     */\n    readonly admins: AdminService;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: CollectionService;\n\n    /**\n     * An instance of the service that handles the **File APIs**.\n     */\n    readonly files: FileService;\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: LogService;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: RealtimeService;\n\n    /**\n     * An instance of the service that handles the **Health APIs**.\n     */\n    readonly health: HealthService;\n\n    /**\n     * An instance of the service that handles the **Backup APIs**.\n     */\n    readonly backups: BackupService;\n\n    private cancelControllers: { [key: string]: AbortController } = {};\n    private recordServices: { [key: string]: RecordService } = {};\n    private enableAutoCancellation: boolean = true;\n\n    constructor(baseUrl = \"/\", authStore?: BaseAuthStore | null, lang = \"en-US\") {\n        this.baseUrl = baseUrl;\n        this.lang = lang;\n        this.authStore = authStore || new LocalAuthStore();\n\n        // services\n        this.admins = new AdminService(this);\n        this.collections = new CollectionService(this);\n        this.files = new FileService(this);\n        this.logs = new LogService(this);\n        this.settings = new SettingsService(this);\n        this.realtime = new RealtimeService(this);\n        this.health = new HealthService(this);\n        this.backups = new BackupService(this);\n    }\n\n    /**\n     * Returns the RecordService associated to the specified collection.\n     *\n     * @param  {string} idOrName\n     * @return {RecordService}\n     */\n    collection<M = RecordModel>(idOrName: string): RecordService<M> {\n        if (!this.recordServices[idOrName]) {\n            this.recordServices[idOrName] = new RecordService(this, idOrName);\n        }\n\n        return this.recordServices[idOrName];\n    }\n\n    /**\n     * Globally enable or disable auto cancellation for pending duplicated requests.\n     */\n    autoCancellation(enable: boolean): Client {\n        this.enableAutoCancellation = !!enable;\n\n        return this;\n    }\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(requestKey: string): Client {\n        if (this.cancelControllers[requestKey]) {\n            this.cancelControllers[requestKey].abort();\n            delete this.cancelControllers[requestKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Constructs a filter expression with placeholders populated from a parameters object.\n     *\n     * Placeholder parameters are defined with the `{:paramName}` notation.\n     *\n     * The following parameter values are supported:\n     *\n     * - `string` (_single quotes are autoescaped_)\n     * - `number`\n     * - `boolean`\n     * - `Date` object (_stringified into the PocketBase datetime format_)\n     * - `null`\n     * - everything else is converted to a string using `JSON.stringify()`\n     *\n     * Example:\n     *\n     * ```js\n     * pb.collection(\"example\").getFirstListItem(pb.filter(\n     *    'title ~ {:title} && created >= {:created}',\n     *    { title: \"example\", created: new Date()}\n     * ))\n     * ```\n     */\n    filter(raw: string, params?: { [key: string]: any }): string {\n        if (!params) {\n            return raw;\n        }\n\n        for (let key in params) {\n            let val = params[key];\n            switch (typeof val) {\n                case \"boolean\":\n                case \"number\":\n                    val = \"\" + val;\n                    break;\n                case \"string\":\n                    val = \"'\" + val.replace(/'/g, \"\\\\'\") + \"'\";\n                    break;\n                default:\n                    if (val === null) {\n                        val = \"null\";\n                    } else if (val instanceof Date) {\n                        val = \"'\" + val.toISOString().replace(\"T\", \" \") + \"'\";\n                    } else {\n                        val = \"'\" + JSON.stringify(val).replace(/'/g, \"\\\\'\") + \"'\";\n                    }\n            }\n            raw = raw.replaceAll(\"{:\" + key + \"}\", val);\n        }\n\n        return raw;\n    }\n\n    /**\n     * Legacy alias of `pb.files.getUrl()`.\n     */\n    getFileUrl(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        return this.files.getUrl(record, filename, queryParams);\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildUrl(path: string): string {\n        let url = this.baseUrl;\n\n        // construct an absolute base url if in a browser environment\n        if (\n            typeof window !== \"undefined\" &&\n            !!window.location &&\n            !url.startsWith(\"https://\") &&\n            !url.startsWith(\"http://\")\n        ) {\n            url = window.location.origin?.endsWith(\"/\")\n                ? window.location.origin.substring(0, window.location.origin.length - 1)\n                : window.location.origin || \"\";\n\n            if (!this.baseUrl.startsWith(\"/\")) {\n                url += window.location.pathname || \"/\";\n                url += url.endsWith(\"/\") ? \"\" : \"/\";\n            }\n\n            url += this.baseUrl;\n        }\n\n        // concatenate the path\n        if (path) {\n            url += url.endsWith(\"/\") ? \"\" : \"/\"; // append trailing slash if missing\n            url += path.startsWith(\"/\") ? path.substring(1) : path;\n        }\n\n        return url;\n    }\n\n    /**\n     * Sends an api http request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async send<T = any>(path: string, options: SendOptions): Promise<T> {\n        options = this.initSendOptions(path, options);\n\n        // build url + path\n        let url = this.buildUrl(path);\n\n        if (this.beforeSend) {\n            const result = Object.assign({}, await this.beforeSend(url, options));\n            if (\n                typeof result.url !== \"undefined\" ||\n                typeof result.options !== \"undefined\"\n            ) {\n                url = result.url || url;\n                options = result.options || options;\n            } else if (Object.keys(result).length) {\n                // legacy behavior\n                options = result as SendOptions;\n                console?.warn &&\n                    console.warn(\n                        \"Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.\",\n                    );\n            }\n        }\n\n        // serialize the query parameters\n        if (typeof options.query !== \"undefined\") {\n            const query = this.serializeQueryParams(options.query);\n            if (query) {\n                url += (url.includes(\"?\") ? \"&\" : \"?\") + query;\n            }\n            delete options.query;\n        }\n\n        // ensures that the json body is serialized\n        if (\n            this.getHeader(options.headers, \"Content-Type\") == \"application/json\" &&\n            options.body &&\n            typeof options.body !== \"string\"\n        ) {\n            options.body = JSON.stringify(options.body);\n        }\n\n        const fetchFunc = options.fetch || fetch;\n\n        // send the request\n        return fetchFunc(url, options)\n            .then(async (response) => {\n                let data: any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = await this.afterSend(response, data);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url: response.url,\n                        status: response.status,\n                        data: data,\n                    });\n                }\n\n                return data as T;\n            })\n            .catch((err) => {\n                // wrap to normalize all errors\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Shallow copy the provided object and takes care to initialize\n     * any options required to preserve the backward compatability.\n     *\n     * @param  {SendOptions} options\n     * @return {SendOptions}\n     */\n    private initSendOptions(path: string, options: SendOptions): SendOptions {\n        options = Object.assign({ method: \"GET\" } as SendOptions, options);\n\n        // auto convert the body to FormData, if needed\n        options.body = this.convertToFormDataIfNeeded(options.body);\n\n        // move unknown send options as query parameters\n        normalizeUnknownQueryParams(options);\n\n        // requestKey normalizations for backward-compatibility\n        // ---\n        options.query = Object.assign({}, options.params, options.query);\n        if (typeof options.requestKey === \"undefined\") {\n            if (options.$autoCancel === false || options.query.$autoCancel === false) {\n                options.requestKey = null;\n            } else if (options.$cancelKey || options.query.$cancelKey) {\n                options.requestKey = options.$cancelKey || options.query.$cancelKey;\n            }\n        }\n        // remove the deprecated special cancellation params from the other query params\n        delete options.$autoCancel;\n        delete options.query.$autoCancel;\n        delete options.$cancelKey;\n        delete options.query.$cancelKey;\n        // ---\n\n        // add the json header, if not explicitly set\n        // (for FormData body the Content-Type header should be skipped since the boundary is autogenerated)\n        if (\n            this.getHeader(options.headers, \"Content-Type\") === null &&\n            !this.isFormData(options.body)\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                \"Content-Type\": \"application/json\",\n            });\n        }\n\n        // add Accept-Language header, if not explicitly set\n        if (this.getHeader(options.headers, \"Accept-Language\") === null) {\n            options.headers = Object.assign({}, options.headers, {\n                \"Accept-Language\": this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has valid token\n            this.authStore.token &&\n            // auth header is not explicitly set\n            this.getHeader(options.headers, \"Authorization\") === null\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                Authorization: this.authStore.token,\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (this.enableAutoCancellation && options.requestKey !== null) {\n            const requestKey = options.requestKey || (options.method || \"GET\") + path;\n\n            delete options.requestKey;\n\n            // cancel previous pending requests\n            this.cancelRequest(requestKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[requestKey] = controller;\n            options.signal = controller.signal;\n        }\n\n        return options;\n    }\n\n    /**\n     * Converts analyzes the provided body and converts it to FormData\n     * in case a plain object with File/Blob values is used.\n     */\n    private convertToFormDataIfNeeded(body: any): any {\n        if (\n            typeof FormData === \"undefined\" ||\n            typeof body === \"undefined\" ||\n            typeof body !== \"object\" ||\n            body === null ||\n            this.isFormData(body) ||\n            !this.hasBlobField(body)\n        ) {\n            return body;\n        }\n\n        const form = new FormData();\n\n        for (const key in body) {\n            const val = body[key];\n\n            if (typeof val === \"object\" && !this.hasBlobField({ data: val })) {\n                // send json-like values as jsonPayload to avoid the implicit string value normalization\n                let payload: { [key: string]: any } = {};\n                payload[key] = val;\n                form.append(\"@jsonPayload\", JSON.stringify(payload));\n            } else {\n                // in case of mixed string and file/blob\n                const normalizedVal = Array.isArray(val) ? val : [val];\n                for (let v of normalizedVal) {\n                    form.append(key, v);\n                }\n            }\n        }\n\n        return form;\n    }\n\n    /**\n     * Checks if the submitted body object has at least one Blob/File field.\n     */\n    private hasBlobField(body: { [key: string]: any }): boolean {\n        for (const key in body) {\n            const values = Array.isArray(body[key]) ? body[key] : [body[key]];\n            for (const v of values) {\n                if (\n                    (typeof Blob !== \"undefined\" && v instanceof Blob) ||\n                    (typeof File !== \"undefined\" && v instanceof File)\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Extracts the header with the provided name in case-insensitive manner.\n     * Returns `null` if no header matching the name is found.\n     */\n    private getHeader(\n        headers: { [key: string]: string } | undefined,\n        name: string,\n    ): string | null {\n        headers = headers || {};\n        name = name.toLowerCase();\n\n        for (let key in headers) {\n            if (key.toLowerCase() == name) {\n                return headers[key];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Loosely checks if the specified body is a FormData instance.\n     */\n    private isFormData(body: any): boolean {\n        return (\n            body &&\n            // we are checking the constructor name because FormData\n            // is not available natively in some environments and the\n            // polyfill(s) may not be globally accessible\n            (body.constructor.name === \"FormData\" ||\n                // fallback to global FormData instance check\n                // note: this is needed because the constructor.name could be different in case of\n                //       custom global FormData implementation, eg. React Native on Android/iOS\n                (typeof FormData !== \"undefined\" && body instanceof FormData))\n        );\n    }\n\n    /**\n     * Serializes the provided query parameters into a query string.\n     */\n    private serializeQueryParams(params: { [key: string]: any }): string {\n        const result: Array<string> = [];\n        for (const key in params) {\n            if (params[key] === null) {\n                // skip null query params\n                continue;\n            }\n\n            const value = params[key];\n            const encodedKey = encodeURIComponent(key);\n\n            if (Array.isArray(value)) {\n                // repeat array params\n                for (const v of value) {\n                    result.push(encodedKey + \"=\" + encodeURIComponent(v));\n                }\n            } else if (value instanceof Date) {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value.toISOString()));\n            } else if (typeof value !== null && typeof value === \"object\") {\n                result.push(encodedKey + \"=\" + encodeURIComponent(JSON.stringify(value)));\n            } else {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value));\n            }\n        }\n\n        return result.join(\"&\");\n    }\n}\n","import { BaseAuthStore, AuthModel } from \"@/stores/BaseAuthStore\";\n\nexport type AsyncSaveFunc = (serializedPayload: string) => Promise<void>;\n\nexport type AsyncClearFunc = () => Promise<void>;\n\ntype queueFunc = () => Promise<void>;\n\n/**\n * AsyncAuthStore is a helper auth store implementation\n * that could be used with any external async persistent layer\n * (key-value db, local file, etc.).\n *\n * Here is an example with the React Native AsyncStorage package:\n *\n * ```\n * import AsyncStorage from \"@react-native-async-storage/async-storage\";\n * import PocketBase, { AsyncAuthStore } from \"pocketbase\";\n *\n * const store = new AsyncAuthStore({\n *     save:    async (serialized) => AsyncStorage.setItem(\"pb_auth\", serialized),\n *     initial: AsyncStorage.getItem(\"pb_auth\"),\n * });\n *\n * const pb = new PocketBase(\"https://example.com\", store)\n * ```\n */\nexport class AsyncAuthStore extends BaseAuthStore {\n    private saveFunc: AsyncSaveFunc;\n    private clearFunc?: AsyncClearFunc;\n    private queue: Array<queueFunc> = [];\n\n    constructor(config: {\n        // The async function that is called every time\n        // when the auth store state needs to be persisted.\n        save: AsyncSaveFunc;\n\n        /// An *optional* async function that is called every time\n        /// when the auth store needs to be cleared.\n        ///\n        /// If not explicitly set, `saveFunc` with empty data will be used.\n        clear?: AsyncClearFunc;\n\n        // An *optional* initial data to load into the store.\n        initial?: string | Promise<any>;\n    }) {\n        super();\n\n        this.saveFunc = config.save;\n        this.clearFunc = config.clear;\n\n        this._enqueue(() => this._loadInitial(config.initial));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model?: AuthModel): void {\n        super.save(token, model);\n\n        let value = \"\";\n        try {\n            value = JSON.stringify({ token, model });\n        } catch (err) {\n            console.warn(\"AsyncAuthStore: failed to stringify the new state\");\n        }\n\n        this._enqueue(() => this.saveFunc(value));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear(): void {\n        super.clear();\n\n        if (this.clearFunc) {\n            this._enqueue(() => this.clearFunc!());\n        } else {\n            this._enqueue(() => this.saveFunc(\"\"));\n        }\n    }\n\n    /**\n     * Initializes the auth store state.\n     */\n    private async _loadInitial(payload?: string | Promise<any>) {\n        try {\n            payload = await payload;\n\n            if (payload) {\n                let parsed;\n                if (typeof payload === \"string\") {\n                    parsed = JSON.parse(payload) || {};\n                } else if (typeof payload === \"object\") {\n                    parsed = payload;\n                }\n\n                this.save(parsed.token || \"\", parsed.model || null);\n            }\n        } catch (_) {}\n    }\n\n    /**\n     * Appends an async function to the queue.\n     */\n    private _enqueue(asyncCallback: () => Promise<void>) {\n        this.queue.push(asyncCallback);\n\n        if (this.queue.length == 1) {\n            this._dequeue();\n        }\n    }\n\n    /**\n     * Starts the queue processing.\n     */\n    private _dequeue() {\n        if (!this.queue.length) {\n            return;\n        }\n\n        this.queue[0]().finally(() => {\n            this.queue.shift();\n\n            if (!this.queue.length) {\n                return;\n            }\n\n            this._dequeue();\n        });\n    }\n}\n","const view = (() => {\r\n  const buildPosts = (posts, currentUser) => {\r\n    // build and rebuild posts\r\n    const postsContainer = document.getElementById('posts-container');\r\n\r\n    while (postsContainer.hasChildNodes()) {\r\n      postsContainer.removeChild(postsContainer.firstChild);\r\n    }\r\n\r\n    buildHeading(currentUser);\r\n\r\n    const button = document.getElementById('new-post-button');\r\n    if (!currentUser) {\r\n      button.textContent = 'Log In';\r\n    } else {\r\n      button.textContent = 'New Announcement';\r\n    }\r\n\r\n    for (let post of posts) {\r\n      const title = document.createElement('h2');\r\n      title.classList.add('post-title');\r\n      title.textContent = post.title;\r\n\r\n      const author = document.createElement('div');\r\n      author.classList.add('post-author');\r\n      author.textContent = post.author;\r\n\r\n      const date = document.createElement('div');\r\n      date.classList.add('post-date');\r\n      date.textContent = new Date(post.created).toDateString();\r\n\r\n      const byline = document.createElement('div');\r\n      byline.classList.add('post-byline');\r\n      byline.appendChild(author);\r\n      byline.appendChild(date);\r\n\r\n      if (\r\n        currentUser &&\r\n        (currentUser.id === post.author_id || currentUser.isAdmin)\r\n      ) {\r\n        const del = document.createElement('button');\r\n        del.classList.add('post-delete');\r\n        del.innerHTML = '<span>×</span>';\r\n        del.onclick = () => {\r\n          const deletionModal = document.getElementById('deletion-modal');\r\n          // set post_id data attribute to post id onclick. Used for post deletion\r\n          deletionModal.dataset.post_id = post.id;\r\n          openModal(deletionModal);\r\n        };\r\n        byline.appendChild(del);\r\n      }\r\n\r\n      const divider = document.createElement('div');\r\n      divider.classList.add('divider');\r\n\r\n      const body = document.createElement('p');\r\n      body.classList.add('post-body');\r\n      body.textContent = post.body;\r\n\r\n      const announcement = document.createElement('div');\r\n      announcement.classList.add('post');\r\n      announcement.dataset.author_id = post.author_id;\r\n      announcement.dataset.post_id = post.id;\r\n      announcement.appendChild(title);\r\n      if (currentUser) announcement.appendChild(byline);\r\n      announcement.appendChild(divider);\r\n      announcement.appendChild(body);\r\n\r\n      postsContainer.appendChild(announcement);\r\n    }\r\n  };\r\n\r\n  const buildHeading = (currentUser) => {\r\n    const authHeading = document.getElementById('auth-heading');\r\n    const username = document.getElementById('current-username');\r\n    if (!currentUser) {\r\n      authHeading.style.display = 'none';\r\n      username.textContent = 'NO USER';\r\n      return;\r\n    }\r\n\r\n    authHeading.style.display = 'flex';\r\n    username.textContent = currentUser.name;\r\n    return;\r\n  };\r\n\r\n  const openModal = (modal) => {\r\n    modal.showModal();\r\n  };\r\n\r\n  const closeModal = (modal) => {\r\n    modal.close();\r\n  };\r\n\r\n  const loginError = (error) => {\r\n    const errorMsg = document.getElementById('error-msg');\r\n    errorMsg.textContent = error;\r\n  };\r\n\r\n  return { buildPosts, openModal, closeModal, loginError };\r\n})();\r\n\r\nexport default view;\r\n",null,"import isReactComponent from \"./validators/react/isReactComponent.ts\";\nimport isCompatTag from \"./validators/react/isCompatTag.ts\";\nimport buildChildren from \"./builders/react/buildChildren.ts\";\n\n// asserts\nexport { default as assertNode } from \"./asserts/assertNode.ts\";\nexport * from \"./asserts/generated/index.ts\";\n\n// builders\nexport { default as createTypeAnnotationBasedOnTypeof } from \"./builders/flow/createTypeAnnotationBasedOnTypeof.ts\";\n/** @deprecated use createFlowUnionType instead */\nexport { default as createUnionTypeAnnotation } from \"./builders/flow/createFlowUnionType.ts\";\nexport { default as createFlowUnionType } from \"./builders/flow/createFlowUnionType.ts\";\nexport { default as createTSUnionType } from \"./builders/typescript/createTSUnionType.ts\";\nexport * from \"./builders/generated/index.ts\";\nexport * from \"./builders/generated/uppercase.js\";\nexport * from \"./builders/productions.ts\";\n\n// clone\nexport { default as cloneNode } from \"./clone/cloneNode.ts\";\nexport { default as clone } from \"./clone/clone.ts\";\nexport { default as cloneDeep } from \"./clone/cloneDeep.ts\";\nexport { default as cloneDeepWithoutLoc } from \"./clone/cloneDeepWithoutLoc.ts\";\nexport { default as cloneWithoutLoc } from \"./clone/cloneWithoutLoc.ts\";\n\n// comments\nexport { default as addComment } from \"./comments/addComment.ts\";\nexport { default as addComments } from \"./comments/addComments.ts\";\nexport { default as inheritInnerComments } from \"./comments/inheritInnerComments.ts\";\nexport { default as inheritLeadingComments } from \"./comments/inheritLeadingComments.ts\";\nexport { default as inheritsComments } from \"./comments/inheritsComments.ts\";\nexport { default as inheritTrailingComments } from \"./comments/inheritTrailingComments.ts\";\nexport { default as removeComments } from \"./comments/removeComments.ts\";\n\n// constants\nexport * from \"./constants/generated/index.ts\";\nexport * from \"./constants/index.ts\";\n\n// converters\nexport { default as ensureBlock } from \"./converters/ensureBlock.ts\";\nexport { default as toBindingIdentifierName } from \"./converters/toBindingIdentifierName.ts\";\nexport { default as toBlock } from \"./converters/toBlock.ts\";\nexport { default as toComputedKey } from \"./converters/toComputedKey.ts\";\nexport { default as toExpression } from \"./converters/toExpression.ts\";\nexport { default as toIdentifier } from \"./converters/toIdentifier.ts\";\nexport { default as toKeyAlias } from \"./converters/toKeyAlias.ts\";\nexport { default as toStatement } from \"./converters/toStatement.ts\";\nexport { default as valueToNode } from \"./converters/valueToNode.ts\";\n\n// definitions\nexport * from \"./definitions/index.ts\";\n\n// modifications\nexport { default as appendToMemberExpression } from \"./modifications/appendToMemberExpression.ts\";\nexport { default as inherits } from \"./modifications/inherits.ts\";\nexport { default as prependToMemberExpression } from \"./modifications/prependToMemberExpression.ts\";\nexport {\n  default as removeProperties,\n  type Options as RemovePropertiesOptions,\n} from \"./modifications/removeProperties.ts\";\nexport { default as removePropertiesDeep } from \"./modifications/removePropertiesDeep.ts\";\nexport { default as removeTypeDuplicates } from \"./modifications/flow/removeTypeDuplicates.ts\";\n\n// retrievers\nexport { default as getBindingIdentifiers } from \"./retrievers/getBindingIdentifiers.ts\";\nexport { default as getOuterBindingIdentifiers } from \"./retrievers/getOuterBindingIdentifiers.ts\";\n\n// traverse\nexport { default as traverse } from \"./traverse/traverse.ts\";\nexport * from \"./traverse/traverse.ts\";\nexport { default as traverseFast } from \"./traverse/traverseFast.ts\";\n\n// utils\nexport { default as shallowEqual } from \"./utils/shallowEqual.ts\";\n\n// validators\nexport { default as is } from \"./validators/is.ts\";\nexport { default as isBinding } from \"./validators/isBinding.ts\";\nexport { default as isBlockScoped } from \"./validators/isBlockScoped.ts\";\nexport { default as isImmutable } from \"./validators/isImmutable.ts\";\nexport { default as isLet } from \"./validators/isLet.ts\";\nexport { default as isNode } from \"./validators/isNode.ts\";\nexport { default as isNodesEquivalent } from \"./validators/isNodesEquivalent.ts\";\nexport { default as isPlaceholderType } from \"./validators/isPlaceholderType.ts\";\nexport { default as isReferenced } from \"./validators/isReferenced.ts\";\nexport { default as isScope } from \"./validators/isScope.ts\";\nexport { default as isSpecifierDefault } from \"./validators/isSpecifierDefault.ts\";\nexport { default as isType } from \"./validators/isType.ts\";\nexport { default as isValidES3Identifier } from \"./validators/isValidES3Identifier.ts\";\nexport { default as isValidIdentifier } from \"./validators/isValidIdentifier.ts\";\nexport { default as isVar } from \"./validators/isVar.ts\";\nexport { default as matchesPattern } from \"./validators/matchesPattern.ts\";\nexport { default as validate } from \"./validators/validate.ts\";\nexport { default as buildMatchMemberExpression } from \"./validators/buildMatchMemberExpression.ts\";\nexport * from \"./validators/generated/index.ts\";\n\n// react\nexport const react = {\n  isReactComponent,\n  isCompatTag,\n  buildChildren,\n};\n\nexport type * from \"./ast-types/generated/index.ts\";\n\n// this is used by @babel/traverse to warn about deprecated visitors\nexport { default as __internal__deprecationWarning } from \"./utils/deprecationWarning.ts\";\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.toSequenceExpression =\n    // eslint-disable-next-line no-restricted-globals\n    require(\"./converters/toSequenceExpression.js\").default;\n}\n",null,"import buildMatchMemberExpression from \"../buildMatchMemberExpression.ts\";\n\nconst isReactComponent = buildMatchMemberExpression(\"React.Component\");\n\nexport default isReactComponent;\n",null,"import matchesPattern from \"./matchesPattern.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Build a function that when called will return whether or not the\n * input `node` `MemberExpression` matches the input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function buildMatchMemberExpression(\n  match: string,\n  allowPartial?: boolean,\n) {\n  const parts = match.split(\".\");\n\n  return (member: t.Node) => matchesPattern(member, parts, allowPartial);\n}\n",null,"import {\n  isIdentifier,\n  isMemberExpression,\n  isStringLiteral,\n  isThisExpression,\n} from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Determines whether or not the input node `member` matches the\n * input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function matchesPattern(\n  member: t.Node | null | undefined,\n  match: string | string[],\n  allowPartial?: boolean,\n): boolean {\n  // not a member expression\n  if (!isMemberExpression(member)) return false;\n\n  const parts = Array.isArray(match) ? match : match.split(\".\");\n  const nodes = [];\n\n  let node;\n  for (node = member; isMemberExpression(node); node = node.object) {\n    nodes.push(node.property);\n  }\n  nodes.push(node);\n\n  if (nodes.length < parts.length) return false;\n  if (!allowPartial && nodes.length > parts.length) return false;\n\n  for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {\n    const node = nodes[j];\n    let value;\n    if (isIdentifier(node)) {\n      value = node.name;\n    } else if (isStringLiteral(node)) {\n      value = node.value;\n    } else if (isThisExpression(node)) {\n      value = \"this\";\n    } else {\n      return false;\n    }\n\n    if (parts[i] !== value) return false;\n  }\n\n  return true;\n}\n",null,"/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\n/* eslint-disable no-fallthrough */\n\nimport shallowEqual from \"../../utils/shallowEqual.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\ntype Opts<Obj> = Partial<{\n  [Prop in keyof Obj]: Obj[Prop] extends t.Node\n    ? t.Node\n    : Obj[Prop] extends t.Node[]\n      ? t.Node[]\n      : Obj[Prop];\n}>;\n\nexport function isArrayExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayExpression> | null,\n): node is t.ArrayExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAssignmentExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AssignmentExpression> | null,\n): node is t.AssignmentExpression {\n  if (!node) return false;\n\n  if (node.type !== \"AssignmentExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBinaryExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BinaryExpression> | null,\n): node is t.BinaryExpression {\n  if (!node) return false;\n\n  if (node.type !== \"BinaryExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterpreterDirective(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterpreterDirective> | null,\n): node is t.InterpreterDirective {\n  if (!node) return false;\n\n  if (node.type !== \"InterpreterDirective\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDirective(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Directive> | null,\n): node is t.Directive {\n  if (!node) return false;\n\n  if (node.type !== \"Directive\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDirectiveLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DirectiveLiteral> | null,\n): node is t.DirectiveLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"DirectiveLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlockStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BlockStatement> | null,\n): node is t.BlockStatement {\n  if (!node) return false;\n\n  if (node.type !== \"BlockStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBreakStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BreakStatement> | null,\n): node is t.BreakStatement {\n  if (!node) return false;\n\n  if (node.type !== \"BreakStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCallExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CallExpression> | null,\n): node is t.CallExpression {\n  if (!node) return false;\n\n  if (node.type !== \"CallExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCatchClause(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CatchClause> | null,\n): node is t.CatchClause {\n  if (!node) return false;\n\n  if (node.type !== \"CatchClause\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isConditionalExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ConditionalExpression> | null,\n): node is t.ConditionalExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ConditionalExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isContinueStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ContinueStatement> | null,\n): node is t.ContinueStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ContinueStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDebuggerStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DebuggerStatement> | null,\n): node is t.DebuggerStatement {\n  if (!node) return false;\n\n  if (node.type !== \"DebuggerStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDoWhileStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DoWhileStatement> | null,\n): node is t.DoWhileStatement {\n  if (!node) return false;\n\n  if (node.type !== \"DoWhileStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEmptyStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EmptyStatement> | null,\n): node is t.EmptyStatement {\n  if (!node) return false;\n\n  if (node.type !== \"EmptyStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpressionStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExpressionStatement> | null,\n): node is t.ExpressionStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ExpressionStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFile(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.File> | null,\n): node is t.File {\n  if (!node) return false;\n\n  if (node.type !== \"File\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForInStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForInStatement> | null,\n): node is t.ForInStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForInStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForStatement> | null,\n): node is t.ForStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionDeclaration> | null,\n): node is t.FunctionDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionExpression> | null,\n): node is t.FunctionExpression {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Identifier> | null,\n): node is t.Identifier {\n  if (!node) return false;\n\n  if (node.type !== \"Identifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIfStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IfStatement> | null,\n): node is t.IfStatement {\n  if (!node) return false;\n\n  if (node.type !== \"IfStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLabeledStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LabeledStatement> | null,\n): node is t.LabeledStatement {\n  if (!node) return false;\n\n  if (node.type !== \"LabeledStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringLiteral> | null,\n): node is t.StringLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"StringLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumericLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumericLiteral> | null,\n): node is t.NumericLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"NumericLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullLiteral> | null,\n): node is t.NullLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"NullLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanLiteral> | null,\n): node is t.BooleanLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRegExpLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RegExpLiteral> | null,\n): node is t.RegExpLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"RegExpLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLogicalExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LogicalExpression> | null,\n): node is t.LogicalExpression {\n  if (!node) return false;\n\n  if (node.type !== \"LogicalExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MemberExpression> | null,\n): node is t.MemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"MemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNewExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NewExpression> | null,\n): node is t.NewExpression {\n  if (!node) return false;\n\n  if (node.type !== \"NewExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isProgram(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Program> | null,\n): node is t.Program {\n  if (!node) return false;\n\n  if (node.type !== \"Program\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectExpression> | null,\n): node is t.ObjectExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectMethod> | null,\n): node is t.ObjectMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectProperty> | null,\n): node is t.ObjectProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRestElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RestElement> | null,\n): node is t.RestElement {\n  if (!node) return false;\n\n  if (node.type !== \"RestElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isReturnStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ReturnStatement> | null,\n): node is t.ReturnStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ReturnStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSequenceExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SequenceExpression> | null,\n): node is t.SequenceExpression {\n  if (!node) return false;\n\n  if (node.type !== \"SequenceExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isParenthesizedExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ParenthesizedExpression> | null,\n): node is t.ParenthesizedExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ParenthesizedExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSwitchCase(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SwitchCase> | null,\n): node is t.SwitchCase {\n  if (!node) return false;\n\n  if (node.type !== \"SwitchCase\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSwitchStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SwitchStatement> | null,\n): node is t.SwitchStatement {\n  if (!node) return false;\n\n  if (node.type !== \"SwitchStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThisExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThisExpression> | null,\n): node is t.ThisExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ThisExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThrowStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThrowStatement> | null,\n): node is t.ThrowStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ThrowStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTryStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TryStatement> | null,\n): node is t.TryStatement {\n  if (!node) return false;\n\n  if (node.type !== \"TryStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnaryExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnaryExpression> | null,\n): node is t.UnaryExpression {\n  if (!node) return false;\n\n  if (node.type !== \"UnaryExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUpdateExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UpdateExpression> | null,\n): node is t.UpdateExpression {\n  if (!node) return false;\n\n  if (node.type !== \"UpdateExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariableDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VariableDeclaration> | null,\n): node is t.VariableDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"VariableDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariableDeclarator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VariableDeclarator> | null,\n): node is t.VariableDeclarator {\n  if (!node) return false;\n\n  if (node.type !== \"VariableDeclarator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWhileStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.WhileStatement> | null,\n): node is t.WhileStatement {\n  if (!node) return false;\n\n  if (node.type !== \"WhileStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWithStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.WithStatement> | null,\n): node is t.WithStatement {\n  if (!node) return false;\n\n  if (node.type !== \"WithStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAssignmentPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AssignmentPattern> | null,\n): node is t.AssignmentPattern {\n  if (!node) return false;\n\n  if (node.type !== \"AssignmentPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrayPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayPattern> | null,\n): node is t.ArrayPattern {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrowFunctionExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrowFunctionExpression> | null,\n): node is t.ArrowFunctionExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ArrowFunctionExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassBody> | null,\n): node is t.ClassBody {\n  if (!node) return false;\n\n  if (node.type !== \"ClassBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassExpression> | null,\n): node is t.ClassExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ClassExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassDeclaration> | null,\n): node is t.ClassDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ClassDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportAllDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportAllDeclaration> | null,\n): node is t.ExportAllDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportAllDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDefaultDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDefaultDeclaration> | null,\n): node is t.ExportDefaultDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportDefaultDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportNamedDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportNamedDeclaration> | null,\n): node is t.ExportNamedDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportNamedDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportSpecifier> | null,\n): node is t.ExportSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForOfStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForOfStatement> | null,\n): node is t.ForOfStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForOfStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportDeclaration> | null,\n): node is t.ImportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ImportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportDefaultSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportDefaultSpecifier> | null,\n): node is t.ImportDefaultSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportDefaultSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportNamespaceSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportNamespaceSpecifier> | null,\n): node is t.ImportNamespaceSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportNamespaceSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportSpecifier> | null,\n): node is t.ImportSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportExpression> | null,\n): node is t.ImportExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ImportExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMetaProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MetaProperty> | null,\n): node is t.MetaProperty {\n  if (!node) return false;\n\n  if (node.type !== \"MetaProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassMethod> | null,\n): node is t.ClassMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ClassMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectPattern> | null,\n): node is t.ObjectPattern {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSpreadElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SpreadElement> | null,\n): node is t.SpreadElement {\n  if (!node) return false;\n\n  if (node.type !== \"SpreadElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSuper(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Super> | null,\n): node is t.Super {\n  if (!node) return false;\n\n  if (node.type !== \"Super\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTaggedTemplateExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TaggedTemplateExpression> | null,\n): node is t.TaggedTemplateExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TaggedTemplateExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTemplateElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TemplateElement> | null,\n): node is t.TemplateElement {\n  if (!node) return false;\n\n  if (node.type !== \"TemplateElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTemplateLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TemplateLiteral> | null,\n): node is t.TemplateLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"TemplateLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isYieldExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.YieldExpression> | null,\n): node is t.YieldExpression {\n  if (!node) return false;\n\n  if (node.type !== \"YieldExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAwaitExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AwaitExpression> | null,\n): node is t.AwaitExpression {\n  if (!node) return false;\n\n  if (node.type !== \"AwaitExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImport(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Import> | null,\n): node is t.Import {\n  if (!node) return false;\n\n  if (node.type !== \"Import\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBigIntLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BigIntLiteral> | null,\n): node is t.BigIntLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"BigIntLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportNamespaceSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportNamespaceSpecifier> | null,\n): node is t.ExportNamespaceSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportNamespaceSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalMemberExpression> | null,\n): node is t.OptionalMemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalMemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalCallExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalCallExpression> | null,\n): node is t.OptionalCallExpression {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalCallExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassProperty> | null,\n): node is t.ClassProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassAccessorProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassAccessorProperty> | null,\n): node is t.ClassAccessorProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassAccessorProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassPrivateProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassPrivateProperty> | null,\n): node is t.ClassPrivateProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassPrivateProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassPrivateMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassPrivateMethod> | null,\n): node is t.ClassPrivateMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ClassPrivateMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPrivateName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PrivateName> | null,\n): node is t.PrivateName {\n  if (!node) return false;\n\n  if (node.type !== \"PrivateName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStaticBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StaticBlock> | null,\n): node is t.StaticBlock {\n  if (!node) return false;\n\n  if (node.type !== \"StaticBlock\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAnyTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AnyTypeAnnotation> | null,\n): node is t.AnyTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"AnyTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrayTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayTypeAnnotation> | null,\n): node is t.ArrayTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanTypeAnnotation> | null,\n): node is t.BooleanTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanLiteralTypeAnnotation> | null,\n): node is t.BooleanLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullLiteralTypeAnnotation> | null,\n): node is t.NullLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NullLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassImplements(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassImplements> | null,\n): node is t.ClassImplements {\n  if (!node) return false;\n\n  if (node.type !== \"ClassImplements\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareClass(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareClass> | null,\n): node is t.DeclareClass {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareClass\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareFunction> | null,\n): node is t.DeclareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareInterface(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareInterface> | null,\n): node is t.DeclareInterface {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareInterface\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareModule(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareModule> | null,\n): node is t.DeclareModule {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareModule\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareModuleExports(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareModuleExports> | null,\n): node is t.DeclareModuleExports {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareModuleExports\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareTypeAlias(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareTypeAlias> | null,\n): node is t.DeclareTypeAlias {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareTypeAlias\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareOpaqueType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareOpaqueType> | null,\n): node is t.DeclareOpaqueType {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareOpaqueType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareVariable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareVariable> | null,\n): node is t.DeclareVariable {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareVariable\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareExportDeclaration> | null,\n): node is t.DeclareExportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareExportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareExportAllDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareExportAllDeclaration> | null,\n): node is t.DeclareExportAllDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareExportAllDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclaredPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclaredPredicate> | null,\n): node is t.DeclaredPredicate {\n  if (!node) return false;\n\n  if (node.type !== \"DeclaredPredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExistsTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExistsTypeAnnotation> | null,\n): node is t.ExistsTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ExistsTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionTypeAnnotation> | null,\n): node is t.FunctionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionTypeParam(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionTypeParam> | null,\n): node is t.FunctionTypeParam {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionTypeParam\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isGenericTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.GenericTypeAnnotation> | null,\n): node is t.GenericTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"GenericTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInferredPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InferredPredicate> | null,\n): node is t.InferredPredicate {\n  if (!node) return false;\n\n  if (node.type !== \"InferredPredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceExtends(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceExtends> | null,\n): node is t.InterfaceExtends {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceExtends\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceDeclaration> | null,\n): node is t.InterfaceDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceTypeAnnotation> | null,\n): node is t.InterfaceTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIntersectionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IntersectionTypeAnnotation> | null,\n): node is t.IntersectionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"IntersectionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMixedTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MixedTypeAnnotation> | null,\n): node is t.MixedTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"MixedTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEmptyTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EmptyTypeAnnotation> | null,\n): node is t.EmptyTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"EmptyTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullableTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullableTypeAnnotation> | null,\n): node is t.NullableTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NullableTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumberLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberLiteralTypeAnnotation> | null,\n): node is t.NumberLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NumberLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumberTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberTypeAnnotation> | null,\n): node is t.NumberTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NumberTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeAnnotation> | null,\n): node is t.ObjectTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeInternalSlot(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeInternalSlot> | null,\n): node is t.ObjectTypeInternalSlot {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeInternalSlot\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeCallProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeCallProperty> | null,\n): node is t.ObjectTypeCallProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeCallProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeIndexer(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeIndexer> | null,\n): node is t.ObjectTypeIndexer {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeIndexer\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeProperty> | null,\n): node is t.ObjectTypeProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeSpreadProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeSpreadProperty> | null,\n): node is t.ObjectTypeSpreadProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeSpreadProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOpaqueType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OpaqueType> | null,\n): node is t.OpaqueType {\n  if (!node) return false;\n\n  if (node.type !== \"OpaqueType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isQualifiedTypeIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.QualifiedTypeIdentifier> | null,\n): node is t.QualifiedTypeIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"QualifiedTypeIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringLiteralTypeAnnotation> | null,\n): node is t.StringLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"StringLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringTypeAnnotation> | null,\n): node is t.StringTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"StringTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSymbolTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SymbolTypeAnnotation> | null,\n): node is t.SymbolTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"SymbolTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThisTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThisTypeAnnotation> | null,\n): node is t.ThisTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ThisTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTupleTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TupleTypeAnnotation> | null,\n): node is t.TupleTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TupleTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeofTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeofTypeAnnotation> | null,\n): node is t.TypeofTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeofTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeAlias(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeAlias> | null,\n): node is t.TypeAlias {\n  if (!node) return false;\n\n  if (node.type !== \"TypeAlias\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeAnnotation> | null,\n): node is t.TypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeCastExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeCastExpression> | null,\n): node is t.TypeCastExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TypeCastExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameter> | null,\n): node is t.TypeParameter {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameter\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameterDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameterDeclaration> | null,\n): node is t.TypeParameterDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameterDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameterInstantiation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameterInstantiation> | null,\n): node is t.TypeParameterInstantiation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameterInstantiation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnionTypeAnnotation> | null,\n): node is t.UnionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"UnionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariance(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Variance> | null,\n): node is t.Variance {\n  if (!node) return false;\n\n  if (node.type !== \"Variance\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVoidTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VoidTypeAnnotation> | null,\n): node is t.VoidTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"VoidTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumDeclaration> | null,\n): node is t.EnumDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"EnumDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBooleanBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBooleanBody> | null,\n): node is t.EnumBooleanBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumBooleanBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumNumberBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumNumberBody> | null,\n): node is t.EnumNumberBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumNumberBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumStringBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumStringBody> | null,\n): node is t.EnumStringBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumStringBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumSymbolBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumSymbolBody> | null,\n): node is t.EnumSymbolBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumSymbolBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBooleanMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBooleanMember> | null,\n): node is t.EnumBooleanMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumBooleanMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumNumberMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumNumberMember> | null,\n): node is t.EnumNumberMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumNumberMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumStringMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumStringMember> | null,\n): node is t.EnumStringMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumStringMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumDefaultedMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumDefaultedMember> | null,\n): node is t.EnumDefaultedMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumDefaultedMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IndexedAccessType> | null,\n): node is t.IndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"IndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalIndexedAccessType> | null,\n): node is t.OptionalIndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalIndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXAttribute> | null,\n): node is t.JSXAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"JSXAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXClosingElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXClosingElement> | null,\n): node is t.JSXClosingElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXClosingElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXElement> | null,\n): node is t.JSXElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXEmptyExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXEmptyExpression> | null,\n): node is t.JSXEmptyExpression {\n  if (!node) return false;\n\n  if (node.type !== \"JSXEmptyExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXExpressionContainer(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXExpressionContainer> | null,\n): node is t.JSXExpressionContainer {\n  if (!node) return false;\n\n  if (node.type !== \"JSXExpressionContainer\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXSpreadChild(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXSpreadChild> | null,\n): node is t.JSXSpreadChild {\n  if (!node) return false;\n\n  if (node.type !== \"JSXSpreadChild\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXIdentifier> | null,\n): node is t.JSXIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"JSXIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXMemberExpression> | null,\n): node is t.JSXMemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"JSXMemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXNamespacedName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXNamespacedName> | null,\n): node is t.JSXNamespacedName {\n  if (!node) return false;\n\n  if (node.type !== \"JSXNamespacedName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXOpeningElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXOpeningElement> | null,\n): node is t.JSXOpeningElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXOpeningElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXSpreadAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXSpreadAttribute> | null,\n): node is t.JSXSpreadAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"JSXSpreadAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXText(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXText> | null,\n): node is t.JSXText {\n  if (!node) return false;\n\n  if (node.type !== \"JSXText\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXFragment> | null,\n): node is t.JSXFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXOpeningFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXOpeningFragment> | null,\n): node is t.JSXOpeningFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXOpeningFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXClosingFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXClosingFragment> | null,\n): node is t.JSXClosingFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXClosingFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNoop(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Noop> | null,\n): node is t.Noop {\n  if (!node) return false;\n\n  if (node.type !== \"Noop\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPlaceholder(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Placeholder> | null,\n): node is t.Placeholder {\n  if (!node) return false;\n\n  if (node.type !== \"Placeholder\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isV8IntrinsicIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.V8IntrinsicIdentifier> | null,\n): node is t.V8IntrinsicIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"V8IntrinsicIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArgumentPlaceholder(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArgumentPlaceholder> | null,\n): node is t.ArgumentPlaceholder {\n  if (!node) return false;\n\n  if (node.type !== \"ArgumentPlaceholder\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBindExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BindExpression> | null,\n): node is t.BindExpression {\n  if (!node) return false;\n\n  if (node.type !== \"BindExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportAttribute> | null,\n): node is t.ImportAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"ImportAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDecorator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Decorator> | null,\n): node is t.Decorator {\n  if (!node) return false;\n\n  if (node.type !== \"Decorator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDoExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DoExpression> | null,\n): node is t.DoExpression {\n  if (!node) return false;\n\n  if (node.type !== \"DoExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDefaultSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDefaultSpecifier> | null,\n): node is t.ExportDefaultSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportDefaultSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRecordExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RecordExpression> | null,\n): node is t.RecordExpression {\n  if (!node) return false;\n\n  if (node.type !== \"RecordExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTupleExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TupleExpression> | null,\n): node is t.TupleExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TupleExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDecimalLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DecimalLiteral> | null,\n): node is t.DecimalLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"DecimalLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isModuleExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleExpression> | null,\n): node is t.ModuleExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ModuleExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTopicReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TopicReference> | null,\n): node is t.TopicReference {\n  if (!node) return false;\n\n  if (node.type !== \"TopicReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelineTopicExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelineTopicExpression> | null,\n): node is t.PipelineTopicExpression {\n  if (!node) return false;\n\n  if (node.type !== \"PipelineTopicExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelineBareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelineBareFunction> | null,\n): node is t.PipelineBareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"PipelineBareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelinePrimaryTopicReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelinePrimaryTopicReference> | null,\n): node is t.PipelinePrimaryTopicReference {\n  if (!node) return false;\n\n  if (node.type !== \"PipelinePrimaryTopicReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSParameterProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSParameterProperty> | null,\n): node is t.TSParameterProperty {\n  if (!node) return false;\n\n  if (node.type !== \"TSParameterProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSDeclareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSDeclareFunction> | null,\n): node is t.TSDeclareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"TSDeclareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSDeclareMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSDeclareMethod> | null,\n): node is t.TSDeclareMethod {\n  if (!node) return false;\n\n  if (node.type !== \"TSDeclareMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSQualifiedName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSQualifiedName> | null,\n): node is t.TSQualifiedName {\n  if (!node) return false;\n\n  if (node.type !== \"TSQualifiedName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSCallSignatureDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSCallSignatureDeclaration> | null,\n): node is t.TSCallSignatureDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSCallSignatureDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConstructSignatureDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConstructSignatureDeclaration> | null,\n): node is t.TSConstructSignatureDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSConstructSignatureDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSPropertySignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSPropertySignature> | null,\n): node is t.TSPropertySignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSPropertySignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSMethodSignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSMethodSignature> | null,\n): node is t.TSMethodSignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSMethodSignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIndexSignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIndexSignature> | null,\n): node is t.TSIndexSignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSIndexSignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSAnyKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSAnyKeyword> | null,\n): node is t.TSAnyKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSAnyKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBooleanKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBooleanKeyword> | null,\n): node is t.TSBooleanKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSBooleanKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBigIntKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBigIntKeyword> | null,\n): node is t.TSBigIntKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSBigIntKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIntrinsicKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIntrinsicKeyword> | null,\n): node is t.TSIntrinsicKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSIntrinsicKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNeverKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNeverKeyword> | null,\n): node is t.TSNeverKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNeverKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNullKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNullKeyword> | null,\n): node is t.TSNullKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNullKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNumberKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNumberKeyword> | null,\n): node is t.TSNumberKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNumberKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSObjectKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSObjectKeyword> | null,\n): node is t.TSObjectKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSObjectKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSStringKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSStringKeyword> | null,\n): node is t.TSStringKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSStringKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSSymbolKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSSymbolKeyword> | null,\n): node is t.TSSymbolKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSSymbolKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUndefinedKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUndefinedKeyword> | null,\n): node is t.TSUndefinedKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSUndefinedKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUnknownKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUnknownKeyword> | null,\n): node is t.TSUnknownKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSUnknownKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSVoidKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSVoidKeyword> | null,\n): node is t.TSVoidKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSVoidKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSThisType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSThisType> | null,\n): node is t.TSThisType {\n  if (!node) return false;\n\n  if (node.type !== \"TSThisType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSFunctionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSFunctionType> | null,\n): node is t.TSFunctionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSFunctionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConstructorType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConstructorType> | null,\n): node is t.TSConstructorType {\n  if (!node) return false;\n\n  if (node.type !== \"TSConstructorType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeReference> | null,\n): node is t.TSTypeReference {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypePredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypePredicate> | null,\n): node is t.TSTypePredicate {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypePredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeQuery(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeQuery> | null,\n): node is t.TSTypeQuery {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeQuery\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeLiteral> | null,\n): node is t.TSTypeLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSArrayType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSArrayType> | null,\n): node is t.TSArrayType {\n  if (!node) return false;\n\n  if (node.type !== \"TSArrayType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTupleType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTupleType> | null,\n): node is t.TSTupleType {\n  if (!node) return false;\n\n  if (node.type !== \"TSTupleType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSOptionalType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSOptionalType> | null,\n): node is t.TSOptionalType {\n  if (!node) return false;\n\n  if (node.type !== \"TSOptionalType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSRestType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSRestType> | null,\n): node is t.TSRestType {\n  if (!node) return false;\n\n  if (node.type !== \"TSRestType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNamedTupleMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNamedTupleMember> | null,\n): node is t.TSNamedTupleMember {\n  if (!node) return false;\n\n  if (node.type !== \"TSNamedTupleMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUnionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUnionType> | null,\n): node is t.TSUnionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSUnionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIntersectionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIntersectionType> | null,\n): node is t.TSIntersectionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSIntersectionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConditionalType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConditionalType> | null,\n): node is t.TSConditionalType {\n  if (!node) return false;\n\n  if (node.type !== \"TSConditionalType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInferType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInferType> | null,\n): node is t.TSInferType {\n  if (!node) return false;\n\n  if (node.type !== \"TSInferType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSParenthesizedType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSParenthesizedType> | null,\n): node is t.TSParenthesizedType {\n  if (!node) return false;\n\n  if (node.type !== \"TSParenthesizedType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeOperator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeOperator> | null,\n): node is t.TSTypeOperator {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeOperator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIndexedAccessType> | null,\n): node is t.TSIndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"TSIndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSMappedType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSMappedType> | null,\n): node is t.TSMappedType {\n  if (!node) return false;\n\n  if (node.type !== \"TSMappedType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSLiteralType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSLiteralType> | null,\n): node is t.TSLiteralType {\n  if (!node) return false;\n\n  if (node.type !== \"TSLiteralType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExpressionWithTypeArguments(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExpressionWithTypeArguments> | null,\n): node is t.TSExpressionWithTypeArguments {\n  if (!node) return false;\n\n  if (node.type !== \"TSExpressionWithTypeArguments\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInterfaceDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInterfaceDeclaration> | null,\n): node is t.TSInterfaceDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSInterfaceDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInterfaceBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInterfaceBody> | null,\n): node is t.TSInterfaceBody {\n  if (!node) return false;\n\n  if (node.type !== \"TSInterfaceBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAliasDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAliasDeclaration> | null,\n): node is t.TSTypeAliasDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAliasDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInstantiationExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInstantiationExpression> | null,\n): node is t.TSInstantiationExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSInstantiationExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSAsExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSAsExpression> | null,\n): node is t.TSAsExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSAsExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSSatisfiesExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSSatisfiesExpression> | null,\n): node is t.TSSatisfiesExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSSatisfiesExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAssertion(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAssertion> | null,\n): node is t.TSTypeAssertion {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAssertion\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumDeclaration> | null,\n): node is t.TSEnumDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumMember> | null,\n): node is t.TSEnumMember {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSModuleDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSModuleDeclaration> | null,\n): node is t.TSModuleDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSModuleDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSModuleBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSModuleBlock> | null,\n): node is t.TSModuleBlock {\n  if (!node) return false;\n\n  if (node.type !== \"TSModuleBlock\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSImportType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSImportType> | null,\n): node is t.TSImportType {\n  if (!node) return false;\n\n  if (node.type !== \"TSImportType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSImportEqualsDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSImportEqualsDeclaration> | null,\n): node is t.TSImportEqualsDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSImportEqualsDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExternalModuleReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExternalModuleReference> | null,\n): node is t.TSExternalModuleReference {\n  if (!node) return false;\n\n  if (node.type !== \"TSExternalModuleReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNonNullExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNonNullExpression> | null,\n): node is t.TSNonNullExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSNonNullExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExportAssignment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExportAssignment> | null,\n): node is t.TSExportAssignment {\n  if (!node) return false;\n\n  if (node.type !== \"TSExportAssignment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNamespaceExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNamespaceExportDeclaration> | null,\n): node is t.TSNamespaceExportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSNamespaceExportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAnnotation> | null,\n): node is t.TSTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameterInstantiation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameterInstantiation> | null,\n): node is t.TSTypeParameterInstantiation {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameterInstantiation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameterDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameterDeclaration> | null,\n): node is t.TSTypeParameterDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameterDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameter> | null,\n): node is t.TSTypeParameter {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameter\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStandardized(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Standardized> | null,\n): node is t.Standardized {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ArrayExpression\":\n    case \"AssignmentExpression\":\n    case \"BinaryExpression\":\n    case \"InterpreterDirective\":\n    case \"Directive\":\n    case \"DirectiveLiteral\":\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"CallExpression\":\n    case \"CatchClause\":\n    case \"ConditionalExpression\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"File\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Identifier\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"LogicalExpression\":\n    case \"MemberExpression\":\n    case \"NewExpression\":\n    case \"Program\":\n    case \"ObjectExpression\":\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n    case \"RestElement\":\n    case \"ReturnStatement\":\n    case \"SequenceExpression\":\n    case \"ParenthesizedExpression\":\n    case \"SwitchCase\":\n    case \"SwitchStatement\":\n    case \"ThisExpression\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n    case \"VariableDeclaration\":\n    case \"VariableDeclarator\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassBody\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ExportSpecifier\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n    case \"ImportExpression\":\n    case \"MetaProperty\":\n    case \"ClassMethod\":\n    case \"ObjectPattern\":\n    case \"SpreadElement\":\n    case \"Super\":\n    case \"TaggedTemplateExpression\":\n    case \"TemplateElement\":\n    case \"TemplateLiteral\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n    case \"Import\":\n    case \"BigIntLiteral\":\n    case \"ExportNamespaceSpecifier\":\n    case \"OptionalMemberExpression\":\n    case \"OptionalCallExpression\":\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n    case \"PrivateName\":\n    case \"StaticBlock\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Identifier\":\n        case \"StringLiteral\":\n        case \"BlockStatement\":\n        case \"ClassBody\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Expression> | null,\n): node is t.Expression {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ArrayExpression\":\n    case \"AssignmentExpression\":\n    case \"BinaryExpression\":\n    case \"CallExpression\":\n    case \"ConditionalExpression\":\n    case \"FunctionExpression\":\n    case \"Identifier\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"LogicalExpression\":\n    case \"MemberExpression\":\n    case \"NewExpression\":\n    case \"ObjectExpression\":\n    case \"SequenceExpression\":\n    case \"ParenthesizedExpression\":\n    case \"ThisExpression\":\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassExpression\":\n    case \"ImportExpression\":\n    case \"MetaProperty\":\n    case \"Super\":\n    case \"TaggedTemplateExpression\":\n    case \"TemplateLiteral\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n    case \"Import\":\n    case \"BigIntLiteral\":\n    case \"OptionalMemberExpression\":\n    case \"OptionalCallExpression\":\n    case \"TypeCastExpression\":\n    case \"JSXElement\":\n    case \"JSXFragment\":\n    case \"BindExpression\":\n    case \"DoExpression\":\n    case \"RecordExpression\":\n    case \"TupleExpression\":\n    case \"DecimalLiteral\":\n    case \"ModuleExpression\":\n    case \"TopicReference\":\n    case \"PipelineTopicExpression\":\n    case \"PipelineBareFunction\":\n    case \"PipelinePrimaryTopicReference\":\n    case \"TSInstantiationExpression\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Expression\":\n        case \"Identifier\":\n        case \"StringLiteral\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBinary(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Binary> | null,\n): node is t.Binary {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BinaryExpression\":\n    case \"LogicalExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isScopable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Scopable> | null,\n): node is t.Scopable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"CatchClause\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Program\":\n    case \"ObjectMethod\":\n    case \"SwitchStatement\":\n    case \"WhileStatement\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n    case \"ForOfStatement\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlockParent(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BlockParent> | null,\n): node is t.BlockParent {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"CatchClause\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Program\":\n    case \"ObjectMethod\":\n    case \"SwitchStatement\":\n    case \"WhileStatement\":\n    case \"ArrowFunctionExpression\":\n    case \"ForOfStatement\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Block> | null,\n): node is t.Block {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"Program\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Statement> | null,\n): node is t.Statement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"ReturnStatement\":\n    case \"SwitchStatement\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"VariableDeclaration\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n    case \"EnumDeclaration\":\n    case \"TSDeclareFunction\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSEnumDeclaration\":\n    case \"TSModuleDeclaration\":\n    case \"TSImportEqualsDeclaration\":\n    case \"TSExportAssignment\":\n    case \"TSNamespaceExportDeclaration\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Statement\":\n        case \"Declaration\":\n        case \"BlockStatement\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTerminatorless(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Terminatorless> | null,\n): node is t.Terminatorless {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"ReturnStatement\":\n    case \"ThrowStatement\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCompletionStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CompletionStatement> | null,\n): node is t.CompletionStatement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"ReturnStatement\":\n    case \"ThrowStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isConditional(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Conditional> | null,\n): node is t.Conditional {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLoop(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Loop> | null,\n): node is t.Loop {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"WhileStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWhile(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.While> | null,\n): node is t.While {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DoWhileStatement\":\n    case \"WhileStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpressionWrapper(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExpressionWrapper> | null,\n): node is t.ExpressionWrapper {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExpressionStatement\":\n    case \"ParenthesizedExpression\":\n    case \"TypeCastExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFor(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.For> | null,\n): node is t.For {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForXStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForXStatement> | null,\n): node is t.ForXStatement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Function> | null,\n): node is t.Function {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"ObjectMethod\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionParent(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionParent> | null,\n): node is t.FunctionParent {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"ObjectMethod\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPureish(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Pureish> | null,\n): node is t.Pureish {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"ArrowFunctionExpression\":\n    case \"BigIntLiteral\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Declaration> | null,\n): node is t.Declaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"VariableDeclaration\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n    case \"EnumDeclaration\":\n    case \"TSDeclareFunction\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSEnumDeclaration\":\n    case \"TSModuleDeclaration\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Declaration\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPatternLike(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PatternLike> | null,\n): node is t.PatternLike {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Pattern\":\n        case \"Identifier\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLVal(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LVal> | null,\n): node is t.LVal {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"TSParameterProperty\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Pattern\":\n        case \"Identifier\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEntityName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEntityName> | null,\n): node is t.TSEntityName {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"TSQualifiedName\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Identifier\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Literal> | null,\n): node is t.Literal {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"TemplateLiteral\":\n    case \"BigIntLiteral\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImmutable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Immutable> | null,\n): node is t.Immutable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"BigIntLiteral\":\n    case \"JSXAttribute\":\n    case \"JSXClosingElement\":\n    case \"JSXElement\":\n    case \"JSXExpressionContainer\":\n    case \"JSXSpreadChild\":\n    case \"JSXOpeningElement\":\n    case \"JSXText\":\n    case \"JSXFragment\":\n    case \"JSXOpeningFragment\":\n    case \"JSXClosingFragment\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUserWhitespacable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UserWhitespacable> | null,\n): node is t.UserWhitespacable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n    case \"ObjectTypeInternalSlot\":\n    case \"ObjectTypeCallProperty\":\n    case \"ObjectTypeIndexer\":\n    case \"ObjectTypeProperty\":\n    case \"ObjectTypeSpreadProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Method> | null,\n): node is t.Method {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectMember> | null,\n): node is t.ObjectMember {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Property> | null,\n): node is t.Property {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectProperty\":\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n    case \"ClassPrivateProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnaryLike(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnaryLike> | null,\n): node is t.UnaryLike {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"UnaryExpression\":\n    case \"SpreadElement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Pattern> | null,\n): node is t.Pattern {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Pattern\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClass(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Class> | null,\n): node is t.Class {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportOrExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportOrExportDeclaration> | null,\n): node is t.ImportOrExportDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ImportDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDeclaration> | null,\n): node is t.ExportDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isModuleSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleSpecifier> | null,\n): node is t.ModuleSpecifier {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportSpecifier\":\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAccessor(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Accessor> | null,\n): node is t.Accessor {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassAccessorProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPrivate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Private> | null,\n): node is t.Private {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n    case \"PrivateName\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlow(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Flow> | null,\n): node is t.Flow {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"ArrayTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"BooleanLiteralTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"ClassImplements\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"DeclaredPredicate\":\n    case \"ExistsTypeAnnotation\":\n    case \"FunctionTypeAnnotation\":\n    case \"FunctionTypeParam\":\n    case \"GenericTypeAnnotation\":\n    case \"InferredPredicate\":\n    case \"InterfaceExtends\":\n    case \"InterfaceDeclaration\":\n    case \"InterfaceTypeAnnotation\":\n    case \"IntersectionTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NullableTypeAnnotation\":\n    case \"NumberLiteralTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"ObjectTypeAnnotation\":\n    case \"ObjectTypeInternalSlot\":\n    case \"ObjectTypeCallProperty\":\n    case \"ObjectTypeIndexer\":\n    case \"ObjectTypeProperty\":\n    case \"ObjectTypeSpreadProperty\":\n    case \"OpaqueType\":\n    case \"QualifiedTypeIdentifier\":\n    case \"StringLiteralTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"TupleTypeAnnotation\":\n    case \"TypeofTypeAnnotation\":\n    case \"TypeAlias\":\n    case \"TypeAnnotation\":\n    case \"TypeCastExpression\":\n    case \"TypeParameter\":\n    case \"TypeParameterDeclaration\":\n    case \"TypeParameterInstantiation\":\n    case \"UnionTypeAnnotation\":\n    case \"Variance\":\n    case \"VoidTypeAnnotation\":\n    case \"EnumDeclaration\":\n    case \"EnumBooleanBody\":\n    case \"EnumNumberBody\":\n    case \"EnumStringBody\":\n    case \"EnumSymbolBody\":\n    case \"EnumBooleanMember\":\n    case \"EnumNumberMember\":\n    case \"EnumStringMember\":\n    case \"EnumDefaultedMember\":\n    case \"IndexedAccessType\":\n    case \"OptionalIndexedAccessType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowType> | null,\n): node is t.FlowType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"ArrayTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"BooleanLiteralTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"ExistsTypeAnnotation\":\n    case \"FunctionTypeAnnotation\":\n    case \"GenericTypeAnnotation\":\n    case \"InterfaceTypeAnnotation\":\n    case \"IntersectionTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NullableTypeAnnotation\":\n    case \"NumberLiteralTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"ObjectTypeAnnotation\":\n    case \"StringLiteralTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"TupleTypeAnnotation\":\n    case \"TypeofTypeAnnotation\":\n    case \"UnionTypeAnnotation\":\n    case \"VoidTypeAnnotation\":\n    case \"IndexedAccessType\":\n    case \"OptionalIndexedAccessType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowBaseAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowBaseAnnotation> | null,\n): node is t.FlowBaseAnnotation {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"VoidTypeAnnotation\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowDeclaration> | null,\n): node is t.FlowDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowPredicate> | null,\n): node is t.FlowPredicate {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DeclaredPredicate\":\n    case \"InferredPredicate\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBody> | null,\n): node is t.EnumBody {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"EnumBooleanBody\":\n    case \"EnumNumberBody\":\n    case \"EnumStringBody\":\n    case \"EnumSymbolBody\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumMember> | null,\n): node is t.EnumMember {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"EnumBooleanMember\":\n    case \"EnumNumberMember\":\n    case \"EnumStringMember\":\n    case \"EnumDefaultedMember\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSX(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSX> | null,\n): node is t.JSX {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"JSXAttribute\":\n    case \"JSXClosingElement\":\n    case \"JSXElement\":\n    case \"JSXEmptyExpression\":\n    case \"JSXExpressionContainer\":\n    case \"JSXSpreadChild\":\n    case \"JSXIdentifier\":\n    case \"JSXMemberExpression\":\n    case \"JSXNamespacedName\":\n    case \"JSXOpeningElement\":\n    case \"JSXSpreadAttribute\":\n    case \"JSXText\":\n    case \"JSXFragment\":\n    case \"JSXOpeningFragment\":\n    case \"JSXClosingFragment\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMiscellaneous(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Miscellaneous> | null,\n): node is t.Miscellaneous {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Noop\":\n    case \"Placeholder\":\n    case \"V8IntrinsicIdentifier\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeScript(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeScript> | null,\n): node is t.TypeScript {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSParameterProperty\":\n    case \"TSDeclareFunction\":\n    case \"TSDeclareMethod\":\n    case \"TSQualifiedName\":\n    case \"TSCallSignatureDeclaration\":\n    case \"TSConstructSignatureDeclaration\":\n    case \"TSPropertySignature\":\n    case \"TSMethodSignature\":\n    case \"TSIndexSignature\":\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSFunctionType\":\n    case \"TSConstructorType\":\n    case \"TSTypeReference\":\n    case \"TSTypePredicate\":\n    case \"TSTypeQuery\":\n    case \"TSTypeLiteral\":\n    case \"TSArrayType\":\n    case \"TSTupleType\":\n    case \"TSOptionalType\":\n    case \"TSRestType\":\n    case \"TSNamedTupleMember\":\n    case \"TSUnionType\":\n    case \"TSIntersectionType\":\n    case \"TSConditionalType\":\n    case \"TSInferType\":\n    case \"TSParenthesizedType\":\n    case \"TSTypeOperator\":\n    case \"TSIndexedAccessType\":\n    case \"TSMappedType\":\n    case \"TSLiteralType\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSInterfaceBody\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSInstantiationExpression\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSEnumDeclaration\":\n    case \"TSEnumMember\":\n    case \"TSModuleDeclaration\":\n    case \"TSModuleBlock\":\n    case \"TSImportType\":\n    case \"TSImportEqualsDeclaration\":\n    case \"TSExternalModuleReference\":\n    case \"TSNonNullExpression\":\n    case \"TSExportAssignment\":\n    case \"TSNamespaceExportDeclaration\":\n    case \"TSTypeAnnotation\":\n    case \"TSTypeParameterInstantiation\":\n    case \"TSTypeParameterDeclaration\":\n    case \"TSTypeParameter\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeElement> | null,\n): node is t.TSTypeElement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSCallSignatureDeclaration\":\n    case \"TSConstructSignatureDeclaration\":\n    case \"TSPropertySignature\":\n    case \"TSMethodSignature\":\n    case \"TSIndexSignature\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSType> | null,\n): node is t.TSType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSFunctionType\":\n    case \"TSConstructorType\":\n    case \"TSTypeReference\":\n    case \"TSTypePredicate\":\n    case \"TSTypeQuery\":\n    case \"TSTypeLiteral\":\n    case \"TSArrayType\":\n    case \"TSTupleType\":\n    case \"TSOptionalType\":\n    case \"TSRestType\":\n    case \"TSUnionType\":\n    case \"TSIntersectionType\":\n    case \"TSConditionalType\":\n    case \"TSInferType\":\n    case \"TSParenthesizedType\":\n    case \"TSTypeOperator\":\n    case \"TSIndexedAccessType\":\n    case \"TSMappedType\":\n    case \"TSLiteralType\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSImportType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBaseType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBaseType> | null,\n): node is t.TSBaseType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSLiteralType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isNumericLiteral`\n */\nexport function isNumberLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberLiteral> | null,\n): boolean {\n  deprecationWarning(\"isNumberLiteral\", \"isNumericLiteral\");\n  if (!node) return false;\n\n  if (node.type !== \"NumberLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isRegExpLiteral`\n */\nexport function isRegexLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RegexLiteral> | null,\n): boolean {\n  deprecationWarning(\"isRegexLiteral\", \"isRegExpLiteral\");\n  if (!node) return false;\n\n  if (node.type !== \"RegexLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isRestElement`\n */\nexport function isRestProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RestProperty> | null,\n): boolean {\n  deprecationWarning(\"isRestProperty\", \"isRestElement\");\n  if (!node) return false;\n\n  if (node.type !== \"RestProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isSpreadElement`\n */\nexport function isSpreadProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SpreadProperty> | null,\n): boolean {\n  deprecationWarning(\"isSpreadProperty\", \"isSpreadElement\");\n  if (!node) return false;\n\n  if (node.type !== \"SpreadProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isImportOrExportDeclaration`\n */\nexport function isModuleDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleDeclaration> | null,\n): node is t.ImportOrExportDeclaration {\n  deprecationWarning(\"isModuleDeclaration\", \"isImportOrExportDeclaration\");\n  return isImportOrExportDeclaration(node, opts);\n}\n",null,"export default function shallowEqual<T extends object>(\n  actual: object,\n  expected: T,\n): actual is T {\n  const keys = Object.keys(expected) as (keyof T)[];\n\n  for (const key of keys) {\n    if (\n      // @ts-expect-error maybe we should check whether key exists first\n      actual[key] !== expected[key]\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n",null,"const warnings = new Set();\n\nexport default function deprecationWarning(\n  oldName: string,\n  newName: string,\n  prefix: string = \"\",\n) {\n  if (warnings.has(oldName)) return;\n  warnings.add(oldName);\n\n  const { internal, trace } = captureShortStackTrace(1, 2);\n  if (internal) {\n    // If usage comes from an internal package, there is no point in warning because\n    // 1. The new version of the package will already use the new API\n    // 2. When the deprecation will become an error (in a future major version), users\n    //    will have to update every package anyway.\n    return;\n  }\n  console.warn(\n    `${prefix}\\`${oldName}\\` has been deprecated, please migrate to \\`${newName}\\`\\n${trace}`,\n  );\n}\n\nfunction captureShortStackTrace(skip: number, length: number) {\n  const { stackTraceLimit, prepareStackTrace } = Error;\n  let stackTrace: NodeJS.CallSite[];\n  // We add 1 to also take into account this function.\n  Error.stackTraceLimit = 1 + skip + length;\n  Error.prepareStackTrace = function (err, stack) {\n    stackTrace = stack;\n  };\n  new Error().stack;\n  Error.stackTraceLimit = stackTraceLimit;\n  Error.prepareStackTrace = prepareStackTrace;\n\n  if (!stackTrace) return { internal: false, trace: \"\" };\n\n  const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);\n  return {\n    internal: /[\\\\/]@babel[\\\\/]/.test(shortStackTrace[1].getFileName()),\n    trace: shortStackTrace.map(frame => `    at ${frame}`).join(\"\\n\"),\n  };\n}\n",null,"export default function isCompatTag(tagName?: string): boolean {\n  // Must start with a lowercase ASCII letter\n  return !!tagName && /^[a-z]/.test(tagName);\n}\n",null,"import {\n  isJSXText,\n  isJSXExpressionContainer,\n  isJSXEmptyExpression,\n} from \"../../validators/generated/index.ts\";\nimport cleanJSXElementLiteralChild from \"../../utils/react/cleanJSXElementLiteralChild.ts\";\nimport type * as t from \"../../index.ts\";\n\ntype ReturnedChild =\n  | t.JSXSpreadChild\n  | t.JSXElement\n  | t.JSXFragment\n  | t.Expression;\n\nexport default function buildChildren(\n  node: t.JSXElement | t.JSXFragment,\n): ReturnedChild[] {\n  const elements = [];\n\n  for (let i = 0; i < node.children.length; i++) {\n    let child: any = node.children[i];\n\n    if (isJSXText(child)) {\n      cleanJSXElementLiteralChild(child, elements);\n      continue;\n    }\n\n    if (isJSXExpressionContainer(child)) child = child.expression;\n    if (isJSXEmptyExpression(child)) continue;\n\n    elements.push(child);\n  }\n\n  return elements;\n}\n",null,"import { stringLiteral } from \"../../builders/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\nimport { inherits } from \"../../index.ts\";\n\nexport default function cleanJSXElementLiteralChild(\n  child: t.JSXText,\n  args: Array<t.Node>,\n) {\n  const lines = child.value.split(/\\r\\n|\\n|\\r/);\n\n  let lastNonEmptyLine = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].match(/[^ \\t]/)) {\n      lastNonEmptyLine = i;\n    }\n  }\n\n  let str = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    const isFirstLine = i === 0;\n    const isLastLine = i === lines.length - 1;\n    const isLastNonEmptyLine = i === lastNonEmptyLine;\n\n    // replace rendered whitespace tabs with spaces\n    let trimmedLine = line.replace(/\\t/g, \" \");\n\n    // trim whitespace touching a newline\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^[ ]+/, \"\");\n    }\n\n    // trim whitespace touching an endline\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/[ ]+$/, \"\");\n    }\n\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += \" \";\n      }\n\n      str += trimmedLine;\n    }\n  }\n\n  if (str) args.push(inherits(stringLiteral(str), child));\n}\n",null,"/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport validateNode from \"../validateNode.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\nexport function arrayExpression(\n  elements: Array<null | t.Expression | t.SpreadElement> = [],\n): t.ArrayExpression {\n  return validateNode<t.ArrayExpression>({\n    type: \"ArrayExpression\",\n    elements,\n  });\n}\nexport function assignmentExpression(\n  operator: string,\n  left: t.LVal | t.OptionalMemberExpression,\n  right: t.Expression,\n): t.AssignmentExpression {\n  return validateNode<t.AssignmentExpression>({\n    type: \"AssignmentExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function binaryExpression(\n  operator:\n    | \"+\"\n    | \"-\"\n    | \"/\"\n    | \"%\"\n    | \"*\"\n    | \"**\"\n    | \"&\"\n    | \"|\"\n    | \">>\"\n    | \">>>\"\n    | \"<<\"\n    | \"^\"\n    | \"==\"\n    | \"===\"\n    | \"!=\"\n    | \"!==\"\n    | \"in\"\n    | \"instanceof\"\n    | \">\"\n    | \"<\"\n    | \">=\"\n    | \"<=\"\n    | \"|>\",\n  left: t.Expression | t.PrivateName,\n  right: t.Expression,\n): t.BinaryExpression {\n  return validateNode<t.BinaryExpression>({\n    type: \"BinaryExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function interpreterDirective(value: string): t.InterpreterDirective {\n  return validateNode<t.InterpreterDirective>({\n    type: \"InterpreterDirective\",\n    value,\n  });\n}\nexport function directive(value: t.DirectiveLiteral): t.Directive {\n  return validateNode<t.Directive>({\n    type: \"Directive\",\n    value,\n  });\n}\nexport function directiveLiteral(value: string): t.DirectiveLiteral {\n  return validateNode<t.DirectiveLiteral>({\n    type: \"DirectiveLiteral\",\n    value,\n  });\n}\nexport function blockStatement(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n): t.BlockStatement {\n  return validateNode<t.BlockStatement>({\n    type: \"BlockStatement\",\n    body,\n    directives,\n  });\n}\nexport function breakStatement(\n  label: t.Identifier | null = null,\n): t.BreakStatement {\n  return validateNode<t.BreakStatement>({\n    type: \"BreakStatement\",\n    label,\n  });\n}\nexport function callExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n): t.CallExpression {\n  return validateNode<t.CallExpression>({\n    type: \"CallExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function catchClause(\n  param:\n    | t.Identifier\n    | t.ArrayPattern\n    | t.ObjectPattern\n    | null\n    | undefined = null,\n  body: t.BlockStatement,\n): t.CatchClause {\n  return validateNode<t.CatchClause>({\n    type: \"CatchClause\",\n    param,\n    body,\n  });\n}\nexport function conditionalExpression(\n  test: t.Expression,\n  consequent: t.Expression,\n  alternate: t.Expression,\n): t.ConditionalExpression {\n  return validateNode<t.ConditionalExpression>({\n    type: \"ConditionalExpression\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function continueStatement(\n  label: t.Identifier | null = null,\n): t.ContinueStatement {\n  return validateNode<t.ContinueStatement>({\n    type: \"ContinueStatement\",\n    label,\n  });\n}\nexport function debuggerStatement(): t.DebuggerStatement {\n  return {\n    type: \"DebuggerStatement\",\n  };\n}\nexport function doWhileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.DoWhileStatement {\n  return validateNode<t.DoWhileStatement>({\n    type: \"DoWhileStatement\",\n    test,\n    body,\n  });\n}\nexport function emptyStatement(): t.EmptyStatement {\n  return {\n    type: \"EmptyStatement\",\n  };\n}\nexport function expressionStatement(\n  expression: t.Expression,\n): t.ExpressionStatement {\n  return validateNode<t.ExpressionStatement>({\n    type: \"ExpressionStatement\",\n    expression,\n  });\n}\nexport function file(\n  program: t.Program,\n  comments: Array<t.CommentBlock | t.CommentLine> | null = null,\n  tokens: Array<any> | null = null,\n): t.File {\n  return validateNode<t.File>({\n    type: \"File\",\n    program,\n    comments,\n    tokens,\n  });\n}\nexport function forInStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n): t.ForInStatement {\n  return validateNode<t.ForInStatement>({\n    type: \"ForInStatement\",\n    left,\n    right,\n    body,\n  });\n}\nexport function forStatement(\n  init: t.VariableDeclaration | t.Expression | null | undefined = null,\n  test: t.Expression | null | undefined = null,\n  update: t.Expression | null | undefined = null,\n  body: t.Statement,\n): t.ForStatement {\n  return validateNode<t.ForStatement>({\n    type: \"ForStatement\",\n    init,\n    test,\n    update,\n    body,\n  });\n}\nexport function functionDeclaration(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionDeclaration {\n  return validateNode<t.FunctionDeclaration>({\n    type: \"FunctionDeclaration\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function functionExpression(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionExpression {\n  return validateNode<t.FunctionExpression>({\n    type: \"FunctionExpression\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function identifier(name: string): t.Identifier {\n  return validateNode<t.Identifier>({\n    type: \"Identifier\",\n    name,\n  });\n}\nexport function ifStatement(\n  test: t.Expression,\n  consequent: t.Statement,\n  alternate: t.Statement | null = null,\n): t.IfStatement {\n  return validateNode<t.IfStatement>({\n    type: \"IfStatement\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function labeledStatement(\n  label: t.Identifier,\n  body: t.Statement,\n): t.LabeledStatement {\n  return validateNode<t.LabeledStatement>({\n    type: \"LabeledStatement\",\n    label,\n    body,\n  });\n}\nexport function stringLiteral(value: string): t.StringLiteral {\n  return validateNode<t.StringLiteral>({\n    type: \"StringLiteral\",\n    value,\n  });\n}\nexport function numericLiteral(value: number): t.NumericLiteral {\n  return validateNode<t.NumericLiteral>({\n    type: \"NumericLiteral\",\n    value,\n  });\n}\nexport function nullLiteral(): t.NullLiteral {\n  return {\n    type: \"NullLiteral\",\n  };\n}\nexport function booleanLiteral(value: boolean): t.BooleanLiteral {\n  return validateNode<t.BooleanLiteral>({\n    type: \"BooleanLiteral\",\n    value,\n  });\n}\nexport function regExpLiteral(\n  pattern: string,\n  flags: string = \"\",\n): t.RegExpLiteral {\n  return validateNode<t.RegExpLiteral>({\n    type: \"RegExpLiteral\",\n    pattern,\n    flags,\n  });\n}\nexport function logicalExpression(\n  operator: \"||\" | \"&&\" | \"??\",\n  left: t.Expression,\n  right: t.Expression,\n): t.LogicalExpression {\n  return validateNode<t.LogicalExpression>({\n    type: \"LogicalExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function memberExpression(\n  object: t.Expression | t.Super,\n  property: t.Expression | t.Identifier | t.PrivateName,\n  computed: boolean = false,\n  optional: true | false | null = null,\n): t.MemberExpression {\n  return validateNode<t.MemberExpression>({\n    type: \"MemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function newExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n): t.NewExpression {\n  return validateNode<t.NewExpression>({\n    type: \"NewExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function program(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n  sourceType: \"script\" | \"module\" = \"script\",\n  interpreter: t.InterpreterDirective | null = null,\n): t.Program {\n  return validateNode<t.Program>({\n    type: \"Program\",\n    body,\n    directives,\n    sourceType,\n    interpreter,\n  });\n}\nexport function objectExpression(\n  properties: Array<t.ObjectMethod | t.ObjectProperty | t.SpreadElement>,\n): t.ObjectExpression {\n  return validateNode<t.ObjectExpression>({\n    type: \"ObjectExpression\",\n    properties,\n  });\n}\nexport function objectMethod(\n  kind: \"method\" | \"get\" | \"set\" | undefined = \"method\",\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ObjectMethod {\n  return validateNode<t.ObjectMethod>({\n    type: \"ObjectMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    generator,\n    async,\n  });\n}\nexport function objectProperty(\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.DecimalLiteral\n    | t.PrivateName,\n  value: t.Expression | t.PatternLike,\n  computed: boolean = false,\n  shorthand: boolean = false,\n  decorators: Array<t.Decorator> | null = null,\n): t.ObjectProperty {\n  return validateNode<t.ObjectProperty>({\n    type: \"ObjectProperty\",\n    key,\n    value,\n    computed,\n    shorthand,\n    decorators,\n  });\n}\nexport function restElement(argument: t.LVal): t.RestElement {\n  return validateNode<t.RestElement>({\n    type: \"RestElement\",\n    argument,\n  });\n}\nexport function returnStatement(\n  argument: t.Expression | null = null,\n): t.ReturnStatement {\n  return validateNode<t.ReturnStatement>({\n    type: \"ReturnStatement\",\n    argument,\n  });\n}\nexport function sequenceExpression(\n  expressions: Array<t.Expression>,\n): t.SequenceExpression {\n  return validateNode<t.SequenceExpression>({\n    type: \"SequenceExpression\",\n    expressions,\n  });\n}\nexport function parenthesizedExpression(\n  expression: t.Expression,\n): t.ParenthesizedExpression {\n  return validateNode<t.ParenthesizedExpression>({\n    type: \"ParenthesizedExpression\",\n    expression,\n  });\n}\nexport function switchCase(\n  test: t.Expression | null | undefined = null,\n  consequent: Array<t.Statement>,\n): t.SwitchCase {\n  return validateNode<t.SwitchCase>({\n    type: \"SwitchCase\",\n    test,\n    consequent,\n  });\n}\nexport function switchStatement(\n  discriminant: t.Expression,\n  cases: Array<t.SwitchCase>,\n): t.SwitchStatement {\n  return validateNode<t.SwitchStatement>({\n    type: \"SwitchStatement\",\n    discriminant,\n    cases,\n  });\n}\nexport function thisExpression(): t.ThisExpression {\n  return {\n    type: \"ThisExpression\",\n  };\n}\nexport function throwStatement(argument: t.Expression): t.ThrowStatement {\n  return validateNode<t.ThrowStatement>({\n    type: \"ThrowStatement\",\n    argument,\n  });\n}\nexport function tryStatement(\n  block: t.BlockStatement,\n  handler: t.CatchClause | null = null,\n  finalizer: t.BlockStatement | null = null,\n): t.TryStatement {\n  return validateNode<t.TryStatement>({\n    type: \"TryStatement\",\n    block,\n    handler,\n    finalizer,\n  });\n}\nexport function unaryExpression(\n  operator: \"void\" | \"throw\" | \"delete\" | \"!\" | \"+\" | \"-\" | \"~\" | \"typeof\",\n  argument: t.Expression,\n  prefix: boolean = true,\n): t.UnaryExpression {\n  return validateNode<t.UnaryExpression>({\n    type: \"UnaryExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function updateExpression(\n  operator: \"++\" | \"--\",\n  argument: t.Expression,\n  prefix: boolean = false,\n): t.UpdateExpression {\n  return validateNode<t.UpdateExpression>({\n    type: \"UpdateExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function variableDeclaration(\n  kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  declarations: Array<t.VariableDeclarator>,\n): t.VariableDeclaration {\n  return validateNode<t.VariableDeclaration>({\n    type: \"VariableDeclaration\",\n    kind,\n    declarations,\n  });\n}\nexport function variableDeclarator(\n  id: t.LVal,\n  init: t.Expression | null = null,\n): t.VariableDeclarator {\n  return validateNode<t.VariableDeclarator>({\n    type: \"VariableDeclarator\",\n    id,\n    init,\n  });\n}\nexport function whileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.WhileStatement {\n  return validateNode<t.WhileStatement>({\n    type: \"WhileStatement\",\n    test,\n    body,\n  });\n}\nexport function withStatement(\n  object: t.Expression,\n  body: t.Statement,\n): t.WithStatement {\n  return validateNode<t.WithStatement>({\n    type: \"WithStatement\",\n    object,\n    body,\n  });\n}\nexport function assignmentPattern(\n  left:\n    | t.Identifier\n    | t.ObjectPattern\n    | t.ArrayPattern\n    | t.MemberExpression\n    | t.TSAsExpression\n    | t.TSSatisfiesExpression\n    | t.TSTypeAssertion\n    | t.TSNonNullExpression,\n  right: t.Expression,\n): t.AssignmentPattern {\n  return validateNode<t.AssignmentPattern>({\n    type: \"AssignmentPattern\",\n    left,\n    right,\n  });\n}\nexport function arrayPattern(\n  elements: Array<null | t.PatternLike | t.LVal>,\n): t.ArrayPattern {\n  return validateNode<t.ArrayPattern>({\n    type: \"ArrayPattern\",\n    elements,\n  });\n}\nexport function arrowFunctionExpression(\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement | t.Expression,\n  async: boolean = false,\n): t.ArrowFunctionExpression {\n  return validateNode<t.ArrowFunctionExpression>({\n    type: \"ArrowFunctionExpression\",\n    params,\n    body,\n    async,\n    expression: null,\n  });\n}\nexport function classBody(\n  body: Array<\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.ClassProperty\n    | t.ClassPrivateProperty\n    | t.ClassAccessorProperty\n    | t.TSDeclareMethod\n    | t.TSIndexSignature\n    | t.StaticBlock\n  >,\n): t.ClassBody {\n  return validateNode<t.ClassBody>({\n    type: \"ClassBody\",\n    body,\n  });\n}\nexport function classExpression(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassExpression {\n  return validateNode<t.ClassExpression>({\n    type: \"ClassExpression\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function classDeclaration(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassDeclaration {\n  return validateNode<t.ClassDeclaration>({\n    type: \"ClassDeclaration\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function exportAllDeclaration(\n  source: t.StringLiteral,\n): t.ExportAllDeclaration {\n  return validateNode<t.ExportAllDeclaration>({\n    type: \"ExportAllDeclaration\",\n    source,\n  });\n}\nexport function exportDefaultDeclaration(\n  declaration:\n    | t.TSDeclareFunction\n    | t.FunctionDeclaration\n    | t.ClassDeclaration\n    | t.Expression,\n): t.ExportDefaultDeclaration {\n  return validateNode<t.ExportDefaultDeclaration>({\n    type: \"ExportDefaultDeclaration\",\n    declaration,\n  });\n}\nexport function exportNamedDeclaration(\n  declaration: t.Declaration | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportDefaultSpecifier | t.ExportNamespaceSpecifier\n  > = [],\n  source: t.StringLiteral | null = null,\n): t.ExportNamedDeclaration {\n  return validateNode<t.ExportNamedDeclaration>({\n    type: \"ExportNamedDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function exportSpecifier(\n  local: t.Identifier,\n  exported: t.Identifier | t.StringLiteral,\n): t.ExportSpecifier {\n  return validateNode<t.ExportSpecifier>({\n    type: \"ExportSpecifier\",\n    local,\n    exported,\n  });\n}\nexport function forOfStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n  _await: boolean = false,\n): t.ForOfStatement {\n  return validateNode<t.ForOfStatement>({\n    type: \"ForOfStatement\",\n    left,\n    right,\n    body,\n    await: _await,\n  });\n}\nexport function importDeclaration(\n  specifiers: Array<\n    t.ImportSpecifier | t.ImportDefaultSpecifier | t.ImportNamespaceSpecifier\n  >,\n  source: t.StringLiteral,\n): t.ImportDeclaration {\n  return validateNode<t.ImportDeclaration>({\n    type: \"ImportDeclaration\",\n    specifiers,\n    source,\n  });\n}\nexport function importDefaultSpecifier(\n  local: t.Identifier,\n): t.ImportDefaultSpecifier {\n  return validateNode<t.ImportDefaultSpecifier>({\n    type: \"ImportDefaultSpecifier\",\n    local,\n  });\n}\nexport function importNamespaceSpecifier(\n  local: t.Identifier,\n): t.ImportNamespaceSpecifier {\n  return validateNode<t.ImportNamespaceSpecifier>({\n    type: \"ImportNamespaceSpecifier\",\n    local,\n  });\n}\nexport function importSpecifier(\n  local: t.Identifier,\n  imported: t.Identifier | t.StringLiteral,\n): t.ImportSpecifier {\n  return validateNode<t.ImportSpecifier>({\n    type: \"ImportSpecifier\",\n    local,\n    imported,\n  });\n}\nexport function importExpression(\n  source: t.Expression,\n  options: t.Expression | null = null,\n): t.ImportExpression {\n  return validateNode<t.ImportExpression>({\n    type: \"ImportExpression\",\n    source,\n    options,\n  });\n}\nexport function metaProperty(\n  meta: t.Identifier,\n  property: t.Identifier,\n): t.MetaProperty {\n  return validateNode<t.MetaProperty>({\n    type: \"MetaProperty\",\n    meta,\n    property,\n  });\n}\nexport function classMethod(\n  kind: \"get\" | \"set\" | \"method\" | \"constructor\" | undefined = \"method\",\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  _static: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ClassMethod {\n  return validateNode<t.ClassMethod>({\n    type: \"ClassMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    static: _static,\n    generator,\n    async,\n  });\n}\nexport function objectPattern(\n  properties: Array<t.RestElement | t.ObjectProperty>,\n): t.ObjectPattern {\n  return validateNode<t.ObjectPattern>({\n    type: \"ObjectPattern\",\n    properties,\n  });\n}\nexport function spreadElement(argument: t.Expression): t.SpreadElement {\n  return validateNode<t.SpreadElement>({\n    type: \"SpreadElement\",\n    argument,\n  });\n}\nfunction _super(): t.Super {\n  return {\n    type: \"Super\",\n  };\n}\nexport { _super as super };\nexport function taggedTemplateExpression(\n  tag: t.Expression,\n  quasi: t.TemplateLiteral,\n): t.TaggedTemplateExpression {\n  return validateNode<t.TaggedTemplateExpression>({\n    type: \"TaggedTemplateExpression\",\n    tag,\n    quasi,\n  });\n}\nexport function templateElement(\n  value: { raw: string; cooked?: string },\n  tail: boolean = false,\n): t.TemplateElement {\n  return validateNode<t.TemplateElement>({\n    type: \"TemplateElement\",\n    value,\n    tail,\n  });\n}\nexport function templateLiteral(\n  quasis: Array<t.TemplateElement>,\n  expressions: Array<t.Expression | t.TSType>,\n): t.TemplateLiteral {\n  return validateNode<t.TemplateLiteral>({\n    type: \"TemplateLiteral\",\n    quasis,\n    expressions,\n  });\n}\nexport function yieldExpression(\n  argument: t.Expression | null = null,\n  delegate: boolean = false,\n): t.YieldExpression {\n  return validateNode<t.YieldExpression>({\n    type: \"YieldExpression\",\n    argument,\n    delegate,\n  });\n}\nexport function awaitExpression(argument: t.Expression): t.AwaitExpression {\n  return validateNode<t.AwaitExpression>({\n    type: \"AwaitExpression\",\n    argument,\n  });\n}\nfunction _import(): t.Import {\n  return {\n    type: \"Import\",\n  };\n}\nexport { _import as import };\nexport function bigIntLiteral(value: string): t.BigIntLiteral {\n  return validateNode<t.BigIntLiteral>({\n    type: \"BigIntLiteral\",\n    value,\n  });\n}\nexport function exportNamespaceSpecifier(\n  exported: t.Identifier,\n): t.ExportNamespaceSpecifier {\n  return validateNode<t.ExportNamespaceSpecifier>({\n    type: \"ExportNamespaceSpecifier\",\n    exported,\n  });\n}\nexport function optionalMemberExpression(\n  object: t.Expression,\n  property: t.Expression | t.Identifier,\n  computed: boolean | undefined = false,\n  optional: boolean,\n): t.OptionalMemberExpression {\n  return validateNode<t.OptionalMemberExpression>({\n    type: \"OptionalMemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function optionalCallExpression(\n  callee: t.Expression,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n  optional: boolean,\n): t.OptionalCallExpression {\n  return validateNode<t.OptionalCallExpression>({\n    type: \"OptionalCallExpression\",\n    callee,\n    arguments: _arguments,\n    optional,\n  });\n}\nexport function classProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassProperty {\n  return validateNode<t.ClassProperty>({\n    type: \"ClassProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classAccessorProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression\n    | t.PrivateName,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassAccessorProperty {\n  return validateNode<t.ClassAccessorProperty>({\n    type: \"ClassAccessorProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classPrivateProperty(\n  key: t.PrivateName,\n  value: t.Expression | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  _static: boolean = false,\n): t.ClassPrivateProperty {\n  return validateNode<t.ClassPrivateProperty>({\n    type: \"ClassPrivateProperty\",\n    key,\n    value,\n    decorators,\n    static: _static,\n  });\n}\nexport function classPrivateMethod(\n  kind: \"get\" | \"set\" | \"method\" | undefined = \"method\",\n  key: t.PrivateName,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  _static: boolean = false,\n): t.ClassPrivateMethod {\n  return validateNode<t.ClassPrivateMethod>({\n    type: \"ClassPrivateMethod\",\n    kind,\n    key,\n    params,\n    body,\n    static: _static,\n  });\n}\nexport function privateName(id: t.Identifier): t.PrivateName {\n  return validateNode<t.PrivateName>({\n    type: \"PrivateName\",\n    id,\n  });\n}\nexport function staticBlock(body: Array<t.Statement>): t.StaticBlock {\n  return validateNode<t.StaticBlock>({\n    type: \"StaticBlock\",\n    body,\n  });\n}\nexport function anyTypeAnnotation(): t.AnyTypeAnnotation {\n  return {\n    type: \"AnyTypeAnnotation\",\n  };\n}\nexport function arrayTypeAnnotation(\n  elementType: t.FlowType,\n): t.ArrayTypeAnnotation {\n  return validateNode<t.ArrayTypeAnnotation>({\n    type: \"ArrayTypeAnnotation\",\n    elementType,\n  });\n}\nexport function booleanTypeAnnotation(): t.BooleanTypeAnnotation {\n  return {\n    type: \"BooleanTypeAnnotation\",\n  };\n}\nexport function booleanLiteralTypeAnnotation(\n  value: boolean,\n): t.BooleanLiteralTypeAnnotation {\n  return validateNode<t.BooleanLiteralTypeAnnotation>({\n    type: \"BooleanLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function nullLiteralTypeAnnotation(): t.NullLiteralTypeAnnotation {\n  return {\n    type: \"NullLiteralTypeAnnotation\",\n  };\n}\nexport function classImplements(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.ClassImplements {\n  return validateNode<t.ClassImplements>({\n    type: \"ClassImplements\",\n    id,\n    typeParameters,\n  });\n}\nexport function declareClass(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareClass {\n  return validateNode<t.DeclareClass>({\n    type: \"DeclareClass\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareFunction(id: t.Identifier): t.DeclareFunction {\n  return validateNode<t.DeclareFunction>({\n    type: \"DeclareFunction\",\n    id,\n  });\n}\nexport function declareInterface(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareInterface {\n  return validateNode<t.DeclareInterface>({\n    type: \"DeclareInterface\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareModule(\n  id: t.Identifier | t.StringLiteral,\n  body: t.BlockStatement,\n  kind: \"CommonJS\" | \"ES\" | null = null,\n): t.DeclareModule {\n  return validateNode<t.DeclareModule>({\n    type: \"DeclareModule\",\n    id,\n    body,\n    kind,\n  });\n}\nexport function declareModuleExports(\n  typeAnnotation: t.TypeAnnotation,\n): t.DeclareModuleExports {\n  return validateNode<t.DeclareModuleExports>({\n    type: \"DeclareModuleExports\",\n    typeAnnotation,\n  });\n}\nexport function declareTypeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.DeclareTypeAlias {\n  return validateNode<t.DeclareTypeAlias>({\n    type: \"DeclareTypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function declareOpaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null = null,\n  supertype: t.FlowType | null = null,\n): t.DeclareOpaqueType {\n  return validateNode<t.DeclareOpaqueType>({\n    type: \"DeclareOpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n  });\n}\nexport function declareVariable(id: t.Identifier): t.DeclareVariable {\n  return validateNode<t.DeclareVariable>({\n    type: \"DeclareVariable\",\n    id,\n  });\n}\nexport function declareExportDeclaration(\n  declaration: t.Flow | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportNamespaceSpecifier\n  > | null = null,\n  source: t.StringLiteral | null = null,\n): t.DeclareExportDeclaration {\n  return validateNode<t.DeclareExportDeclaration>({\n    type: \"DeclareExportDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function declareExportAllDeclaration(\n  source: t.StringLiteral,\n): t.DeclareExportAllDeclaration {\n  return validateNode<t.DeclareExportAllDeclaration>({\n    type: \"DeclareExportAllDeclaration\",\n    source,\n  });\n}\nexport function declaredPredicate(value: t.Flow): t.DeclaredPredicate {\n  return validateNode<t.DeclaredPredicate>({\n    type: \"DeclaredPredicate\",\n    value,\n  });\n}\nexport function existsTypeAnnotation(): t.ExistsTypeAnnotation {\n  return {\n    type: \"ExistsTypeAnnotation\",\n  };\n}\nexport function functionTypeAnnotation(\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  params: Array<t.FunctionTypeParam>,\n  rest: t.FunctionTypeParam | null | undefined = null,\n  returnType: t.FlowType,\n): t.FunctionTypeAnnotation {\n  return validateNode<t.FunctionTypeAnnotation>({\n    type: \"FunctionTypeAnnotation\",\n    typeParameters,\n    params,\n    rest,\n    returnType,\n  });\n}\nexport function functionTypeParam(\n  name: t.Identifier | null | undefined = null,\n  typeAnnotation: t.FlowType,\n): t.FunctionTypeParam {\n  return validateNode<t.FunctionTypeParam>({\n    type: \"FunctionTypeParam\",\n    name,\n    typeAnnotation,\n  });\n}\nexport function genericTypeAnnotation(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.GenericTypeAnnotation {\n  return validateNode<t.GenericTypeAnnotation>({\n    type: \"GenericTypeAnnotation\",\n    id,\n    typeParameters,\n  });\n}\nexport function inferredPredicate(): t.InferredPredicate {\n  return {\n    type: \"InferredPredicate\",\n  };\n}\nexport function interfaceExtends(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.InterfaceExtends {\n  return validateNode<t.InterfaceExtends>({\n    type: \"InterfaceExtends\",\n    id,\n    typeParameters,\n  });\n}\nexport function interfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceDeclaration {\n  return validateNode<t.InterfaceDeclaration>({\n    type: \"InterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function interfaceTypeAnnotation(\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceTypeAnnotation {\n  return validateNode<t.InterfaceTypeAnnotation>({\n    type: \"InterfaceTypeAnnotation\",\n    extends: _extends,\n    body,\n  });\n}\nexport function intersectionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.IntersectionTypeAnnotation {\n  return validateNode<t.IntersectionTypeAnnotation>({\n    type: \"IntersectionTypeAnnotation\",\n    types,\n  });\n}\nexport function mixedTypeAnnotation(): t.MixedTypeAnnotation {\n  return {\n    type: \"MixedTypeAnnotation\",\n  };\n}\nexport function emptyTypeAnnotation(): t.EmptyTypeAnnotation {\n  return {\n    type: \"EmptyTypeAnnotation\",\n  };\n}\nexport function nullableTypeAnnotation(\n  typeAnnotation: t.FlowType,\n): t.NullableTypeAnnotation {\n  return validateNode<t.NullableTypeAnnotation>({\n    type: \"NullableTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function numberLiteralTypeAnnotation(\n  value: number,\n): t.NumberLiteralTypeAnnotation {\n  return validateNode<t.NumberLiteralTypeAnnotation>({\n    type: \"NumberLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function numberTypeAnnotation(): t.NumberTypeAnnotation {\n  return {\n    type: \"NumberTypeAnnotation\",\n  };\n}\nexport function objectTypeAnnotation(\n  properties: Array<t.ObjectTypeProperty | t.ObjectTypeSpreadProperty>,\n  indexers: Array<t.ObjectTypeIndexer> = [],\n  callProperties: Array<t.ObjectTypeCallProperty> = [],\n  internalSlots: Array<t.ObjectTypeInternalSlot> = [],\n  exact: boolean = false,\n): t.ObjectTypeAnnotation {\n  return validateNode<t.ObjectTypeAnnotation>({\n    type: \"ObjectTypeAnnotation\",\n    properties,\n    indexers,\n    callProperties,\n    internalSlots,\n    exact,\n  });\n}\nexport function objectTypeInternalSlot(\n  id: t.Identifier,\n  value: t.FlowType,\n  optional: boolean,\n  _static: boolean,\n  method: boolean,\n): t.ObjectTypeInternalSlot {\n  return validateNode<t.ObjectTypeInternalSlot>({\n    type: \"ObjectTypeInternalSlot\",\n    id,\n    value,\n    optional,\n    static: _static,\n    method,\n  });\n}\nexport function objectTypeCallProperty(\n  value: t.FlowType,\n): t.ObjectTypeCallProperty {\n  return validateNode<t.ObjectTypeCallProperty>({\n    type: \"ObjectTypeCallProperty\",\n    value,\n    static: null,\n  });\n}\nexport function objectTypeIndexer(\n  id: t.Identifier | null | undefined = null,\n  key: t.FlowType,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeIndexer {\n  return validateNode<t.ObjectTypeIndexer>({\n    type: \"ObjectTypeIndexer\",\n    id,\n    key,\n    value,\n    variance,\n    static: null,\n  });\n}\nexport function objectTypeProperty(\n  key: t.Identifier | t.StringLiteral,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeProperty {\n  return validateNode<t.ObjectTypeProperty>({\n    type: \"ObjectTypeProperty\",\n    key,\n    value,\n    variance,\n    kind: null,\n    method: null,\n    optional: null,\n    proto: null,\n    static: null,\n  });\n}\nexport function objectTypeSpreadProperty(\n  argument: t.FlowType,\n): t.ObjectTypeSpreadProperty {\n  return validateNode<t.ObjectTypeSpreadProperty>({\n    type: \"ObjectTypeSpreadProperty\",\n    argument,\n  });\n}\nexport function opaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  supertype: t.FlowType | null | undefined = null,\n  impltype: t.FlowType,\n): t.OpaqueType {\n  return validateNode<t.OpaqueType>({\n    type: \"OpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n    impltype,\n  });\n}\nexport function qualifiedTypeIdentifier(\n  id: t.Identifier,\n  qualification: t.Identifier | t.QualifiedTypeIdentifier,\n): t.QualifiedTypeIdentifier {\n  return validateNode<t.QualifiedTypeIdentifier>({\n    type: \"QualifiedTypeIdentifier\",\n    id,\n    qualification,\n  });\n}\nexport function stringLiteralTypeAnnotation(\n  value: string,\n): t.StringLiteralTypeAnnotation {\n  return validateNode<t.StringLiteralTypeAnnotation>({\n    type: \"StringLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function stringTypeAnnotation(): t.StringTypeAnnotation {\n  return {\n    type: \"StringTypeAnnotation\",\n  };\n}\nexport function symbolTypeAnnotation(): t.SymbolTypeAnnotation {\n  return {\n    type: \"SymbolTypeAnnotation\",\n  };\n}\nexport function thisTypeAnnotation(): t.ThisTypeAnnotation {\n  return {\n    type: \"ThisTypeAnnotation\",\n  };\n}\nexport function tupleTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.TupleTypeAnnotation {\n  return validateNode<t.TupleTypeAnnotation>({\n    type: \"TupleTypeAnnotation\",\n    types,\n  });\n}\nexport function typeofTypeAnnotation(\n  argument: t.FlowType,\n): t.TypeofTypeAnnotation {\n  return validateNode<t.TypeofTypeAnnotation>({\n    type: \"TypeofTypeAnnotation\",\n    argument,\n  });\n}\nexport function typeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.TypeAlias {\n  return validateNode<t.TypeAlias>({\n    type: \"TypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function typeAnnotation(typeAnnotation: t.FlowType): t.TypeAnnotation {\n  return validateNode<t.TypeAnnotation>({\n    type: \"TypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function typeCastExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TypeAnnotation,\n): t.TypeCastExpression {\n  return validateNode<t.TypeCastExpression>({\n    type: \"TypeCastExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport function typeParameter(\n  bound: t.TypeAnnotation | null = null,\n  _default: t.FlowType | null = null,\n  variance: t.Variance | null = null,\n): t.TypeParameter {\n  return validateNode<t.TypeParameter>({\n    type: \"TypeParameter\",\n    bound,\n    default: _default,\n    variance,\n    name: null,\n  });\n}\nexport function typeParameterDeclaration(\n  params: Array<t.TypeParameter>,\n): t.TypeParameterDeclaration {\n  return validateNode<t.TypeParameterDeclaration>({\n    type: \"TypeParameterDeclaration\",\n    params,\n  });\n}\nexport function typeParameterInstantiation(\n  params: Array<t.FlowType>,\n): t.TypeParameterInstantiation {\n  return validateNode<t.TypeParameterInstantiation>({\n    type: \"TypeParameterInstantiation\",\n    params,\n  });\n}\nexport function unionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.UnionTypeAnnotation {\n  return validateNode<t.UnionTypeAnnotation>({\n    type: \"UnionTypeAnnotation\",\n    types,\n  });\n}\nexport function variance(kind: \"minus\" | \"plus\"): t.Variance {\n  return validateNode<t.Variance>({\n    type: \"Variance\",\n    kind,\n  });\n}\nexport function voidTypeAnnotation(): t.VoidTypeAnnotation {\n  return {\n    type: \"VoidTypeAnnotation\",\n  };\n}\nexport function enumDeclaration(\n  id: t.Identifier,\n  body:\n    | t.EnumBooleanBody\n    | t.EnumNumberBody\n    | t.EnumStringBody\n    | t.EnumSymbolBody,\n): t.EnumDeclaration {\n  return validateNode<t.EnumDeclaration>({\n    type: \"EnumDeclaration\",\n    id,\n    body,\n  });\n}\nexport function enumBooleanBody(\n  members: Array<t.EnumBooleanMember>,\n): t.EnumBooleanBody {\n  return validateNode<t.EnumBooleanBody>({\n    type: \"EnumBooleanBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumNumberBody(\n  members: Array<t.EnumNumberMember>,\n): t.EnumNumberBody {\n  return validateNode<t.EnumNumberBody>({\n    type: \"EnumNumberBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumStringBody(\n  members: Array<t.EnumStringMember | t.EnumDefaultedMember>,\n): t.EnumStringBody {\n  return validateNode<t.EnumStringBody>({\n    type: \"EnumStringBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumSymbolBody(\n  members: Array<t.EnumDefaultedMember>,\n): t.EnumSymbolBody {\n  return validateNode<t.EnumSymbolBody>({\n    type: \"EnumSymbolBody\",\n    members,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumBooleanMember(id: t.Identifier): t.EnumBooleanMember {\n  return validateNode<t.EnumBooleanMember>({\n    type: \"EnumBooleanMember\",\n    id,\n    init: null,\n  });\n}\nexport function enumNumberMember(\n  id: t.Identifier,\n  init: t.NumericLiteral,\n): t.EnumNumberMember {\n  return validateNode<t.EnumNumberMember>({\n    type: \"EnumNumberMember\",\n    id,\n    init,\n  });\n}\nexport function enumStringMember(\n  id: t.Identifier,\n  init: t.StringLiteral,\n): t.EnumStringMember {\n  return validateNode<t.EnumStringMember>({\n    type: \"EnumStringMember\",\n    id,\n    init,\n  });\n}\nexport function enumDefaultedMember(id: t.Identifier): t.EnumDefaultedMember {\n  return validateNode<t.EnumDefaultedMember>({\n    type: \"EnumDefaultedMember\",\n    id,\n  });\n}\nexport function indexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.IndexedAccessType {\n  return validateNode<t.IndexedAccessType>({\n    type: \"IndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport function optionalIndexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.OptionalIndexedAccessType {\n  return validateNode<t.OptionalIndexedAccessType>({\n    type: \"OptionalIndexedAccessType\",\n    objectType,\n    indexType,\n    optional: null,\n  });\n}\nexport function jsxAttribute(\n  name: t.JSXIdentifier | t.JSXNamespacedName,\n  value:\n    | t.JSXElement\n    | t.JSXFragment\n    | t.StringLiteral\n    | t.JSXExpressionContainer\n    | null = null,\n): t.JSXAttribute {\n  return validateNode<t.JSXAttribute>({\n    type: \"JSXAttribute\",\n    name,\n    value,\n  });\n}\nexport { jsxAttribute as jSXAttribute };\nexport function jsxClosingElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n): t.JSXClosingElement {\n  return validateNode<t.JSXClosingElement>({\n    type: \"JSXClosingElement\",\n    name,\n  });\n}\nexport { jsxClosingElement as jSXClosingElement };\nexport function jsxElement(\n  openingElement: t.JSXOpeningElement,\n  closingElement: t.JSXClosingElement | null | undefined = null,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n  selfClosing: boolean | null = null,\n): t.JSXElement {\n  return validateNode<t.JSXElement>({\n    type: \"JSXElement\",\n    openingElement,\n    closingElement,\n    children,\n    selfClosing,\n  });\n}\nexport { jsxElement as jSXElement };\nexport function jsxEmptyExpression(): t.JSXEmptyExpression {\n  return {\n    type: \"JSXEmptyExpression\",\n  };\n}\nexport { jsxEmptyExpression as jSXEmptyExpression };\nexport function jsxExpressionContainer(\n  expression: t.Expression | t.JSXEmptyExpression,\n): t.JSXExpressionContainer {\n  return validateNode<t.JSXExpressionContainer>({\n    type: \"JSXExpressionContainer\",\n    expression,\n  });\n}\nexport { jsxExpressionContainer as jSXExpressionContainer };\nexport function jsxSpreadChild(expression: t.Expression): t.JSXSpreadChild {\n  return validateNode<t.JSXSpreadChild>({\n    type: \"JSXSpreadChild\",\n    expression,\n  });\n}\nexport { jsxSpreadChild as jSXSpreadChild };\nexport function jsxIdentifier(name: string): t.JSXIdentifier {\n  return validateNode<t.JSXIdentifier>({\n    type: \"JSXIdentifier\",\n    name,\n  });\n}\nexport { jsxIdentifier as jSXIdentifier };\nexport function jsxMemberExpression(\n  object: t.JSXMemberExpression | t.JSXIdentifier,\n  property: t.JSXIdentifier,\n): t.JSXMemberExpression {\n  return validateNode<t.JSXMemberExpression>({\n    type: \"JSXMemberExpression\",\n    object,\n    property,\n  });\n}\nexport { jsxMemberExpression as jSXMemberExpression };\nexport function jsxNamespacedName(\n  namespace: t.JSXIdentifier,\n  name: t.JSXIdentifier,\n): t.JSXNamespacedName {\n  return validateNode<t.JSXNamespacedName>({\n    type: \"JSXNamespacedName\",\n    namespace,\n    name,\n  });\n}\nexport { jsxNamespacedName as jSXNamespacedName };\nexport function jsxOpeningElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n  attributes: Array<t.JSXAttribute | t.JSXSpreadAttribute>,\n  selfClosing: boolean = false,\n): t.JSXOpeningElement {\n  return validateNode<t.JSXOpeningElement>({\n    type: \"JSXOpeningElement\",\n    name,\n    attributes,\n    selfClosing,\n  });\n}\nexport { jsxOpeningElement as jSXOpeningElement };\nexport function jsxSpreadAttribute(\n  argument: t.Expression,\n): t.JSXSpreadAttribute {\n  return validateNode<t.JSXSpreadAttribute>({\n    type: \"JSXSpreadAttribute\",\n    argument,\n  });\n}\nexport { jsxSpreadAttribute as jSXSpreadAttribute };\nexport function jsxText(value: string): t.JSXText {\n  return validateNode<t.JSXText>({\n    type: \"JSXText\",\n    value,\n  });\n}\nexport { jsxText as jSXText };\nexport function jsxFragment(\n  openingFragment: t.JSXOpeningFragment,\n  closingFragment: t.JSXClosingFragment,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n): t.JSXFragment {\n  return validateNode<t.JSXFragment>({\n    type: \"JSXFragment\",\n    openingFragment,\n    closingFragment,\n    children,\n  });\n}\nexport { jsxFragment as jSXFragment };\nexport function jsxOpeningFragment(): t.JSXOpeningFragment {\n  return {\n    type: \"JSXOpeningFragment\",\n  };\n}\nexport { jsxOpeningFragment as jSXOpeningFragment };\nexport function jsxClosingFragment(): t.JSXClosingFragment {\n  return {\n    type: \"JSXClosingFragment\",\n  };\n}\nexport { jsxClosingFragment as jSXClosingFragment };\nexport function noop(): t.Noop {\n  return {\n    type: \"Noop\",\n  };\n}\nexport function placeholder(\n  expectedNode:\n    | \"Identifier\"\n    | \"StringLiteral\"\n    | \"Expression\"\n    | \"Statement\"\n    | \"Declaration\"\n    | \"BlockStatement\"\n    | \"ClassBody\"\n    | \"Pattern\",\n  name: t.Identifier,\n): t.Placeholder {\n  return validateNode<t.Placeholder>({\n    type: \"Placeholder\",\n    expectedNode,\n    name,\n  });\n}\nexport function v8IntrinsicIdentifier(name: string): t.V8IntrinsicIdentifier {\n  return validateNode<t.V8IntrinsicIdentifier>({\n    type: \"V8IntrinsicIdentifier\",\n    name,\n  });\n}\nexport function argumentPlaceholder(): t.ArgumentPlaceholder {\n  return {\n    type: \"ArgumentPlaceholder\",\n  };\n}\nexport function bindExpression(\n  object: t.Expression,\n  callee: t.Expression,\n): t.BindExpression {\n  return validateNode<t.BindExpression>({\n    type: \"BindExpression\",\n    object,\n    callee,\n  });\n}\nexport function importAttribute(\n  key: t.Identifier | t.StringLiteral,\n  value: t.StringLiteral,\n): t.ImportAttribute {\n  return validateNode<t.ImportAttribute>({\n    type: \"ImportAttribute\",\n    key,\n    value,\n  });\n}\nexport function decorator(expression: t.Expression): t.Decorator {\n  return validateNode<t.Decorator>({\n    type: \"Decorator\",\n    expression,\n  });\n}\nexport function doExpression(\n  body: t.BlockStatement,\n  async: boolean = false,\n): t.DoExpression {\n  return validateNode<t.DoExpression>({\n    type: \"DoExpression\",\n    body,\n    async,\n  });\n}\nexport function exportDefaultSpecifier(\n  exported: t.Identifier,\n): t.ExportDefaultSpecifier {\n  return validateNode<t.ExportDefaultSpecifier>({\n    type: \"ExportDefaultSpecifier\",\n    exported,\n  });\n}\nexport function recordExpression(\n  properties: Array<t.ObjectProperty | t.SpreadElement>,\n): t.RecordExpression {\n  return validateNode<t.RecordExpression>({\n    type: \"RecordExpression\",\n    properties,\n  });\n}\nexport function tupleExpression(\n  elements: Array<t.Expression | t.SpreadElement> = [],\n): t.TupleExpression {\n  return validateNode<t.TupleExpression>({\n    type: \"TupleExpression\",\n    elements,\n  });\n}\nexport function decimalLiteral(value: string): t.DecimalLiteral {\n  return validateNode<t.DecimalLiteral>({\n    type: \"DecimalLiteral\",\n    value,\n  });\n}\nexport function moduleExpression(body: t.Program): t.ModuleExpression {\n  return validateNode<t.ModuleExpression>({\n    type: \"ModuleExpression\",\n    body,\n  });\n}\nexport function topicReference(): t.TopicReference {\n  return {\n    type: \"TopicReference\",\n  };\n}\nexport function pipelineTopicExpression(\n  expression: t.Expression,\n): t.PipelineTopicExpression {\n  return validateNode<t.PipelineTopicExpression>({\n    type: \"PipelineTopicExpression\",\n    expression,\n  });\n}\nexport function pipelineBareFunction(\n  callee: t.Expression,\n): t.PipelineBareFunction {\n  return validateNode<t.PipelineBareFunction>({\n    type: \"PipelineBareFunction\",\n    callee,\n  });\n}\nexport function pipelinePrimaryTopicReference(): t.PipelinePrimaryTopicReference {\n  return {\n    type: \"PipelinePrimaryTopicReference\",\n  };\n}\nexport function tsParameterProperty(\n  parameter: t.Identifier | t.AssignmentPattern,\n): t.TSParameterProperty {\n  return validateNode<t.TSParameterProperty>({\n    type: \"TSParameterProperty\",\n    parameter,\n  });\n}\nexport { tsParameterProperty as tSParameterProperty };\nexport function tsDeclareFunction(\n  id: t.Identifier | null | undefined = null,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareFunction {\n  return validateNode<t.TSDeclareFunction>({\n    type: \"TSDeclareFunction\",\n    id,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareFunction as tSDeclareFunction };\nexport function tsDeclareMethod(\n  decorators: Array<t.Decorator> | null | undefined = null,\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareMethod {\n  return validateNode<t.TSDeclareMethod>({\n    type: \"TSDeclareMethod\",\n    decorators,\n    key,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareMethod as tSDeclareMethod };\nexport function tsQualifiedName(\n  left: t.TSEntityName,\n  right: t.Identifier,\n): t.TSQualifiedName {\n  return validateNode<t.TSQualifiedName>({\n    type: \"TSQualifiedName\",\n    left,\n    right,\n  });\n}\nexport { tsQualifiedName as tSQualifiedName };\nexport function tsCallSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSCallSignatureDeclaration {\n  return validateNode<t.TSCallSignatureDeclaration>({\n    type: \"TSCallSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsCallSignatureDeclaration as tSCallSignatureDeclaration };\nexport function tsConstructSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructSignatureDeclaration {\n  return validateNode<t.TSConstructSignatureDeclaration>({\n    type: \"TSConstructSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructSignatureDeclaration as tSConstructSignatureDeclaration };\nexport function tsPropertySignature(\n  key: t.Expression,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSPropertySignature {\n  return validateNode<t.TSPropertySignature>({\n    type: \"TSPropertySignature\",\n    key,\n    typeAnnotation,\n    kind: null,\n  });\n}\nexport { tsPropertySignature as tSPropertySignature };\nexport function tsMethodSignature(\n  key: t.Expression,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSMethodSignature {\n  return validateNode<t.TSMethodSignature>({\n    type: \"TSMethodSignature\",\n    key,\n    typeParameters,\n    parameters,\n    typeAnnotation,\n    kind: null,\n  });\n}\nexport { tsMethodSignature as tSMethodSignature };\nexport function tsIndexSignature(\n  parameters: Array<t.Identifier>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSIndexSignature {\n  return validateNode<t.TSIndexSignature>({\n    type: \"TSIndexSignature\",\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsIndexSignature as tSIndexSignature };\nexport function tsAnyKeyword(): t.TSAnyKeyword {\n  return {\n    type: \"TSAnyKeyword\",\n  };\n}\nexport { tsAnyKeyword as tSAnyKeyword };\nexport function tsBooleanKeyword(): t.TSBooleanKeyword {\n  return {\n    type: \"TSBooleanKeyword\",\n  };\n}\nexport { tsBooleanKeyword as tSBooleanKeyword };\nexport function tsBigIntKeyword(): t.TSBigIntKeyword {\n  return {\n    type: \"TSBigIntKeyword\",\n  };\n}\nexport { tsBigIntKeyword as tSBigIntKeyword };\nexport function tsIntrinsicKeyword(): t.TSIntrinsicKeyword {\n  return {\n    type: \"TSIntrinsicKeyword\",\n  };\n}\nexport { tsIntrinsicKeyword as tSIntrinsicKeyword };\nexport function tsNeverKeyword(): t.TSNeverKeyword {\n  return {\n    type: \"TSNeverKeyword\",\n  };\n}\nexport { tsNeverKeyword as tSNeverKeyword };\nexport function tsNullKeyword(): t.TSNullKeyword {\n  return {\n    type: \"TSNullKeyword\",\n  };\n}\nexport { tsNullKeyword as tSNullKeyword };\nexport function tsNumberKeyword(): t.TSNumberKeyword {\n  return {\n    type: \"TSNumberKeyword\",\n  };\n}\nexport { tsNumberKeyword as tSNumberKeyword };\nexport function tsObjectKeyword(): t.TSObjectKeyword {\n  return {\n    type: \"TSObjectKeyword\",\n  };\n}\nexport { tsObjectKeyword as tSObjectKeyword };\nexport function tsStringKeyword(): t.TSStringKeyword {\n  return {\n    type: \"TSStringKeyword\",\n  };\n}\nexport { tsStringKeyword as tSStringKeyword };\nexport function tsSymbolKeyword(): t.TSSymbolKeyword {\n  return {\n    type: \"TSSymbolKeyword\",\n  };\n}\nexport { tsSymbolKeyword as tSSymbolKeyword };\nexport function tsUndefinedKeyword(): t.TSUndefinedKeyword {\n  return {\n    type: \"TSUndefinedKeyword\",\n  };\n}\nexport { tsUndefinedKeyword as tSUndefinedKeyword };\nexport function tsUnknownKeyword(): t.TSUnknownKeyword {\n  return {\n    type: \"TSUnknownKeyword\",\n  };\n}\nexport { tsUnknownKeyword as tSUnknownKeyword };\nexport function tsVoidKeyword(): t.TSVoidKeyword {\n  return {\n    type: \"TSVoidKeyword\",\n  };\n}\nexport { tsVoidKeyword as tSVoidKeyword };\nexport function tsThisType(): t.TSThisType {\n  return {\n    type: \"TSThisType\",\n  };\n}\nexport { tsThisType as tSThisType };\nexport function tsFunctionType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSFunctionType {\n  return validateNode<t.TSFunctionType>({\n    type: \"TSFunctionType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsFunctionType as tSFunctionType };\nexport function tsConstructorType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructorType {\n  return validateNode<t.TSConstructorType>({\n    type: \"TSConstructorType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructorType as tSConstructorType };\nexport function tsTypeReference(\n  typeName: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeReference {\n  return validateNode<t.TSTypeReference>({\n    type: \"TSTypeReference\",\n    typeName,\n    typeParameters,\n  });\n}\nexport { tsTypeReference as tSTypeReference };\nexport function tsTypePredicate(\n  parameterName: t.Identifier | t.TSThisType,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n  asserts: boolean | null = null,\n): t.TSTypePredicate {\n  return validateNode<t.TSTypePredicate>({\n    type: \"TSTypePredicate\",\n    parameterName,\n    typeAnnotation,\n    asserts,\n  });\n}\nexport { tsTypePredicate as tSTypePredicate };\nexport function tsTypeQuery(\n  exprName: t.TSEntityName | t.TSImportType,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeQuery {\n  return validateNode<t.TSTypeQuery>({\n    type: \"TSTypeQuery\",\n    exprName,\n    typeParameters,\n  });\n}\nexport { tsTypeQuery as tSTypeQuery };\nexport function tsTypeLiteral(\n  members: Array<t.TSTypeElement>,\n): t.TSTypeLiteral {\n  return validateNode<t.TSTypeLiteral>({\n    type: \"TSTypeLiteral\",\n    members,\n  });\n}\nexport { tsTypeLiteral as tSTypeLiteral };\nexport function tsArrayType(elementType: t.TSType): t.TSArrayType {\n  return validateNode<t.TSArrayType>({\n    type: \"TSArrayType\",\n    elementType,\n  });\n}\nexport { tsArrayType as tSArrayType };\nexport function tsTupleType(\n  elementTypes: Array<t.TSType | t.TSNamedTupleMember>,\n): t.TSTupleType {\n  return validateNode<t.TSTupleType>({\n    type: \"TSTupleType\",\n    elementTypes,\n  });\n}\nexport { tsTupleType as tSTupleType };\nexport function tsOptionalType(typeAnnotation: t.TSType): t.TSOptionalType {\n  return validateNode<t.TSOptionalType>({\n    type: \"TSOptionalType\",\n    typeAnnotation,\n  });\n}\nexport { tsOptionalType as tSOptionalType };\nexport function tsRestType(typeAnnotation: t.TSType): t.TSRestType {\n  return validateNode<t.TSRestType>({\n    type: \"TSRestType\",\n    typeAnnotation,\n  });\n}\nexport { tsRestType as tSRestType };\nexport function tsNamedTupleMember(\n  label: t.Identifier,\n  elementType: t.TSType,\n  optional: boolean = false,\n): t.TSNamedTupleMember {\n  return validateNode<t.TSNamedTupleMember>({\n    type: \"TSNamedTupleMember\",\n    label,\n    elementType,\n    optional,\n  });\n}\nexport { tsNamedTupleMember as tSNamedTupleMember };\nexport function tsUnionType(types: Array<t.TSType>): t.TSUnionType {\n  return validateNode<t.TSUnionType>({\n    type: \"TSUnionType\",\n    types,\n  });\n}\nexport { tsUnionType as tSUnionType };\nexport function tsIntersectionType(\n  types: Array<t.TSType>,\n): t.TSIntersectionType {\n  return validateNode<t.TSIntersectionType>({\n    type: \"TSIntersectionType\",\n    types,\n  });\n}\nexport { tsIntersectionType as tSIntersectionType };\nexport function tsConditionalType(\n  checkType: t.TSType,\n  extendsType: t.TSType,\n  trueType: t.TSType,\n  falseType: t.TSType,\n): t.TSConditionalType {\n  return validateNode<t.TSConditionalType>({\n    type: \"TSConditionalType\",\n    checkType,\n    extendsType,\n    trueType,\n    falseType,\n  });\n}\nexport { tsConditionalType as tSConditionalType };\nexport function tsInferType(typeParameter: t.TSTypeParameter): t.TSInferType {\n  return validateNode<t.TSInferType>({\n    type: \"TSInferType\",\n    typeParameter,\n  });\n}\nexport { tsInferType as tSInferType };\nexport function tsParenthesizedType(\n  typeAnnotation: t.TSType,\n): t.TSParenthesizedType {\n  return validateNode<t.TSParenthesizedType>({\n    type: \"TSParenthesizedType\",\n    typeAnnotation,\n  });\n}\nexport { tsParenthesizedType as tSParenthesizedType };\nexport function tsTypeOperator(typeAnnotation: t.TSType): t.TSTypeOperator {\n  return validateNode<t.TSTypeOperator>({\n    type: \"TSTypeOperator\",\n    typeAnnotation,\n    operator: null,\n  });\n}\nexport { tsTypeOperator as tSTypeOperator };\nexport function tsIndexedAccessType(\n  objectType: t.TSType,\n  indexType: t.TSType,\n): t.TSIndexedAccessType {\n  return validateNode<t.TSIndexedAccessType>({\n    type: \"TSIndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport { tsIndexedAccessType as tSIndexedAccessType };\nexport function tsMappedType(\n  typeParameter: t.TSTypeParameter,\n  typeAnnotation: t.TSType | null = null,\n  nameType: t.TSType | null = null,\n): t.TSMappedType {\n  return validateNode<t.TSMappedType>({\n    type: \"TSMappedType\",\n    typeParameter,\n    typeAnnotation,\n    nameType,\n  });\n}\nexport { tsMappedType as tSMappedType };\nexport function tsLiteralType(\n  literal:\n    | t.NumericLiteral\n    | t.StringLiteral\n    | t.BooleanLiteral\n    | t.BigIntLiteral\n    | t.TemplateLiteral\n    | t.UnaryExpression,\n): t.TSLiteralType {\n  return validateNode<t.TSLiteralType>({\n    type: \"TSLiteralType\",\n    literal,\n  });\n}\nexport { tsLiteralType as tSLiteralType };\nexport function tsExpressionWithTypeArguments(\n  expression: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSExpressionWithTypeArguments {\n  return validateNode<t.TSExpressionWithTypeArguments>({\n    type: \"TSExpressionWithTypeArguments\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsExpressionWithTypeArguments as tSExpressionWithTypeArguments };\nexport function tsInterfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.TSExpressionWithTypeArguments> | null | undefined = null,\n  body: t.TSInterfaceBody,\n): t.TSInterfaceDeclaration {\n  return validateNode<t.TSInterfaceDeclaration>({\n    type: \"TSInterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport { tsInterfaceDeclaration as tSInterfaceDeclaration };\nexport function tsInterfaceBody(\n  body: Array<t.TSTypeElement>,\n): t.TSInterfaceBody {\n  return validateNode<t.TSInterfaceBody>({\n    type: \"TSInterfaceBody\",\n    body,\n  });\n}\nexport { tsInterfaceBody as tSInterfaceBody };\nexport function tsTypeAliasDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  typeAnnotation: t.TSType,\n): t.TSTypeAliasDeclaration {\n  return validateNode<t.TSTypeAliasDeclaration>({\n    type: \"TSTypeAliasDeclaration\",\n    id,\n    typeParameters,\n    typeAnnotation,\n  });\n}\nexport { tsTypeAliasDeclaration as tSTypeAliasDeclaration };\nexport function tsInstantiationExpression(\n  expression: t.Expression,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSInstantiationExpression {\n  return validateNode<t.TSInstantiationExpression>({\n    type: \"TSInstantiationExpression\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsInstantiationExpression as tSInstantiationExpression };\nexport function tsAsExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSAsExpression {\n  return validateNode<t.TSAsExpression>({\n    type: \"TSAsExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsAsExpression as tSAsExpression };\nexport function tsSatisfiesExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSSatisfiesExpression {\n  return validateNode<t.TSSatisfiesExpression>({\n    type: \"TSSatisfiesExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsSatisfiesExpression as tSSatisfiesExpression };\nexport function tsTypeAssertion(\n  typeAnnotation: t.TSType,\n  expression: t.Expression,\n): t.TSTypeAssertion {\n  return validateNode<t.TSTypeAssertion>({\n    type: \"TSTypeAssertion\",\n    typeAnnotation,\n    expression,\n  });\n}\nexport { tsTypeAssertion as tSTypeAssertion };\nexport function tsEnumDeclaration(\n  id: t.Identifier,\n  members: Array<t.TSEnumMember>,\n): t.TSEnumDeclaration {\n  return validateNode<t.TSEnumDeclaration>({\n    type: \"TSEnumDeclaration\",\n    id,\n    members,\n  });\n}\nexport { tsEnumDeclaration as tSEnumDeclaration };\nexport function tsEnumMember(\n  id: t.Identifier | t.StringLiteral,\n  initializer: t.Expression | null = null,\n): t.TSEnumMember {\n  return validateNode<t.TSEnumMember>({\n    type: \"TSEnumMember\",\n    id,\n    initializer,\n  });\n}\nexport { tsEnumMember as tSEnumMember };\nexport function tsModuleDeclaration(\n  id: t.Identifier | t.StringLiteral,\n  body: t.TSModuleBlock | t.TSModuleDeclaration,\n): t.TSModuleDeclaration {\n  return validateNode<t.TSModuleDeclaration>({\n    type: \"TSModuleDeclaration\",\n    id,\n    body,\n  });\n}\nexport { tsModuleDeclaration as tSModuleDeclaration };\nexport function tsModuleBlock(body: Array<t.Statement>): t.TSModuleBlock {\n  return validateNode<t.TSModuleBlock>({\n    type: \"TSModuleBlock\",\n    body,\n  });\n}\nexport { tsModuleBlock as tSModuleBlock };\nexport function tsImportType(\n  argument: t.StringLiteral,\n  qualifier: t.TSEntityName | null = null,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSImportType {\n  return validateNode<t.TSImportType>({\n    type: \"TSImportType\",\n    argument,\n    qualifier,\n    typeParameters,\n  });\n}\nexport { tsImportType as tSImportType };\nexport function tsImportEqualsDeclaration(\n  id: t.Identifier,\n  moduleReference: t.TSEntityName | t.TSExternalModuleReference,\n): t.TSImportEqualsDeclaration {\n  return validateNode<t.TSImportEqualsDeclaration>({\n    type: \"TSImportEqualsDeclaration\",\n    id,\n    moduleReference,\n    isExport: null,\n  });\n}\nexport { tsImportEqualsDeclaration as tSImportEqualsDeclaration };\nexport function tsExternalModuleReference(\n  expression: t.StringLiteral,\n): t.TSExternalModuleReference {\n  return validateNode<t.TSExternalModuleReference>({\n    type: \"TSExternalModuleReference\",\n    expression,\n  });\n}\nexport { tsExternalModuleReference as tSExternalModuleReference };\nexport function tsNonNullExpression(\n  expression: t.Expression,\n): t.TSNonNullExpression {\n  return validateNode<t.TSNonNullExpression>({\n    type: \"TSNonNullExpression\",\n    expression,\n  });\n}\nexport { tsNonNullExpression as tSNonNullExpression };\nexport function tsExportAssignment(\n  expression: t.Expression,\n): t.TSExportAssignment {\n  return validateNode<t.TSExportAssignment>({\n    type: \"TSExportAssignment\",\n    expression,\n  });\n}\nexport { tsExportAssignment as tSExportAssignment };\nexport function tsNamespaceExportDeclaration(\n  id: t.Identifier,\n): t.TSNamespaceExportDeclaration {\n  return validateNode<t.TSNamespaceExportDeclaration>({\n    type: \"TSNamespaceExportDeclaration\",\n    id,\n  });\n}\nexport { tsNamespaceExportDeclaration as tSNamespaceExportDeclaration };\nexport function tsTypeAnnotation(typeAnnotation: t.TSType): t.TSTypeAnnotation {\n  return validateNode<t.TSTypeAnnotation>({\n    type: \"TSTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport { tsTypeAnnotation as tSTypeAnnotation };\nexport function tsTypeParameterInstantiation(\n  params: Array<t.TSType>,\n): t.TSTypeParameterInstantiation {\n  return validateNode<t.TSTypeParameterInstantiation>({\n    type: \"TSTypeParameterInstantiation\",\n    params,\n  });\n}\nexport { tsTypeParameterInstantiation as tSTypeParameterInstantiation };\nexport function tsTypeParameterDeclaration(\n  params: Array<t.TSTypeParameter>,\n): t.TSTypeParameterDeclaration {\n  return validateNode<t.TSTypeParameterDeclaration>({\n    type: \"TSTypeParameterDeclaration\",\n    params,\n  });\n}\nexport { tsTypeParameterDeclaration as tSTypeParameterDeclaration };\nexport function tsTypeParameter(\n  constraint: t.TSType | null | undefined = null,\n  _default: t.TSType | null | undefined = null,\n  name: string,\n): t.TSTypeParameter {\n  return validateNode<t.TSTypeParameter>({\n    type: \"TSTypeParameter\",\n    constraint,\n    default: _default,\n    name,\n  });\n}\nexport { tsTypeParameter as tSTypeParameter };\n/** @deprecated */\nfunction NumberLiteral(value: number) {\n  deprecationWarning(\"NumberLiteral\", \"NumericLiteral\", \"The node type \");\n  return numericLiteral(value);\n}\nexport { NumberLiteral as numberLiteral };\n/** @deprecated */\nfunction RegexLiteral(pattern: string, flags: string = \"\") {\n  deprecationWarning(\"RegexLiteral\", \"RegExpLiteral\", \"The node type \");\n  return regExpLiteral(pattern, flags);\n}\nexport { RegexLiteral as regexLiteral };\n/** @deprecated */\nfunction RestProperty(argument: t.LVal) {\n  deprecationWarning(\"RestProperty\", \"RestElement\", \"The node type \");\n  return restElement(argument);\n}\nexport { RestProperty as restProperty };\n/** @deprecated */\nfunction SpreadProperty(argument: t.Expression) {\n  deprecationWarning(\"SpreadProperty\", \"SpreadElement\", \"The node type \");\n  return spreadElement(argument);\n}\nexport { SpreadProperty as spreadProperty };\n",null,"import validate from \"../validators/validate.ts\";\nimport type * as t from \"../index.ts\";\nimport { BUILDER_KEYS } from \"../index.ts\";\n\nexport default function validateNode<N extends t.Node>(node: N) {\n  // todo: because keys not in BUILDER_KEYS are not validated - this actually allows invalid nodes in some cases\n  const keys = BUILDER_KEYS[node.type] as (keyof N & string)[];\n  for (const key of keys) {\n    validate(node, key, node[key]);\n  }\n  return node;\n}\n",null,"import {\n  NODE_FIELDS,\n  NODE_PARENT_VALIDATIONS,\n  type FieldOptions,\n} from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function validate(\n  node: t.Node | undefined | null,\n  key: string,\n  val: any,\n): void {\n  if (!node) return;\n\n  const fields = NODE_FIELDS[node.type];\n  if (!fields) return;\n\n  const field = fields[key];\n  validateField(node, key, val, field);\n  validateChild(node, key, val);\n}\n\nexport function validateField(\n  node: t.Node | undefined | null,\n  key: string,\n  val: any,\n  field: FieldOptions | undefined | null,\n): void {\n  if (!field?.validate) return;\n  if (field.optional && val == null) return;\n\n  field.validate(node, key, val);\n}\n\nexport function validateChild(\n  node: t.Node | undefined | null,\n  key: string,\n  val?: t.Node | undefined | null,\n) {\n  if (val == null) return;\n  const validate = NODE_PARENT_VALIDATIONS[val.type];\n  if (!validate) return;\n  validate(node, key, val);\n}\n",null,"import toFastProperties from \"to-fast-properties\";\nimport \"./core.ts\";\nimport \"./flow.ts\";\nimport \"./jsx.ts\";\nimport \"./misc.ts\";\nimport \"./experimental.ts\";\nimport \"./typescript.ts\";\nimport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n} from \"./utils.ts\";\nimport {\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n} from \"./placeholders.ts\";\nimport { DEPRECATED_ALIASES } from \"./deprecated-aliases.ts\";\n\n(\n  Object.keys(DEPRECATED_ALIASES) as (keyof typeof DEPRECATED_ALIASES)[]\n).forEach(deprecatedAlias => {\n  FLIPPED_ALIAS_KEYS[deprecatedAlias] =\n    FLIPPED_ALIAS_KEYS[DEPRECATED_ALIASES[deprecatedAlias]];\n});\n\n// We do this here, because at this point the visitor keys should be ready and setup\ntoFastProperties(VISITOR_KEYS);\ntoFastProperties(ALIAS_KEYS);\ntoFastProperties(FLIPPED_ALIAS_KEYS);\ntoFastProperties(NODE_FIELDS);\ntoFastProperties(BUILDER_KEYS);\ntoFastProperties(DEPRECATED_KEYS);\n\ntoFastProperties(PLACEHOLDERS_ALIAS);\ntoFastProperties(PLACEHOLDERS_FLIPPED_ALIAS);\n\nconst TYPES: Array<string> = [].concat(\n  Object.keys(VISITOR_KEYS),\n  Object.keys(FLIPPED_ALIAS_KEYS),\n  Object.keys(DEPRECATED_KEYS),\n);\n\nexport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_ALIASES,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n  TYPES,\n};\n\nexport type { FieldOptions } from \"./utils.ts\";\n","'use strict';\n\nlet fastProto = null;\n\n// Creates an object with permanently fast properties in V8. See Toon Verwaest's\n// post https://medium.com/@tverwaes/setting-up-prototypes-in-v8-ec9c9491dfe2#5f62\n// for more details. Use %HasFastProperties(object) and the Node.js flag\n// --allow-natives-syntax to check whether an object has fast properties.\nfunction FastObject(o) {\n\t// A prototype object will have \"fast properties\" enabled once it is checked\n\t// against the inline property cache of a function, e.g. fastProto.property:\n\t// https://github.com/v8/v8/blob/6.0.122/test/mjsunit/fast-prototype.js#L48-L63\n\tif (fastProto !== null && typeof fastProto.property) {\n\t\tconst result = fastProto;\n\t\tfastProto = FastObject.prototype = null;\n\t\treturn result;\n\t}\n\tfastProto = FastObject.prototype = o == null ? Object.create(null) : o;\n\treturn new FastObject;\n}\n\n// Initialize the inline property cache of FastObject\nFastObject();\n\nmodule.exports = function toFastproperties(o) {\n\treturn FastObject(o);\n};\n",null,"import is from \"../validators/is.ts\";\nimport isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isKeyword, isReservedWord } from \"@babel/helper-validator-identifier\";\nimport type * as t from \"../index.ts\";\nimport { readStringContents } from \"@babel/helper-string-parser\";\n\nimport {\n  BINARY_OPERATORS,\n  LOGICAL_OPERATORS,\n  ASSIGNMENT_OPERATORS,\n  UNARY_OPERATORS,\n  UPDATE_OPERATORS,\n} from \"../constants/index.ts\";\n\nimport {\n  defineAliasedType,\n  assertShape,\n  assertOptionalChainStart,\n  assertValueType,\n  assertNodeType,\n  assertNodeOrValueType,\n  assertEach,\n  chain,\n  assertOneOf,\n  validateOptional,\n  type Validator,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Standardized\");\n\ndefineType(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeOrValueType(\"null\", \"Expression\", \"SpreadElement\"),\n        ),\n      ),\n      default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined,\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertValueType(\"string\");\n        }\n\n        const identifier = assertOneOf(...ASSIGNMENT_OPERATORS);\n        const pattern = assertOneOf(\"=\");\n\n        return function (node: t.AssignmentExpression, key, val) {\n          const validator = is(\"Pattern\", node.left) ? pattern : identifier;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\", \"OptionalMemberExpression\")\n        : assertNodeType(\n            \"Identifier\",\n            \"MemberExpression\",\n            \"OptionalMemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...BINARY_OPERATORS),\n    },\n    left: {\n      validate: (function () {\n        const expression = assertNodeType(\"Expression\");\n        const inOp = assertNodeType(\"Expression\", \"PrivateName\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.BinaryExpression, key, val) {\n            const validator = node.operator === \"in\" ? inOp : expression;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `operator` property\n          { oneOfNodeTypes: [\"Expression\", \"PrivateName\"] },\n        );\n        return validator;\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n});\n\ndefineType(\"InterpreterDirective\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: assertNodeType(\"DirectiveLiteral\"),\n    },\n  },\n});\n\ndefineType(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"],\n});\n\ndefineType(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\", \"Super\", \"V8IntrinsicIdentifier\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            \"SpreadElement\",\n            \"JSXNamespacedName\",\n            \"ArgumentPlaceholder\",\n          ),\n        ),\n      ),\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: assertNodeType(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\"],\n});\n\ndefineType(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    alternate: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\", \"Conditional\"],\n});\n\ndefineType(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"DebuggerStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n});\n\ndefineType(\"EmptyStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"],\n});\n\ndefineType(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: assertNodeType(\"Program\"),\n    },\n    comments: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? Object.assign(() => {}, {\n            each: { oneOfNodeTypes: [\"CommentBlock\", \"CommentLine\"] },\n          })\n        : assertEach(assertNodeType(\"CommentBlock\", \"CommentLine\")),\n      optional: true,\n    },\n    tokens: {\n      // todo(ts): add Token type\n      validate: assertEach(Object.assign(() => {}, { type: \"any\" })),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"VariableDeclaration\", \"LVal\")\n        : assertNodeType(\n            \"VariableDeclaration\",\n            \"Identifier\",\n            \"MemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: assertNodeType(\"VariableDeclaration\", \"Expression\"),\n      optional: true,\n    },\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    update: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\nexport const functionCommon = () => ({\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Identifier\", \"Pattern\", \"RestElement\")),\n    ),\n  },\n  generator: {\n    default: false,\n  },\n  async: {\n    default: false,\n  },\n});\n\nexport const functionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\")\n      : assertNodeType(\n          \"TypeParameterDeclaration\",\n          \"TSTypeParameterDeclaration\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n});\n\nexport const functionDeclarationCommon = () => ({\n  ...functionCommon(),\n  declare: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  id: {\n    validate: assertNodeType(\"Identifier\"),\n    optional: true, // May be null for `export default function`\n  },\n});\n\ndefineType(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Statement\",\n    \"Pureish\",\n    \"Declaration\",\n  ],\n  validate: (function () {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return () => {};\n\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\nexport const patternLikeCommon = () => ({\n  typeAnnotation: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\", \"decorators\" /* for legacy param decorators */],\n  aliases: [\"Expression\", \"PatternLike\", \"LVal\", \"TSEntityName\"],\n  fields: {\n    ...patternLikeCommon(),\n    name: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (!isValidIdentifier(val, false)) {\n              throw new TypeError(`\"${val}\" is not a valid identifier name`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /\\.(\\w+)$/.exec(key);\n    if (!match) return;\n\n    const [, parentKey] = match;\n    const nonComp = { computed: false };\n\n    // We can't check if `parent.property === node`, because nodes are validated\n    // before replacing them in the AST.\n    if (parentKey === \"property\") {\n      if (is(\"MemberExpression\", parent, nonComp)) return;\n      if (is(\"OptionalMemberExpression\", parent, nonComp)) return;\n    } else if (parentKey === \"key\") {\n      if (is(\"Property\", parent, nonComp)) return;\n      if (is(\"Method\", parent, nonComp)) return;\n    } else if (parentKey === \"exported\") {\n      if (is(\"ExportSpecifier\", parent)) return;\n    } else if (parentKey === \"imported\") {\n      if (is(\"ImportSpecifier\", parent, { imported: node })) return;\n    } else if (parentKey === \"meta\") {\n      if (is(\"MetaProperty\", parent, { meta: node })) return;\n    }\n\n    if (\n      // Ideally we should call isStrictReservedWord if this node is a descendant\n      // of a block in strict mode. Also, we should pass the inModule option so\n      // we can disable \"await\" in module.\n      (isKeyword(node.name) || isReservedWord(node.name, false)) &&\n      // Even if \"this\" is a keyword, we are using the Identifier\n      // node to represent it.\n      node.name !== \"this\"\n    ) {\n      throw new TypeError(`\"${node.name}\" is not a valid identifier`);\n    }\n  },\n});\n\ndefineType(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    alternate: {\n      optional: true,\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: chain(\n        assertValueType(\"number\"),\n        Object.assign(\n          function (node, key, val) {\n            if (1 / val < 0 || !Number.isFinite(val)) {\n              const error = new Error(\n                \"NumericLiterals must be non-negative finite numbers. \" +\n                  `You can use t.valueToNode(${val}) instead.`,\n              );\n              if (process.env.BABEL_8_BREAKING) {\n                // TODO(@nicolo-ribaudo) Fix regenerator to not pass negative\n                // numbers here.\n                if (!IS_STANDALONE) {\n                  if (!new Error().stack.includes(\"regenerator\")) {\n                    throw error;\n                  }\n                }\n              } else {\n                // TODO: Enable this warning once regenerator is fixed.\n                // https://github.com/facebook/regenerator/pull/680\n                // console.warn(error);\n              }\n            }\n          } satisfies Validator,\n          { type: \"number\" },\n        ),\n      ),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"boolean\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Pureish\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: assertValueType(\"string\"),\n    },\n    flags: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            const invalid = /[^gimsuy]/.exec(val);\n            if (invalid) {\n              throw new TypeError(`\"${invalid[0]}\" is not a valid RegExp flag`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n      default: \"\",\n    },\n  },\n});\n\ndefineType(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...LOGICAL_OPERATORS),\n    },\n    left: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"MemberExpression\", {\n  builder: [\n    \"object\",\n    \"property\",\n    \"computed\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"optional\"] : []),\n  ],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\", \"Super\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\", \"PrivateName\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (\n          node: t.MemberExpression,\n          key,\n          val,\n        ) {\n          const validator: Validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\"Expression\", \"Identifier\", \"PrivateName\"];\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n  },\n});\n\ndefineType(\"NewExpression\", { inherits: \"CallExpression\" });\n\ndefineType(\"Program\", {\n  // Note: We explicitly leave 'interpreter' out here because it is\n  // conceptually comment-like, and Babel does not traverse comments either.\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\n  fields: {\n    sourceType: {\n      validate: assertOneOf(\"script\", \"module\"),\n      default: \"script\",\n    },\n    interpreter: {\n      validate: assertNodeType(\"InterpreterDirective\"),\n      default: null,\n      optional: true,\n    },\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"],\n});\n\ndefineType(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"ObjectMethod\", \"ObjectProperty\", \"SpreadElement\"),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"generator\", \"async\"],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n      ...(!process.env.BABEL_TYPES_8_BREAKING ? { default: \"method\" } : {}),\n    },\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (node: t.ObjectMethod, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\n          \"Expression\",\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        ];\n        return validator;\n      })(),\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"UserWhitespacable\",\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"ObjectMember\",\n  ],\n});\n\ndefineType(\"ObjectProperty\", {\n  builder: [\n    \"key\",\n    \"value\",\n    \"computed\",\n    \"shorthand\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"decorators\"] : []),\n  ],\n  fields: {\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"DecimalLiteral\",\n          \"PrivateName\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          {\n            // todo(ts): can be discriminated union by `computed` property\n            oneOfNodeTypes: [\n              \"Expression\",\n              \"Identifier\",\n              \"StringLiteral\",\n              \"NumericLiteral\",\n              \"BigIntLiteral\",\n              \"DecimalLiteral\",\n              \"PrivateName\",\n            ],\n          },\n        );\n        return validator;\n      })(),\n    },\n    value: {\n      // Value may be PatternLike if this is an AssignmentProperty\n      // https://github.com/babel/babylon/issues/434\n      validate: assertNodeType(\"Expression\", \"PatternLike\"),\n    },\n    shorthand: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && node.computed) {\n              throw new TypeError(\n                \"Property shorthand of ObjectProperty cannot be true if computed is true\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n        function (node: t.ObjectProperty, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          if (val && !is(\"Identifier\", node.key)) {\n            throw new TypeError(\n              \"Property shorthand of ObjectProperty cannot be true if key is not an Identifier\",\n            );\n          }\n        } as Validator,\n      ),\n      default: false,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"],\n  validate: (function () {\n    const pattern = assertNodeType(\n      \"Identifier\",\n      \"Pattern\",\n      \"TSAsExpression\",\n      \"TSSatisfiesExpression\",\n      \"TSNonNullExpression\",\n      \"TSTypeAssertion\",\n    );\n    const expression = assertNodeType(\"Expression\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      const validator = is(\"ObjectPattern\", parent) ? pattern : expression;\n      validator(node, \"value\", node.value);\n    };\n  })(),\n});\n\ndefineType(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  builder: [\"argument\"],\n  aliases: [\"LVal\", \"PatternLike\"],\n  deprecatedAlias: \"RestProperty\",\n  fields: {\n    ...patternLikeCommon(),\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\")\n        : assertNodeType(\n            \"Identifier\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"MemberExpression\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n  },\n  validate(parent: t.ArrayPattern | t.ObjectPattern, key) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /(\\w+)\\[(\\d+)\\]/.exec(key);\n    if (!match) throw new Error(\"Internal Babel error: malformed key.\");\n\n    const [, listKey, index] = match as unknown as [\n      string,\n      keyof typeof parent,\n      string,\n    ];\n    if ((parent[listKey] as t.Node[]).length > +index + 1) {\n      throw new TypeError(`RestElement must be last element of ${listKey}`);\n    }\n  },\n});\n\ndefineType(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\")),\n      ),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ParenthesizedExpression\", {\n  visitor: [\"expression\"],\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    consequent: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    cases: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"SwitchCase\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ThisExpression\", {\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    block: {\n      validate: chain(\n        assertNodeType(\"BlockStatement\"),\n        Object.assign(\n          function (node: t.TryStatement) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (!node.handler && !node.finalizer) {\n              throw new TypeError(\n                \"TryStatement expects either a handler or finalizer, or both\",\n              );\n            }\n          } as Validator,\n          {\n            oneOfNodeTypes: [\"BlockStatement\"],\n          },\n        ),\n      ),\n    },\n    handler: {\n      optional: true,\n      validate: assertNodeType(\"CatchClause\"),\n    },\n    finalizer: {\n      optional: true,\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true,\n    },\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UNARY_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"],\n});\n\ndefineType(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false,\n    },\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"Expression\")\n        : assertNodeType(\"Identifier\", \"MemberExpression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UPDATE_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    kind: {\n      validate: assertOneOf(\n        \"var\",\n        \"let\",\n        \"const\",\n        // https://github.com/tc39/proposal-explicit-resource-management\n        \"using\",\n        // https://github.com/tc39/proposal-async-explicit-resource-management\n        \"await using\",\n      ),\n    },\n    declarations: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"VariableDeclarator\")),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    if (!is(\"ForXStatement\", parent, { left: node })) return;\n    if (node.declarations.length !== 1) {\n      throw new TypeError(\n        `Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`,\n      );\n    }\n  },\n});\n\ndefineType(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"LVal\");\n        }\n\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n        );\n        const without = assertNodeType(\"Identifier\");\n\n        return function (node: t.VariableDeclarator, key, val) {\n          const validator = node.init ? normal : without;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    definite: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    init: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\n// --- ES2015 ---\ndefineType(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\" /* for legacy param decorators */],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    left: {\n      validate: assertNodeType(\n        \"Identifier\",\n        \"ObjectPattern\",\n        \"ArrayPattern\",\n        \"MemberExpression\",\n        \"TSAsExpression\",\n        \"TSSatisfiesExpression\",\n        \"TSTypeAssertion\",\n        \"TSNonNullExpression\",\n      ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    // For TypeScript\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeOrValueType(\"null\", \"PatternLike\", \"LVal\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\", \"typeParameters\"],\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    expression: {\n      // https://github.com/babel/babylon/issues/505\n      validate: assertValueType(\"boolean\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\", \"Expression\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ClassMethod\",\n            \"ClassPrivateMethod\",\n            \"ClassProperty\",\n            \"ClassPrivateProperty\",\n            \"ClassAccessorProperty\",\n            \"TSDeclareMethod\",\n            \"TSIndexSignature\",\n            \"StaticBlock\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ClassExpression\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\n    \"id\",\n    \"body\",\n    \"superClass\",\n    \"mixins\",\n    \"typeParameters\",\n    \"superTypeParameters\",\n    \"implements\",\n    \"decorators\",\n  ],\n  aliases: [\"Scopable\", \"Class\", \"Expression\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassDeclaration\", {\n  inherits: \"ClassExpression\",\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      // The id may be omitted if this is the child of an\n      // ExportDefaultDeclaration.\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    abstract: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n  validate: (function () {\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"ExportAllDeclaration\", {\n  builder: [\"source\"],\n  visitor: [\"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      validate: assertNodeType(\n        \"TSDeclareFunction\",\n        \"FunctionDeclaration\",\n        \"ClassDeclaration\",\n        \"Expression\",\n      ),\n    },\n    exportKind: validateOptional(assertOneOf(\"value\")),\n  },\n});\n\ndefineType(\"ExportNamedDeclaration\", {\n  builder: [\"declaration\", \"specifiers\", \"source\"],\n  visitor: [\"declaration\", \"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      optional: true,\n      validate: chain(\n        assertNodeType(\"Declaration\"),\n        Object.assign(\n          function (node: t.ExportNamedDeclaration, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (val && node.specifiers.length) {\n              throw new TypeError(\n                \"Only declaration or specifiers is allowed on ExportNamedDeclaration\",\n              );\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Declaration\"] },\n        ),\n        function (node: t.ExportNamedDeclaration, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          // This validator isn't put at the top level because we can run it\n          // even if this node doesn't have a parent.\n\n          if (val && node.source) {\n            throw new TypeError(\"Cannot export a declaration from a source\");\n          }\n        },\n      ),\n    },\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    specifiers: {\n      default: [],\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          (function () {\n            const sourced = assertNodeType(\n              \"ExportSpecifier\",\n              \"ExportDefaultSpecifier\",\n              \"ExportNamespaceSpecifier\",\n            );\n            const sourceless = assertNodeType(\"ExportSpecifier\");\n\n            if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;\n\n            return function (node: t.ExportNamedDeclaration, key, val) {\n              const validator = node.source ? sourced : sourceless;\n              validator(node, key, val);\n            } as Validator;\n          })(),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n      optional: true,\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    exported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    exportKind: {\n      // And TypeScript's \"export { type foo } from\"\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  builder: [\"left\", \"right\", \"body\", \"await\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"VariableDeclaration\", \"LVal\");\n        }\n\n        const declaration = assertNodeType(\"VariableDeclaration\");\n        const lval = assertNodeType(\n          \"Identifier\",\n          \"MemberExpression\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n          \"TSAsExpression\",\n          \"TSSatisfiesExpression\",\n          \"TSTypeAssertion\",\n          \"TSNonNullExpression\",\n        );\n\n        return function (node, key, val) {\n          if (is(\"VariableDeclaration\", val)) {\n            declaration(node, key, val);\n          } else {\n            lval(node, key, val);\n          }\n        };\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    await: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ImportDeclaration\", {\n  builder: [\"specifiers\", \"source\"],\n  visitor: [\"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\"],\n  fields: {\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    module: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    specifiers: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ImportSpecifier\",\n            \"ImportDefaultSpecifier\",\n            \"ImportNamespaceSpecifier\",\n          ),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    importKind: {\n      // Handle TypeScript/Flowtype's extension \"import type foo from\"\n      // TypeScript doesn't support typeof\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    imported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    importKind: {\n      // Handle Flowtype's extension \"import {typeof foo} from\"\n      // And TypeScript's \"import { type foo } from\"\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportExpression\", {\n  visitor: [\"source\", \"options\"],\n  aliases: [\"Expression\"],\n  fields: {\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    source: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    options: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate: chain(\n        assertNodeType(\"Identifier\"),\n        Object.assign(\n          function (node: t.MetaProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            let property;\n            switch (val.name) {\n              case \"function\":\n                property = \"sent\";\n                break;\n              case \"new\":\n                property = \"target\";\n                break;\n              case \"import\":\n                property = \"meta\";\n                break;\n            }\n            if (!is(\"Identifier\", node.property, { name: property })) {\n              throw new TypeError(\"Unrecognised MetaProperty\");\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Identifier\"] },\n        ),\n      ),\n    },\n    property: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\nexport const classMethodOrPropertyCommon = () => ({\n  abstract: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  accessibility: {\n    validate: assertOneOf(\"public\", \"private\", \"protected\"),\n    optional: true,\n  },\n  static: {\n    default: false,\n  },\n  override: {\n    default: false,\n  },\n  computed: {\n    default: false,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  key: {\n    validate: chain(\n      (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        return function (node: any, key: string, val: any) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n      assertNodeType(\n        \"Identifier\",\n        \"StringLiteral\",\n        \"NumericLiteral\",\n        \"BigIntLiteral\",\n        \"Expression\",\n      ),\n    ),\n  },\n});\n\nexport const classMethodOrDeclareMethodCommon = () => ({\n  ...functionCommon(),\n  ...classMethodOrPropertyCommon(),\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(\n        assertNodeType(\n          \"Identifier\",\n          \"Pattern\",\n          \"RestElement\",\n          \"TSParameterProperty\",\n        ),\n      ),\n    ),\n  },\n  kind: {\n    validate: assertOneOf(\"get\", \"set\", \"method\", \"constructor\"),\n    default: \"method\",\n  },\n  access: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"public\", \"private\", \"protected\"),\n    ),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\n    \"kind\",\n    \"key\",\n    \"params\",\n    \"body\",\n    \"computed\",\n    \"static\",\n    \"generator\",\n    \"async\",\n  ],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"ObjectPattern\", {\n  visitor: [\n    \"properties\",\n    \"typeAnnotation\",\n    \"decorators\" /* for legacy param decorators */,\n  ],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"RestElement\", \"ObjectProperty\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\n  \"Super\",\n  process.env.BABEL_8_BREAKING\n    ? undefined\n    : {\n        aliases: [\"Expression\"],\n      },\n);\n\ndefineType(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\", \"typeParameters\"],\n  builder: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    quasi: {\n      validate: assertNodeType(\"TemplateLiteral\"),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: chain(\n        assertShape({\n          raw: {\n            validate: assertValueType(\"string\"),\n          },\n          cooked: {\n            validate: assertValueType(\"string\"),\n            optional: true,\n          },\n        }),\n        function templateElementCookedValidator(node: t.TemplateElement) {\n          const raw = node.value.raw;\n\n          let unterminatedCalled = false;\n\n          const error = () => {\n            // unreachable\n            throw new Error(\"Internal @babel/types error.\");\n          };\n          const { str, firstInvalidLoc } = readStringContents(\n            \"template\",\n            raw,\n            0,\n            0,\n            0,\n            {\n              unterminated() {\n                unterminatedCalled = true;\n              },\n              strictNumericEscape: error,\n              invalidEscapeSequence: error,\n              numericSeparatorInEscapeSequence: error,\n              unexpectedNumericSeparator: error,\n              invalidDigit: error,\n              invalidCodePoint: error,\n            },\n          );\n          if (!unterminatedCalled) throw new Error(\"Invalid raw\");\n\n          node.value.cooked = firstInvalidLoc ? null : str;\n        },\n      ),\n    },\n    tail: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TemplateElement\")),\n      ),\n    },\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            // For TypeScript template literal types\n            \"TSType\",\n          ),\n        ),\n        function (node: t.TemplateLiteral, key, val) {\n          if (node.quasis.length !== val.length + 1) {\n            throw new TypeError(\n              `Number of ${\n                node.type\n              } quasis should be exactly one more than the number of expressions.\\nExpected ${\n                val.length + 1\n              } quasis but got ${node.quasis.length}`,\n            );\n          }\n        } as Validator,\n      ),\n    },\n  },\n});\n\ndefineType(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.YieldExpression, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && !node.argument) {\n              throw new TypeError(\n                \"Property delegate of YieldExpression cannot be true if there is no argument\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n      ),\n      default: false,\n    },\n    argument: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2017 ---\ndefineType(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2019 ---\ndefineType(\"Import\", {\n  aliases: [\"Expression\"],\n});\n\n// --- ES2020 ---\ndefineType(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.OptionalMemberExpression, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `computed` property\n          { oneOfNodeTypes: [\"Expression\", \"Identifier\"] },\n        );\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n  },\n});\n\ndefineType(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            \"SpreadElement\",\n            \"JSXNamespacedName\",\n            \"ArgumentPlaceholder\",\n          ),\n        ),\n      ),\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\n// --- ES2022 ---\ndefineType(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassAccessorProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\", \"Accessor\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    key: {\n      validate: chain(\n        (function () {\n          const normal = assertNodeType(\n            \"Identifier\",\n            \"StringLiteral\",\n            \"NumericLiteral\",\n            \"BigIntLiteral\",\n            \"PrivateName\",\n          );\n          const computed = assertNodeType(\"Expression\");\n\n          return function (node: any, key: string, val: any) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          };\n        })(),\n        assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"Expression\",\n          \"PrivateName\",\n        ),\n      ),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\", \"decorators\", \"typeAnnotation\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    static: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"Private\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\", \"method\"),\n      default: \"method\",\n    },\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"FunctionParent\"],\n});\n",null,"import shallowEqual from \"../utils/shallowEqual.ts\";\nimport isType from \"./isType.ts\";\nimport isPlaceholderType from \"./isPlaceholderType.ts\";\nimport { FLIPPED_ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function is<T extends t.Node[\"type\"]>(\n  type: T,\n  node: t.Node | null | undefined,\n  opts?: undefined,\n): node is Extract<t.Node, { type: T }>;\n\nexport default function is<\n  T extends t.Node[\"type\"],\n  P extends Extract<t.Node, { type: T }>,\n>(type: T, n: t.Node | null | undefined, required: Partial<P>): n is P;\n\nexport default function is<P extends t.Node>(\n  type: string,\n  node: t.Node | null | undefined,\n  opts: Partial<P>,\n): node is P;\n\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node;\n/**\n * Returns whether `node` is of given `type`.\n *\n * For better performance, use this instead of `is[Type]` when `type` is unknown.\n */\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node {\n  if (!node) return false;\n\n  const matches = isType(node.type, type);\n  if (!matches) {\n    if (!opts && node.type === \"Placeholder\" && type in FLIPPED_ALIAS_KEYS) {\n      // We can only return true if the placeholder doesn't replace a real node,\n      // but it replaces a category of nodes (an alias).\n      //\n      // t.is(\"Identifier\", node) gives some guarantees about node's shape, so we\n      // can't say that Placeholder(expectedNode: \"Identifier\") is an identifier\n      // because it doesn't have the same properties.\n      // On the other hand, t.is(\"Expression\", node) doesn't say anything about\n      // the shape of node because Expression can be many different nodes: we can,\n      // and should, safely report expression placeholders as Expressions.\n      return isPlaceholderType(node.expectedNode, type);\n    }\n    return false;\n  }\n\n  if (typeof opts === \"undefined\") {\n    return true;\n  } else {\n    return shallowEqual(node, opts);\n  }\n}\n",null,"import { FLIPPED_ALIAS_KEYS, ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isType<T extends t.Node[\"type\"]>(\n  nodeType: string,\n  targetType: T,\n): nodeType is T;\n\nexport default function isType(\n  nodeType: string | null | undefined,\n  targetType: string,\n): boolean;\n\n/**\n * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.\n */\nexport default function isType(nodeType: string, targetType: string): boolean {\n  if (nodeType === targetType) return true;\n\n  // If nodeType is nullish, it can't be an alias of targetType.\n  if (nodeType == null) return false;\n\n  // This is a fast-path. If the test above failed, but an alias key is found, then the\n  // targetType was a primary node type, so there's no need to check the aliases.\n  // @ts-expect-error targetType may not index ALIAS_KEYS\n  if (ALIAS_KEYS[targetType]) return false;\n\n  const aliases: Array<string> | undefined = FLIPPED_ALIAS_KEYS[targetType];\n  if (aliases) {\n    if (aliases[0] === nodeType) return true;\n\n    for (const alias of aliases) {\n      if (nodeType === alias) return true;\n    }\n  }\n\n  return false;\n}\n",null,"import { PLACEHOLDERS_ALIAS } from \"../definitions/index.ts\";\n\n/**\n * Test if a `placeholderType` is a `targetType` or if `targetType` is an alias of `placeholderType`.\n */\nexport default function isPlaceholderType(\n  placeholderType: string,\n  targetType: string,\n): boolean {\n  if (placeholderType === targetType) return true;\n\n  const aliases: Array<string> | undefined =\n    PLACEHOLDERS_ALIAS[placeholderType];\n  if (aliases) {\n    for (const alias of aliases) {\n      if (targetType === alias) return true;\n    }\n  }\n\n  return false;\n}\n",null,"import {\n  isIdentifierName,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\n/**\n * Check if the input `name` is a valid identifier name\n * and isn't a reserved word.\n */\nexport default function isValidIdentifier(\n  name: string,\n  reserved: boolean = true,\n): boolean {\n  if (typeof name !== \"string\") return false;\n\n  if (reserved) {\n    // \"await\" is invalid in module, valid in script; better be safe (see #4952)\n    if (isKeyword(name) || isStrictReservedWord(name, true)) {\n      return false;\n    }\n  }\n\n  return isIdentifierName(name);\n}\n",null,"export {\n  isIdentifierName,\n  isIdentifierChar,\n  isIdentifierStart,\n} from \"./identifier.ts\";\nexport {\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"./keyword.ts\";\n",null,"import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n",null,"const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n",null,"import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n",null,"export const STATEMENT_OR_BLOCK_KEYS = [\"consequent\", \"body\", \"alternate\"];\nexport const FLATTENABLE_KEYS = [\"body\", \"expressions\"];\nexport const FOR_INIT_KEYS = [\"left\", \"init\"];\nexport const COMMENT_KEYS = [\n  \"leadingComments\",\n  \"trailingComments\",\n  \"innerComments\",\n] as const;\n\nexport const LOGICAL_OPERATORS = [\"||\", \"&&\", \"??\"];\nexport const UPDATE_OPERATORS = [\"++\", \"--\"];\n\nexport const BOOLEAN_NUMBER_BINARY_OPERATORS = [\">\", \"<\", \">=\", \"<=\"];\nexport const EQUALITY_BINARY_OPERATORS = [\"==\", \"===\", \"!=\", \"!==\"];\nexport const COMPARISON_BINARY_OPERATORS = [\n  ...EQUALITY_BINARY_OPERATORS,\n  \"in\",\n  \"instanceof\",\n];\nexport const BOOLEAN_BINARY_OPERATORS = [\n  ...COMPARISON_BINARY_OPERATORS,\n  ...BOOLEAN_NUMBER_BINARY_OPERATORS,\n];\nexport const NUMBER_BINARY_OPERATORS = [\n  \"-\",\n  \"/\",\n  \"%\",\n  \"*\",\n  \"**\",\n  \"&\",\n  \"|\",\n  \">>\",\n  \">>>\",\n  \"<<\",\n  \"^\",\n];\nexport const BINARY_OPERATORS = [\n  \"+\",\n  ...NUMBER_BINARY_OPERATORS,\n  ...BOOLEAN_BINARY_OPERATORS,\n  \"|>\",\n];\n\nexport const ASSIGNMENT_OPERATORS = [\n  \"=\",\n  \"+=\",\n  ...NUMBER_BINARY_OPERATORS.map(op => op + \"=\"),\n  ...LOGICAL_OPERATORS.map(op => op + \"=\"),\n];\n\nexport const BOOLEAN_UNARY_OPERATORS = [\"delete\", \"!\"];\nexport const NUMBER_UNARY_OPERATORS = [\"+\", \"-\", \"~\"];\nexport const STRING_UNARY_OPERATORS = [\"typeof\"];\nexport const UNARY_OPERATORS = [\n  \"void\",\n  \"throw\",\n  ...BOOLEAN_UNARY_OPERATORS,\n  ...NUMBER_UNARY_OPERATORS,\n  ...STRING_UNARY_OPERATORS,\n];\n\nexport const INHERIT_KEYS = {\n  optional: [\"typeAnnotation\", \"typeParameters\", \"returnType\"],\n  force: [\"start\", \"loc\", \"end\"],\n} as const;\n\nexport const BLOCK_SCOPED_SYMBOL = Symbol.for(\"var used to be block scoped\");\nexport const NOT_LOCAL_BINDING = Symbol.for(\n  \"should not be considered a local binding\",\n);\n",null,"import is from \"../validators/is.ts\";\nimport { validateField, validateChild } from \"../validators/validate.ts\";\nimport type * as t from \"../index.ts\";\n\nexport const VISITOR_KEYS: Record<string, string[]> = {};\nexport const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>> =\n  {};\nexport const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]> = {};\nexport const NODE_FIELDS: Record<string, FieldDefinitions> = {};\nexport const BUILDER_KEYS: Record<string, string[]> = {};\nexport const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment> = {};\nexport const NODE_PARENT_VALIDATIONS: Record<string, Validator> = {};\n\nfunction getType(val: any) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\ntype NodeTypesWithoutComment = t.Node[\"type\"] | keyof t.Aliases;\n\ntype NodeTypes = NodeTypesWithoutComment | t.Comment[\"type\"];\n\ntype PrimitiveTypes = ReturnType<typeof getType>;\n\ntype FieldDefinitions = {\n  [x: string]: FieldOptions;\n};\n\ntype DefineTypeOpts = {\n  fields?: FieldDefinitions;\n  visitor?: Array<string>;\n  aliases?: Array<string>;\n  builder?: Array<string>;\n  inherits?: NodeTypes;\n  deprecatedAlias?: string;\n  validate?: Validator;\n};\n\nexport type Validator = (\n  | { type: PrimitiveTypes }\n  | { each: Validator }\n  | { chainOf: Validator[] }\n  | { oneOf: any[] }\n  | { oneOfNodeTypes: NodeTypes[] }\n  | { oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[] }\n  | { shapeOf: { [x: string]: FieldOptions } }\n  | {}\n) &\n  ((node: t.Node, key: string, val: any) => void);\n\nexport type FieldOptions = {\n  default?: string | number | boolean | [];\n  optional?: boolean;\n  deprecated?: boolean;\n  validate?: Validator;\n};\n\nexport function validate(validate: Validator): FieldOptions {\n  return { validate };\n}\n\nexport function typeIs(typeName: NodeTypes | NodeTypes[]) {\n  return typeof typeName === \"string\"\n    ? assertNodeType(typeName)\n    : assertNodeType(...typeName);\n}\n\nexport function validateType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(typeIs(typeName));\n}\n\nexport function validateOptional(validate: Validator): FieldOptions {\n  return { validate, optional: true };\n}\n\nexport function validateOptionalType(\n  typeName: NodeTypes | NodeTypes[],\n): FieldOptions {\n  return { validate: typeIs(typeName), optional: true };\n}\n\nexport function arrayOf(elementType: Validator): Validator {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nexport function arrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return arrayOf(typeIs(typeName));\n}\n\nexport function validateArrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(arrayOfType(typeName));\n}\n\nexport function assertEach(callback: Validator): Validator {\n  function validator(node: t.Node, key: string, val: any) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) validateChild(node, subkey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\n\nexport function assertOneOf(...values: Array<any>): Validator {\n  function validate(node: any, key: string, val: any) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(\n        `Property ${key} expected value to be one of ${JSON.stringify(\n          values,\n        )} but got ${JSON.stringify(val)}`,\n      );\n    }\n  }\n\n  validate.oneOf = values;\n\n  return validate;\n}\n\nexport function assertNodeType(...types: NodeTypes[]): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeTypes = types;\n\n  return validate;\n}\n\nexport function assertNodeOrValueType(\n  ...types: (NodeTypes | PrimitiveTypes)[]\n): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (getType(val) === type || is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n\n  return validate;\n}\n\nexport function assertValueType(type: PrimitiveTypes): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(\n        `Property ${key} expected type of ${type} but got ${getType(val)}`,\n      );\n    }\n  }\n\n  validate.type = type;\n\n  return validate;\n}\n\nexport function assertShape(shape: { [x: string]: FieldOptions }): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const errors = [];\n    for (const property of Object.keys(shape)) {\n      try {\n        validateField(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(\n        `Property ${key} of ${\n          node.type\n        } expected to have the following:\\n${errors.join(\"\\n\")}`,\n      );\n    }\n  }\n\n  validate.shapeOf = shape;\n\n  return validate;\n}\n\nexport function assertOptionalChainStart(): Validator {\n  function validate(node: t.Node) {\n    let current = node;\n    while (node) {\n      const { type } = current;\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n\n      break;\n    }\n\n    throw new TypeError(\n      `Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${current?.type}`,\n    );\n  }\n\n  return validate;\n}\n\nexport function chain(...fns: Array<Validator>): Validator {\n  function validate(...args: Parameters<Validator>) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n  validate.chainOf = fns;\n\n  if (\n    fns.length >= 2 &&\n    \"type\" in fns[0] &&\n    fns[0].type === \"array\" &&\n    !(\"each\" in fns[1])\n  ) {\n    throw new Error(\n      `An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`,\n    );\n  }\n\n  return validate;\n}\n\nconst validTypeOpts = [\n  \"aliases\",\n  \"builder\",\n  \"deprecatedAlias\",\n  \"fields\",\n  \"inherits\",\n  \"visitor\",\n  \"validate\",\n];\nconst validFieldKeys = [\"default\", \"optional\", \"deprecated\", \"validate\"];\n\nconst store = {} as Record<string, DefineTypeOpts>;\n\n// Wraps defineType to ensure these aliases are included.\nexport function defineAliasedType(...aliases: string[]) {\n  return (type: string, opts: DefineTypeOpts = {}) => {\n    let defined = opts.aliases;\n    if (!defined) {\n      if (opts.inherits) defined = store[opts.inherits].aliases?.slice();\n      defined ??= [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    defineType(type, opts);\n  };\n}\n\nexport default function defineType(type: string, opts: DefineTypeOpts = {}) {\n  const inherits = (opts.inherits && store[opts.inherits]) || {};\n\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (\n          Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\"\n        ) {\n          throw new Error(\n            \"field defaults can only be primitives or empty arrays currently\",\n          );\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          deprecated: field.deprecated,\n          validate: field.validate,\n        };\n      }\n    }\n  }\n\n  const visitor: Array<string> = opts.visitor || inherits.visitor || [];\n  const aliases: Array<string> = opts.aliases || inherits.aliases || [];\n  const builder: Array<string> =\n    opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type as NodeTypesWithoutComment;\n  }\n\n  // ensure all field keys are represented in `fields`\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type as NodeTypesWithoutComment] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type as NodeTypesWithoutComment);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n",null,"import {\n  defineAliasedType,\n  arrayOfType,\n  assertOneOf,\n  assertValueType,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Flow\");\n\nconst defineInterfaceishType = (\n  name: \"DeclareClass\" | \"DeclareInterface\" | \"InterfaceDeclaration\",\n) => {\n  const isDeclareClass = name === \"DeclareClass\";\n\n  defineType(name, {\n    builder: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n    visitor: [\n      \"id\",\n      \"typeParameters\",\n      \"extends\",\n      ...(isDeclareClass ? [\"mixins\", \"implements\"] : []),\n      \"body\",\n    ],\n    aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n    fields: {\n      id: validateType(\"Identifier\"),\n      typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n      extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      ...(isDeclareClass\n        ? {\n            mixins: validateOptional(arrayOfType(\"InterfaceExtends\")),\n            implements: validateOptional(arrayOfType(\"ClassImplements\")),\n          }\n        : {}),\n      body: validateType(\"ObjectTypeAnnotation\"),\n    },\n  });\n};\n\ndefineType(\"AnyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ArrayTypeAnnotation\", {\n  visitor: [\"elementType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    elementType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"BooleanTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"BooleanLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"NullLiteralTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ClassImplements\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareClass\");\n\ndefineType(\"DeclareFunction\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    predicate: validateOptionalType(\"DeclaredPredicate\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareInterface\");\n\ndefineType(\"DeclareModule\", {\n  builder: [\"id\", \"body\", \"kind\"],\n  visitor: [\"id\", \"body\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType(\"BlockStatement\"),\n    kind: validateOptional(assertOneOf(\"CommonJS\", \"ES\")),\n  },\n});\n\ndefineType(\"DeclareModuleExports\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"DeclareTypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareOpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateOptionalType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareVariable\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"DeclareExportDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    declaration: validateOptionalType(\"Flow\"),\n    specifiers: validateOptional(\n      arrayOfType([\"ExportSpecifier\", \"ExportNamespaceSpecifier\"]),\n    ),\n    source: validateOptionalType(\"StringLiteral\"),\n    default: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"DeclareExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    source: validateType(\"StringLiteral\"),\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"DeclaredPredicate\", {\n  visitor: [\"value\"],\n  aliases: [\"FlowPredicate\"],\n  fields: {\n    value: validateType(\"Flow\"),\n  },\n});\n\ndefineType(\"ExistsTypeAnnotation\", {\n  aliases: [\"FlowType\"],\n});\n\ndefineType(\"FunctionTypeAnnotation\", {\n  visitor: [\"typeParameters\", \"params\", \"rest\", \"returnType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    params: validate(arrayOfType(\"FunctionTypeParam\")),\n    rest: validateOptionalType(\"FunctionTypeParam\"),\n    this: validateOptionalType(\"FunctionTypeParam\"),\n    returnType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"FunctionTypeParam\", {\n  visitor: [\"name\", \"typeAnnotation\"],\n  fields: {\n    name: validateOptionalType(\"Identifier\"),\n    typeAnnotation: validateType(\"FlowType\"),\n    optional: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"GenericTypeAnnotation\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"InferredPredicate\", {\n  aliases: [\"FlowPredicate\"],\n});\n\ndefineType(\"InterfaceExtends\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"InterfaceDeclaration\");\n\ndefineType(\"InterfaceTypeAnnotation\", {\n  visitor: [\"extends\", \"body\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n    body: validateType(\"ObjectTypeAnnotation\"),\n  },\n});\n\ndefineType(\"IntersectionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"MixedTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"EmptyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"NullableTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"NumberLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"number\")),\n  },\n});\n\ndefineType(\"NumberTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ObjectTypeAnnotation\", {\n  visitor: [\"properties\", \"indexers\", \"callProperties\", \"internalSlots\"],\n  aliases: [\"FlowType\"],\n  builder: [\n    \"properties\",\n    \"indexers\",\n    \"callProperties\",\n    \"internalSlots\",\n    \"exact\",\n  ],\n  fields: {\n    properties: validate(\n      arrayOfType([\"ObjectTypeProperty\", \"ObjectTypeSpreadProperty\"]),\n    ),\n    indexers: {\n      validate: arrayOfType(\"ObjectTypeIndexer\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    callProperties: {\n      validate: arrayOfType(\"ObjectTypeCallProperty\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    internalSlots: {\n      validate: arrayOfType(\"ObjectTypeInternalSlot\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    exact: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    // If the inexact flag is present then this is an object type, and not a\n    // declare class, declare interface, or interface. If it is true, the\n    // object uses ... to express that it is inexact.\n    inexact: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeInternalSlot\", {\n  visitor: [\"id\", \"value\", \"optional\", \"static\", \"method\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    value: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n    static: validate(assertValueType(\"boolean\")),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeCallProperty\", {\n  visitor: [\"value\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeIndexer\", {\n  visitor: [\"id\", \"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateOptionalType(\"Identifier\"),\n    key: validateType(\"FlowType\"),\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"ObjectTypeProperty\", {\n  visitor: [\"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    key: validateType([\"Identifier\", \"StringLiteral\"]),\n    value: validateType(\"FlowType\"),\n    kind: validate(assertOneOf(\"init\", \"get\", \"set\")),\n    static: validate(assertValueType(\"boolean\")),\n    proto: validate(assertValueType(\"boolean\")),\n    optional: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeSpreadProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\", \"impltype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"QualifiedTypeIdentifier\", {\n  visitor: [\"id\", \"qualification\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    qualification: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n  },\n});\n\ndefineType(\"StringLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"string\")),\n  },\n});\n\ndefineType(\"StringTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"SymbolTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ThisTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"TupleTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"TypeofTypeAnnotation\", {\n  visitor: [\"argument\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeCastExpression\", {\n  visitor: [\"expression\", \"typeAnnotation\"],\n  aliases: [\"ExpressionWrapper\", \"Expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"TypeParameter\", {\n  visitor: [\"bound\", \"default\", \"variance\"],\n  fields: {\n    name: validate(assertValueType(\"string\")),\n    bound: validateOptionalType(\"TypeAnnotation\"),\n    default: validateOptionalType(\"FlowType\"),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"TypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"TypeParameter\")),\n  },\n});\n\ndefineType(\"TypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"UnionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"Variance\", {\n  builder: [\"kind\"],\n  fields: {\n    kind: validate(assertOneOf(\"minus\", \"plus\")),\n  },\n});\n\ndefineType(\"VoidTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\n// Enums\ndefineType(\"EnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    body: validateType([\n      \"EnumBooleanBody\",\n      \"EnumNumberBody\",\n      \"EnumStringBody\",\n      \"EnumSymbolBody\",\n    ]),\n  },\n});\n\ndefineType(\"EnumBooleanBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumBooleanMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumNumberBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumNumberMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumStringBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType([\"EnumStringMember\", \"EnumDefaultedMember\"]),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumSymbolBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"EnumDefaultedMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumBooleanMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"BooleanLiteral\"),\n  },\n});\n\ndefineType(\"EnumNumberMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"NumericLiteral\"),\n  },\n});\n\ndefineType(\"EnumStringMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"EnumDefaultedMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"IndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OptionalIndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n  },\n});\n",null,"import {\n  defineAliasedType,\n  assertNodeType,\n  assertValueType,\n  chain,\n  assertEach,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"JSX\");\n\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXNamespacedName\"),\n    },\n    value: {\n      optional: true,\n      validate: assertNodeType(\n        \"JSXElement\",\n        \"JSXFragment\",\n        \"StringLiteral\",\n        \"JSXExpressionContainer\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXElement\", {\n  builder: process.env.BABEL_8_BREAKING\n    ? [\"openingElement\", \"closingElement\", \"children\"]\n    : [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: assertNodeType(\"JSXOpeningElement\"),\n    },\n    closingElement: {\n      optional: true,\n      validate: assertNodeType(\"JSXClosingElement\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n    ...(process.env.BABEL_8_BREAKING\n      ? {}\n      : {\n          selfClosing: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\ndefineType(\"JSXEmptyExpression\", {});\n\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\", \"JSXEmptyExpression\"),\n    },\n  },\n});\n\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"JSXMemberExpression\", \"JSXIdentifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n    selfClosing: {\n      default: false,\n    },\n    attributes: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"JSXAttribute\", \"JSXSpreadAttribute\")),\n      ),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: assertNodeType(\"JSXOpeningFragment\"),\n    },\n    closingFragment: {\n      validate: assertNodeType(\"JSXClosingFragment\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"],\n});\n\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"],\n});\n",null,"import {\n  defineAliasedType,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n} from \"./utils.ts\";\nimport { PLACEHOLDERS } from \"./placeholders.ts\";\n\nconst defineType = defineAliasedType(\"Miscellaneous\");\n\nif (!process.env.BABEL_8_BREAKING) {\n  defineType(\"Noop\", {\n    visitor: [],\n  });\n}\n\ndefineType(\"Placeholder\", {\n  visitor: [],\n  builder: [\"expectedNode\", \"name\"],\n  // aliases: [], defined in placeholders.js\n  fields: {\n    name: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    expectedNode: {\n      validate: assertOneOf(...PLACEHOLDERS),\n    },\n  },\n});\n\ndefineType(\"V8IntrinsicIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n",null,"import { ALIAS_KEYS } from \"./utils.ts\";\n\nexport const PLACEHOLDERS = [\n  \"Identifier\",\n  \"StringLiteral\",\n  \"Expression\",\n  \"Statement\",\n  \"Declaration\",\n  \"BlockStatement\",\n  \"ClassBody\",\n  \"Pattern\",\n] as const;\n\nexport const PLACEHOLDERS_ALIAS: Record<string, string[]> = {\n  Declaration: [\"Statement\"],\n  Pattern: [\"PatternLike\", \"LVal\"],\n};\n\nfor (const type of PLACEHOLDERS) {\n  const alias = ALIAS_KEYS[type];\n  if (alias?.length) PLACEHOLDERS_ALIAS[type] = alias;\n}\n\nexport const PLACEHOLDERS_FLIPPED_ALIAS: Record<string, string[]> = {};\n\nObject.keys(PLACEHOLDERS_ALIAS).forEach(type => {\n  PLACEHOLDERS_ALIAS[type].forEach(alias => {\n    if (!Object.hasOwn(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {\n      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];\n    }\n    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);\n  });\n});\n",null,"import defineType, {\n  assertEach,\n  assertNodeType,\n  assertValueType,\n  chain,\n} from \"./utils.ts\";\n\ndefineType(\"ArgumentPlaceholder\", {});\n\ndefineType(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING\n    ? {\n        object: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n        callee: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n      }\n    : {\n        object: {\n          validate: assertNodeType(\"Expression\"),\n        },\n        callee: {\n          validate: assertNodeType(\"Expression\"),\n        },\n      },\n});\n\ndefineType(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    value: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n  },\n});\n\ndefineType(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    async: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ObjectProperty\", \"SpreadElement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\", \"SpreadElement\")),\n      ),\n      default: [],\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\n// https://github.com/tc39/proposal-js-module-blocks\ndefineType(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"Program\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-hack-pipes\ndefineType(\"TopicReference\", {\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-smart-pipes\ndefineType(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"],\n});\n",null,"import {\n  defineAliasedType,\n  arrayOfType,\n  assertEach,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n  chain,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils.ts\";\nimport {\n  functionDeclarationCommon,\n  classMethodOrDeclareMethodCommon,\n} from \"./core.ts\";\nimport is from \"../validators/is.ts\";\n\nconst defineType = defineAliasedType(\"TypeScript\");\n\nconst bool = assertValueType(\"boolean\");\n\nconst tSFunctionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeAnnotation\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeParameterDeclaration\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true,\n  },\n});\n\ndefineType(\"TSParameterProperty\", {\n  aliases: [\"LVal\"], // TODO: This isn't usable in general as an LVal. Should have a \"Parameter\" alias.\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: assertOneOf(\"public\", \"private\", \"protected\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    parameter: {\n      validate: assertNodeType(\"Identifier\", \"AssignmentPattern\"),\n    },\n    override: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: validateType(\"TSEntityName\"),\n    right: validateType(\"Identifier\"),\n  },\n});\n\nconst signatureDeclarationCommon = () => ({\n  typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n  [process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\"]: validateArrayOfType(\n    [\"ArrayPattern\", \"Identifier\", \"ObjectPattern\", \"RestElement\"],\n  ),\n  [process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\"]:\n    validateOptionalType(\"TSTypeAnnotation\"),\n});\n\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: signatureDeclarationCommon(),\n};\n\ndefineType(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\ndefineType(\n  \"TSConstructSignatureDeclaration\",\n  callConstructSignatureDeclaration,\n);\n\nconst namedTypeElementCommon = () => ({\n  key: validateType(\"Expression\"),\n  computed: { default: false },\n  optional: validateOptional(bool),\n});\n\ndefineType(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\"],\n  fields: {\n    ...namedTypeElementCommon(),\n    readonly: validateOptional(bool),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"key\",\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: {\n    ...signatureDeclarationCommon(),\n    ...namedTypeElementCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: validateOptional(bool),\n    static: validateOptional(bool),\n    parameters: validateArrayOfType(\"Identifier\"), // Length must be 1\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n  },\n});\n\nconst tsKeywordTypes = [\n  \"TSAnyKeyword\",\n  \"TSBooleanKeyword\",\n  \"TSBigIntKeyword\",\n  \"TSIntrinsicKeyword\",\n  \"TSNeverKeyword\",\n  \"TSNullKeyword\",\n  \"TSNumberKeyword\",\n  \"TSObjectKeyword\",\n  \"TSStringKeyword\",\n  \"TSSymbolKeyword\",\n  \"TSUndefinedKeyword\",\n  \"TSUnknownKeyword\",\n  \"TSVoidKeyword\",\n] as const;\n\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {},\n  });\n}\n\ndefineType(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {},\n});\n\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n};\n\ndefineType(\"TSFunctionType\", {\n  ...fnOrCtrBase,\n  fields: signatureDeclarationCommon(),\n});\ndefineType(\"TSConstructorType\", {\n  ...fnOrCtrBase,\n  fields: {\n    ...signatureDeclarationCommon(),\n    abstract: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: validateType([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    asserts: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\", \"typeParameters\"],\n  fields: {\n    exprName: validateType([\"TSEntityName\", \"TSImportType\"]),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: validateArrayOfType([\"TSType\", \"TSNamedTupleMember\"]),\n  },\n});\n\ndefineType(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: validateType(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false,\n    },\n    elementType: validateType(\"TSType\"),\n  },\n});\n\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: validateArrayOfType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSUnionType\", unionOrIntersection);\ndefineType(\"TSIntersectionType\", unionOrIntersection);\n\ndefineType(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: validateType(\"TSType\"),\n    extendsType: validateType(\"TSType\"),\n    trueType: validateType(\"TSType\"),\n    falseType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: validateType(\"TSTypeParameter\"),\n  },\n});\n\ndefineType(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: validate(assertValueType(\"string\")),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: validateType(\"TSType\"),\n    indexType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    readonly: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeParameter: validateType(\"TSTypeParameter\"),\n    optional: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeAnnotation: validateOptionalType(\"TSType\"),\n    nameType: validateOptionalType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: (function () {\n        const unaryExpression = assertNodeType(\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const unaryOperator = assertOneOf(\"-\");\n\n        const literal = assertNodeType(\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n        );\n        function validator(parent: any, key: string, node: any) {\n          // type A = -1 | 1;\n          if (is(\"UnaryExpression\", node)) {\n            // check operator first\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            // type A = 'foo' | 'bar' | false | 1;\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n          \"UnaryExpression\",\n        ];\n\n        return validator;\n      })(),\n    },\n  },\n});\n\ndefineType(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSInterfaceDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    extends: validateOptional(arrayOfType(\"TSExpressionWithTypeArguments\")),\n    body: validateType(\"TSInterfaceBody\"),\n  },\n});\n\ndefineType(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInstantiationExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\nconst TSTypeExpression = {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSAsExpression\", TSTypeExpression);\ndefineType(\"TSSatisfiesExpression\", TSTypeExpression);\n\ndefineType(\"TSTypeAssertion\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: validateOptional(bool),\n    const: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    members: validateArrayOfType(\"TSEnumMember\"),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    global: validateOptional(bool),\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType([\"TSModuleBlock\", \"TSModuleDeclaration\"]),\n  },\n});\n\ndefineType(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\", \"FunctionParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"Statement\"),\n  },\n});\n\ndefineType(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: validateType(\"StringLiteral\"),\n    qualifier: validateOptionalType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n    options: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: validate(bool),\n    id: validateType(\"Identifier\"),\n    moduleReference: validateType([\n      \"TSEntityName\",\n      \"TSExternalModuleReference\",\n    ]),\n    importKind: {\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"TSNonNullExpression\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: assertNodeType(\"TSType\"),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSType\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSTypeParameter\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: !process.env.BABEL_8_BREAKING\n        ? assertValueType(\"string\")\n        : assertNodeType(\"Identifier\"),\n    },\n    in: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    out: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    const: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    constraint: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n    default: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n  },\n});\n",null,"export const DEPRECATED_ALIASES = {\n  ModuleDeclaration: \"ImportOrExportDeclaration\",\n};\n",null,"import isNode from \"../validators/isNode.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function assertNode(node?: any): asserts node is t.Node {\n  if (!isNode(node)) {\n    const type = node?.type ?? JSON.stringify(node);\n    throw new TypeError(`Not a valid node of type \"${type}\"`);\n  }\n}\n",null,"import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isNode(node: any): node is t.Node {\n  return !!(node && VISITOR_KEYS[node.type]);\n}\n",null,"/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport is from \"../../validators/is.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\nfunction assert(type: string, node: any, opts?: any): void {\n  if (!is(type, node, opts)) {\n    throw new Error(\n      `Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` +\n        `but instead got \"${node.type}\".`,\n    );\n  }\n}\n\nexport function assertArrayExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayExpression {\n  assert(\"ArrayExpression\", node, opts);\n}\nexport function assertAssignmentExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentExpression {\n  assert(\"AssignmentExpression\", node, opts);\n}\nexport function assertBinaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BinaryExpression {\n  assert(\"BinaryExpression\", node, opts);\n}\nexport function assertInterpreterDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterpreterDirective {\n  assert(\"InterpreterDirective\", node, opts);\n}\nexport function assertDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Directive {\n  assert(\"Directive\", node, opts);\n}\nexport function assertDirectiveLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DirectiveLiteral {\n  assert(\"DirectiveLiteral\", node, opts);\n}\nexport function assertBlockStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockStatement {\n  assert(\"BlockStatement\", node, opts);\n}\nexport function assertBreakStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BreakStatement {\n  assert(\"BreakStatement\", node, opts);\n}\nexport function assertCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CallExpression {\n  assert(\"CallExpression\", node, opts);\n}\nexport function assertCatchClause(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CatchClause {\n  assert(\"CatchClause\", node, opts);\n}\nexport function assertConditionalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ConditionalExpression {\n  assert(\"ConditionalExpression\", node, opts);\n}\nexport function assertContinueStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ContinueStatement {\n  assert(\"ContinueStatement\", node, opts);\n}\nexport function assertDebuggerStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DebuggerStatement {\n  assert(\"DebuggerStatement\", node, opts);\n}\nexport function assertDoWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoWhileStatement {\n  assert(\"DoWhileStatement\", node, opts);\n}\nexport function assertEmptyStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyStatement {\n  assert(\"EmptyStatement\", node, opts);\n}\nexport function assertExpressionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionStatement {\n  assert(\"ExpressionStatement\", node, opts);\n}\nexport function assertFile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.File {\n  assert(\"File\", node, opts);\n}\nexport function assertForInStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForInStatement {\n  assert(\"ForInStatement\", node, opts);\n}\nexport function assertForStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForStatement {\n  assert(\"ForStatement\", node, opts);\n}\nexport function assertFunctionDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionDeclaration {\n  assert(\"FunctionDeclaration\", node, opts);\n}\nexport function assertFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionExpression {\n  assert(\"FunctionExpression\", node, opts);\n}\nexport function assertIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Identifier {\n  assert(\"Identifier\", node, opts);\n}\nexport function assertIfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IfStatement {\n  assert(\"IfStatement\", node, opts);\n}\nexport function assertLabeledStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LabeledStatement {\n  assert(\"LabeledStatement\", node, opts);\n}\nexport function assertStringLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteral {\n  assert(\"StringLiteral\", node, opts);\n}\nexport function assertNumericLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumericLiteral {\n  assert(\"NumericLiteral\", node, opts);\n}\nexport function assertNullLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteral {\n  assert(\"NullLiteral\", node, opts);\n}\nexport function assertBooleanLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteral {\n  assert(\"BooleanLiteral\", node, opts);\n}\nexport function assertRegExpLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RegExpLiteral {\n  assert(\"RegExpLiteral\", node, opts);\n}\nexport function assertLogicalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LogicalExpression {\n  assert(\"LogicalExpression\", node, opts);\n}\nexport function assertMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MemberExpression {\n  assert(\"MemberExpression\", node, opts);\n}\nexport function assertNewExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NewExpression {\n  assert(\"NewExpression\", node, opts);\n}\nexport function assertProgram(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Program {\n  assert(\"Program\", node, opts);\n}\nexport function assertObjectExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectExpression {\n  assert(\"ObjectExpression\", node, opts);\n}\nexport function assertObjectMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMethod {\n  assert(\"ObjectMethod\", node, opts);\n}\nexport function assertObjectProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectProperty {\n  assert(\"ObjectProperty\", node, opts);\n}\nexport function assertRestElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RestElement {\n  assert(\"RestElement\", node, opts);\n}\nexport function assertReturnStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ReturnStatement {\n  assert(\"ReturnStatement\", node, opts);\n}\nexport function assertSequenceExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SequenceExpression {\n  assert(\"SequenceExpression\", node, opts);\n}\nexport function assertParenthesizedExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ParenthesizedExpression {\n  assert(\"ParenthesizedExpression\", node, opts);\n}\nexport function assertSwitchCase(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchCase {\n  assert(\"SwitchCase\", node, opts);\n}\nexport function assertSwitchStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchStatement {\n  assert(\"SwitchStatement\", node, opts);\n}\nexport function assertThisExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisExpression {\n  assert(\"ThisExpression\", node, opts);\n}\nexport function assertThrowStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThrowStatement {\n  assert(\"ThrowStatement\", node, opts);\n}\nexport function assertTryStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TryStatement {\n  assert(\"TryStatement\", node, opts);\n}\nexport function assertUnaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryExpression {\n  assert(\"UnaryExpression\", node, opts);\n}\nexport function assertUpdateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UpdateExpression {\n  assert(\"UpdateExpression\", node, opts);\n}\nexport function assertVariableDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclaration {\n  assert(\"VariableDeclaration\", node, opts);\n}\nexport function assertVariableDeclarator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclarator {\n  assert(\"VariableDeclarator\", node, opts);\n}\nexport function assertWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WhileStatement {\n  assert(\"WhileStatement\", node, opts);\n}\nexport function assertWithStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WithStatement {\n  assert(\"WithStatement\", node, opts);\n}\nexport function assertAssignmentPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentPattern {\n  assert(\"AssignmentPattern\", node, opts);\n}\nexport function assertArrayPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayPattern {\n  assert(\"ArrayPattern\", node, opts);\n}\nexport function assertArrowFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrowFunctionExpression {\n  assert(\"ArrowFunctionExpression\", node, opts);\n}\nexport function assertClassBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassBody {\n  assert(\"ClassBody\", node, opts);\n}\nexport function assertClassExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassExpression {\n  assert(\"ClassExpression\", node, opts);\n}\nexport function assertClassDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassDeclaration {\n  assert(\"ClassDeclaration\", node, opts);\n}\nexport function assertExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportAllDeclaration {\n  assert(\"ExportAllDeclaration\", node, opts);\n}\nexport function assertExportDefaultDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultDeclaration {\n  assert(\"ExportDefaultDeclaration\", node, opts);\n}\nexport function assertExportNamedDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamedDeclaration {\n  assert(\"ExportNamedDeclaration\", node, opts);\n}\nexport function assertExportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportSpecifier {\n  assert(\"ExportSpecifier\", node, opts);\n}\nexport function assertForOfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForOfStatement {\n  assert(\"ForOfStatement\", node, opts);\n}\nexport function assertImportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDeclaration {\n  assert(\"ImportDeclaration\", node, opts);\n}\nexport function assertImportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDefaultSpecifier {\n  assert(\"ImportDefaultSpecifier\", node, opts);\n}\nexport function assertImportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportNamespaceSpecifier {\n  assert(\"ImportNamespaceSpecifier\", node, opts);\n}\nexport function assertImportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportSpecifier {\n  assert(\"ImportSpecifier\", node, opts);\n}\nexport function assertImportExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportExpression {\n  assert(\"ImportExpression\", node, opts);\n}\nexport function assertMetaProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MetaProperty {\n  assert(\"MetaProperty\", node, opts);\n}\nexport function assertClassMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassMethod {\n  assert(\"ClassMethod\", node, opts);\n}\nexport function assertObjectPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectPattern {\n  assert(\"ObjectPattern\", node, opts);\n}\nexport function assertSpreadElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SpreadElement {\n  assert(\"SpreadElement\", node, opts);\n}\nexport function assertSuper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Super {\n  assert(\"Super\", node, opts);\n}\nexport function assertTaggedTemplateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TaggedTemplateExpression {\n  assert(\"TaggedTemplateExpression\", node, opts);\n}\nexport function assertTemplateElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateElement {\n  assert(\"TemplateElement\", node, opts);\n}\nexport function assertTemplateLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateLiteral {\n  assert(\"TemplateLiteral\", node, opts);\n}\nexport function assertYieldExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.YieldExpression {\n  assert(\"YieldExpression\", node, opts);\n}\nexport function assertAwaitExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AwaitExpression {\n  assert(\"AwaitExpression\", node, opts);\n}\nexport function assertImport(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Import {\n  assert(\"Import\", node, opts);\n}\nexport function assertBigIntLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BigIntLiteral {\n  assert(\"BigIntLiteral\", node, opts);\n}\nexport function assertExportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamespaceSpecifier {\n  assert(\"ExportNamespaceSpecifier\", node, opts);\n}\nexport function assertOptionalMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalMemberExpression {\n  assert(\"OptionalMemberExpression\", node, opts);\n}\nexport function assertOptionalCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalCallExpression {\n  assert(\"OptionalCallExpression\", node, opts);\n}\nexport function assertClassProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassProperty {\n  assert(\"ClassProperty\", node, opts);\n}\nexport function assertClassAccessorProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassAccessorProperty {\n  assert(\"ClassAccessorProperty\", node, opts);\n}\nexport function assertClassPrivateProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateProperty {\n  assert(\"ClassPrivateProperty\", node, opts);\n}\nexport function assertClassPrivateMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateMethod {\n  assert(\"ClassPrivateMethod\", node, opts);\n}\nexport function assertPrivateName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PrivateName {\n  assert(\"PrivateName\", node, opts);\n}\nexport function assertStaticBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StaticBlock {\n  assert(\"StaticBlock\", node, opts);\n}\nexport function assertAnyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AnyTypeAnnotation {\n  assert(\"AnyTypeAnnotation\", node, opts);\n}\nexport function assertArrayTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayTypeAnnotation {\n  assert(\"ArrayTypeAnnotation\", node, opts);\n}\nexport function assertBooleanTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanTypeAnnotation {\n  assert(\"BooleanTypeAnnotation\", node, opts);\n}\nexport function assertBooleanLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteralTypeAnnotation {\n  assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNullLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteralTypeAnnotation {\n  assert(\"NullLiteralTypeAnnotation\", node, opts);\n}\nexport function assertClassImplements(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassImplements {\n  assert(\"ClassImplements\", node, opts);\n}\nexport function assertDeclareClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareClass {\n  assert(\"DeclareClass\", node, opts);\n}\nexport function assertDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareFunction {\n  assert(\"DeclareFunction\", node, opts);\n}\nexport function assertDeclareInterface(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareInterface {\n  assert(\"DeclareInterface\", node, opts);\n}\nexport function assertDeclareModule(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModule {\n  assert(\"DeclareModule\", node, opts);\n}\nexport function assertDeclareModuleExports(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModuleExports {\n  assert(\"DeclareModuleExports\", node, opts);\n}\nexport function assertDeclareTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareTypeAlias {\n  assert(\"DeclareTypeAlias\", node, opts);\n}\nexport function assertDeclareOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareOpaqueType {\n  assert(\"DeclareOpaqueType\", node, opts);\n}\nexport function assertDeclareVariable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareVariable {\n  assert(\"DeclareVariable\", node, opts);\n}\nexport function assertDeclareExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportDeclaration {\n  assert(\"DeclareExportDeclaration\", node, opts);\n}\nexport function assertDeclareExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportAllDeclaration {\n  assert(\"DeclareExportAllDeclaration\", node, opts);\n}\nexport function assertDeclaredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclaredPredicate {\n  assert(\"DeclaredPredicate\", node, opts);\n}\nexport function assertExistsTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExistsTypeAnnotation {\n  assert(\"ExistsTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeAnnotation {\n  assert(\"FunctionTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeParam(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeParam {\n  assert(\"FunctionTypeParam\", node, opts);\n}\nexport function assertGenericTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.GenericTypeAnnotation {\n  assert(\"GenericTypeAnnotation\", node, opts);\n}\nexport function assertInferredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InferredPredicate {\n  assert(\"InferredPredicate\", node, opts);\n}\nexport function assertInterfaceExtends(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceExtends {\n  assert(\"InterfaceExtends\", node, opts);\n}\nexport function assertInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceDeclaration {\n  assert(\"InterfaceDeclaration\", node, opts);\n}\nexport function assertInterfaceTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceTypeAnnotation {\n  assert(\"InterfaceTypeAnnotation\", node, opts);\n}\nexport function assertIntersectionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IntersectionTypeAnnotation {\n  assert(\"IntersectionTypeAnnotation\", node, opts);\n}\nexport function assertMixedTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MixedTypeAnnotation {\n  assert(\"MixedTypeAnnotation\", node, opts);\n}\nexport function assertEmptyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyTypeAnnotation {\n  assert(\"EmptyTypeAnnotation\", node, opts);\n}\nexport function assertNullableTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullableTypeAnnotation {\n  assert(\"NullableTypeAnnotation\", node, opts);\n}\nexport function assertNumberLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberLiteralTypeAnnotation {\n  assert(\"NumberLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNumberTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberTypeAnnotation {\n  assert(\"NumberTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeAnnotation {\n  assert(\"ObjectTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeInternalSlot(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeInternalSlot {\n  assert(\"ObjectTypeInternalSlot\", node, opts);\n}\nexport function assertObjectTypeCallProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeCallProperty {\n  assert(\"ObjectTypeCallProperty\", node, opts);\n}\nexport function assertObjectTypeIndexer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeIndexer {\n  assert(\"ObjectTypeIndexer\", node, opts);\n}\nexport function assertObjectTypeProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeProperty {\n  assert(\"ObjectTypeProperty\", node, opts);\n}\nexport function assertObjectTypeSpreadProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeSpreadProperty {\n  assert(\"ObjectTypeSpreadProperty\", node, opts);\n}\nexport function assertOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OpaqueType {\n  assert(\"OpaqueType\", node, opts);\n}\nexport function assertQualifiedTypeIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.QualifiedTypeIdentifier {\n  assert(\"QualifiedTypeIdentifier\", node, opts);\n}\nexport function assertStringLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteralTypeAnnotation {\n  assert(\"StringLiteralTypeAnnotation\", node, opts);\n}\nexport function assertStringTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringTypeAnnotation {\n  assert(\"StringTypeAnnotation\", node, opts);\n}\nexport function assertSymbolTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SymbolTypeAnnotation {\n  assert(\"SymbolTypeAnnotation\", node, opts);\n}\nexport function assertThisTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisTypeAnnotation {\n  assert(\"ThisTypeAnnotation\", node, opts);\n}\nexport function assertTupleTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleTypeAnnotation {\n  assert(\"TupleTypeAnnotation\", node, opts);\n}\nexport function assertTypeofTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeofTypeAnnotation {\n  assert(\"TypeofTypeAnnotation\", node, opts);\n}\nexport function assertTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAlias {\n  assert(\"TypeAlias\", node, opts);\n}\nexport function assertTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAnnotation {\n  assert(\"TypeAnnotation\", node, opts);\n}\nexport function assertTypeCastExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeCastExpression {\n  assert(\"TypeCastExpression\", node, opts);\n}\nexport function assertTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameter {\n  assert(\"TypeParameter\", node, opts);\n}\nexport function assertTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterDeclaration {\n  assert(\"TypeParameterDeclaration\", node, opts);\n}\nexport function assertTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterInstantiation {\n  assert(\"TypeParameterInstantiation\", node, opts);\n}\nexport function assertUnionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnionTypeAnnotation {\n  assert(\"UnionTypeAnnotation\", node, opts);\n}\nexport function assertVariance(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Variance {\n  assert(\"Variance\", node, opts);\n}\nexport function assertVoidTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VoidTypeAnnotation {\n  assert(\"VoidTypeAnnotation\", node, opts);\n}\nexport function assertEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDeclaration {\n  assert(\"EnumDeclaration\", node, opts);\n}\nexport function assertEnumBooleanBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanBody {\n  assert(\"EnumBooleanBody\", node, opts);\n}\nexport function assertEnumNumberBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberBody {\n  assert(\"EnumNumberBody\", node, opts);\n}\nexport function assertEnumStringBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringBody {\n  assert(\"EnumStringBody\", node, opts);\n}\nexport function assertEnumSymbolBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumSymbolBody {\n  assert(\"EnumSymbolBody\", node, opts);\n}\nexport function assertEnumBooleanMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanMember {\n  assert(\"EnumBooleanMember\", node, opts);\n}\nexport function assertEnumNumberMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberMember {\n  assert(\"EnumNumberMember\", node, opts);\n}\nexport function assertEnumStringMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringMember {\n  assert(\"EnumStringMember\", node, opts);\n}\nexport function assertEnumDefaultedMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDefaultedMember {\n  assert(\"EnumDefaultedMember\", node, opts);\n}\nexport function assertIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IndexedAccessType {\n  assert(\"IndexedAccessType\", node, opts);\n}\nexport function assertOptionalIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalIndexedAccessType {\n  assert(\"OptionalIndexedAccessType\", node, opts);\n}\nexport function assertJSXAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXAttribute {\n  assert(\"JSXAttribute\", node, opts);\n}\nexport function assertJSXClosingElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingElement {\n  assert(\"JSXClosingElement\", node, opts);\n}\nexport function assertJSXElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXElement {\n  assert(\"JSXElement\", node, opts);\n}\nexport function assertJSXEmptyExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXEmptyExpression {\n  assert(\"JSXEmptyExpression\", node, opts);\n}\nexport function assertJSXExpressionContainer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXExpressionContainer {\n  assert(\"JSXExpressionContainer\", node, opts);\n}\nexport function assertJSXSpreadChild(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadChild {\n  assert(\"JSXSpreadChild\", node, opts);\n}\nexport function assertJSXIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXIdentifier {\n  assert(\"JSXIdentifier\", node, opts);\n}\nexport function assertJSXMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXMemberExpression {\n  assert(\"JSXMemberExpression\", node, opts);\n}\nexport function assertJSXNamespacedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXNamespacedName {\n  assert(\"JSXNamespacedName\", node, opts);\n}\nexport function assertJSXOpeningElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningElement {\n  assert(\"JSXOpeningElement\", node, opts);\n}\nexport function assertJSXSpreadAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadAttribute {\n  assert(\"JSXSpreadAttribute\", node, opts);\n}\nexport function assertJSXText(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXText {\n  assert(\"JSXText\", node, opts);\n}\nexport function assertJSXFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXFragment {\n  assert(\"JSXFragment\", node, opts);\n}\nexport function assertJSXOpeningFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningFragment {\n  assert(\"JSXOpeningFragment\", node, opts);\n}\nexport function assertJSXClosingFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingFragment {\n  assert(\"JSXClosingFragment\", node, opts);\n}\nexport function assertNoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Noop {\n  assert(\"Noop\", node, opts);\n}\nexport function assertPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Placeholder {\n  assert(\"Placeholder\", node, opts);\n}\nexport function assertV8IntrinsicIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.V8IntrinsicIdentifier {\n  assert(\"V8IntrinsicIdentifier\", node, opts);\n}\nexport function assertArgumentPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArgumentPlaceholder {\n  assert(\"ArgumentPlaceholder\", node, opts);\n}\nexport function assertBindExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BindExpression {\n  assert(\"BindExpression\", node, opts);\n}\nexport function assertImportAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportAttribute {\n  assert(\"ImportAttribute\", node, opts);\n}\nexport function assertDecorator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Decorator {\n  assert(\"Decorator\", node, opts);\n}\nexport function assertDoExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoExpression {\n  assert(\"DoExpression\", node, opts);\n}\nexport function assertExportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultSpecifier {\n  assert(\"ExportDefaultSpecifier\", node, opts);\n}\nexport function assertRecordExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RecordExpression {\n  assert(\"RecordExpression\", node, opts);\n}\nexport function assertTupleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleExpression {\n  assert(\"TupleExpression\", node, opts);\n}\nexport function assertDecimalLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DecimalLiteral {\n  assert(\"DecimalLiteral\", node, opts);\n}\nexport function assertModuleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleExpression {\n  assert(\"ModuleExpression\", node, opts);\n}\nexport function assertTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TopicReference {\n  assert(\"TopicReference\", node, opts);\n}\nexport function assertPipelineTopicExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineTopicExpression {\n  assert(\"PipelineTopicExpression\", node, opts);\n}\nexport function assertPipelineBareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineBareFunction {\n  assert(\"PipelineBareFunction\", node, opts);\n}\nexport function assertPipelinePrimaryTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelinePrimaryTopicReference {\n  assert(\"PipelinePrimaryTopicReference\", node, opts);\n}\nexport function assertTSParameterProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParameterProperty {\n  assert(\"TSParameterProperty\", node, opts);\n}\nexport function assertTSDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareFunction {\n  assert(\"TSDeclareFunction\", node, opts);\n}\nexport function assertTSDeclareMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareMethod {\n  assert(\"TSDeclareMethod\", node, opts);\n}\nexport function assertTSQualifiedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSQualifiedName {\n  assert(\"TSQualifiedName\", node, opts);\n}\nexport function assertTSCallSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSCallSignatureDeclaration {\n  assert(\"TSCallSignatureDeclaration\", node, opts);\n}\nexport function assertTSConstructSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructSignatureDeclaration {\n  assert(\"TSConstructSignatureDeclaration\", node, opts);\n}\nexport function assertTSPropertySignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSPropertySignature {\n  assert(\"TSPropertySignature\", node, opts);\n}\nexport function assertTSMethodSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMethodSignature {\n  assert(\"TSMethodSignature\", node, opts);\n}\nexport function assertTSIndexSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexSignature {\n  assert(\"TSIndexSignature\", node, opts);\n}\nexport function assertTSAnyKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAnyKeyword {\n  assert(\"TSAnyKeyword\", node, opts);\n}\nexport function assertTSBooleanKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBooleanKeyword {\n  assert(\"TSBooleanKeyword\", node, opts);\n}\nexport function assertTSBigIntKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBigIntKeyword {\n  assert(\"TSBigIntKeyword\", node, opts);\n}\nexport function assertTSIntrinsicKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntrinsicKeyword {\n  assert(\"TSIntrinsicKeyword\", node, opts);\n}\nexport function assertTSNeverKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNeverKeyword {\n  assert(\"TSNeverKeyword\", node, opts);\n}\nexport function assertTSNullKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNullKeyword {\n  assert(\"TSNullKeyword\", node, opts);\n}\nexport function assertTSNumberKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNumberKeyword {\n  assert(\"TSNumberKeyword\", node, opts);\n}\nexport function assertTSObjectKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSObjectKeyword {\n  assert(\"TSObjectKeyword\", node, opts);\n}\nexport function assertTSStringKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSStringKeyword {\n  assert(\"TSStringKeyword\", node, opts);\n}\nexport function assertTSSymbolKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSymbolKeyword {\n  assert(\"TSSymbolKeyword\", node, opts);\n}\nexport function assertTSUndefinedKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUndefinedKeyword {\n  assert(\"TSUndefinedKeyword\", node, opts);\n}\nexport function assertTSUnknownKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnknownKeyword {\n  assert(\"TSUnknownKeyword\", node, opts);\n}\nexport function assertTSVoidKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSVoidKeyword {\n  assert(\"TSVoidKeyword\", node, opts);\n}\nexport function assertTSThisType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSThisType {\n  assert(\"TSThisType\", node, opts);\n}\nexport function assertTSFunctionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSFunctionType {\n  assert(\"TSFunctionType\", node, opts);\n}\nexport function assertTSConstructorType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructorType {\n  assert(\"TSConstructorType\", node, opts);\n}\nexport function assertTSTypeReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeReference {\n  assert(\"TSTypeReference\", node, opts);\n}\nexport function assertTSTypePredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypePredicate {\n  assert(\"TSTypePredicate\", node, opts);\n}\nexport function assertTSTypeQuery(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeQuery {\n  assert(\"TSTypeQuery\", node, opts);\n}\nexport function assertTSTypeLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeLiteral {\n  assert(\"TSTypeLiteral\", node, opts);\n}\nexport function assertTSArrayType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSArrayType {\n  assert(\"TSArrayType\", node, opts);\n}\nexport function assertTSTupleType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTupleType {\n  assert(\"TSTupleType\", node, opts);\n}\nexport function assertTSOptionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSOptionalType {\n  assert(\"TSOptionalType\", node, opts);\n}\nexport function assertTSRestType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSRestType {\n  assert(\"TSRestType\", node, opts);\n}\nexport function assertTSNamedTupleMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamedTupleMember {\n  assert(\"TSNamedTupleMember\", node, opts);\n}\nexport function assertTSUnionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnionType {\n  assert(\"TSUnionType\", node, opts);\n}\nexport function assertTSIntersectionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntersectionType {\n  assert(\"TSIntersectionType\", node, opts);\n}\nexport function assertTSConditionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConditionalType {\n  assert(\"TSConditionalType\", node, opts);\n}\nexport function assertTSInferType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInferType {\n  assert(\"TSInferType\", node, opts);\n}\nexport function assertTSParenthesizedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParenthesizedType {\n  assert(\"TSParenthesizedType\", node, opts);\n}\nexport function assertTSTypeOperator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeOperator {\n  assert(\"TSTypeOperator\", node, opts);\n}\nexport function assertTSIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexedAccessType {\n  assert(\"TSIndexedAccessType\", node, opts);\n}\nexport function assertTSMappedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMappedType {\n  assert(\"TSMappedType\", node, opts);\n}\nexport function assertTSLiteralType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSLiteralType {\n  assert(\"TSLiteralType\", node, opts);\n}\nexport function assertTSExpressionWithTypeArguments(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExpressionWithTypeArguments {\n  assert(\"TSExpressionWithTypeArguments\", node, opts);\n}\nexport function assertTSInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceDeclaration {\n  assert(\"TSInterfaceDeclaration\", node, opts);\n}\nexport function assertTSInterfaceBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceBody {\n  assert(\"TSInterfaceBody\", node, opts);\n}\nexport function assertTSTypeAliasDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAliasDeclaration {\n  assert(\"TSTypeAliasDeclaration\", node, opts);\n}\nexport function assertTSInstantiationExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInstantiationExpression {\n  assert(\"TSInstantiationExpression\", node, opts);\n}\nexport function assertTSAsExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAsExpression {\n  assert(\"TSAsExpression\", node, opts);\n}\nexport function assertTSSatisfiesExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSatisfiesExpression {\n  assert(\"TSSatisfiesExpression\", node, opts);\n}\nexport function assertTSTypeAssertion(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAssertion {\n  assert(\"TSTypeAssertion\", node, opts);\n}\nexport function assertTSEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumDeclaration {\n  assert(\"TSEnumDeclaration\", node, opts);\n}\nexport function assertTSEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumMember {\n  assert(\"TSEnumMember\", node, opts);\n}\nexport function assertTSModuleDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleDeclaration {\n  assert(\"TSModuleDeclaration\", node, opts);\n}\nexport function assertTSModuleBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleBlock {\n  assert(\"TSModuleBlock\", node, opts);\n}\nexport function assertTSImportType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportType {\n  assert(\"TSImportType\", node, opts);\n}\nexport function assertTSImportEqualsDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportEqualsDeclaration {\n  assert(\"TSImportEqualsDeclaration\", node, opts);\n}\nexport function assertTSExternalModuleReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExternalModuleReference {\n  assert(\"TSExternalModuleReference\", node, opts);\n}\nexport function assertTSNonNullExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNonNullExpression {\n  assert(\"TSNonNullExpression\", node, opts);\n}\nexport function assertTSExportAssignment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExportAssignment {\n  assert(\"TSExportAssignment\", node, opts);\n}\nexport function assertTSNamespaceExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamespaceExportDeclaration {\n  assert(\"TSNamespaceExportDeclaration\", node, opts);\n}\nexport function assertTSTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAnnotation {\n  assert(\"TSTypeAnnotation\", node, opts);\n}\nexport function assertTSTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterInstantiation {\n  assert(\"TSTypeParameterInstantiation\", node, opts);\n}\nexport function assertTSTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterDeclaration {\n  assert(\"TSTypeParameterDeclaration\", node, opts);\n}\nexport function assertTSTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameter {\n  assert(\"TSTypeParameter\", node, opts);\n}\nexport function assertStandardized(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Standardized {\n  assert(\"Standardized\", node, opts);\n}\nexport function assertExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Expression {\n  assert(\"Expression\", node, opts);\n}\nexport function assertBinary(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Binary {\n  assert(\"Binary\", node, opts);\n}\nexport function assertScopable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Scopable {\n  assert(\"Scopable\", node, opts);\n}\nexport function assertBlockParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockParent {\n  assert(\"BlockParent\", node, opts);\n}\nexport function assertBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Block {\n  assert(\"Block\", node, opts);\n}\nexport function assertStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Statement {\n  assert(\"Statement\", node, opts);\n}\nexport function assertTerminatorless(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Terminatorless {\n  assert(\"Terminatorless\", node, opts);\n}\nexport function assertCompletionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CompletionStatement {\n  assert(\"CompletionStatement\", node, opts);\n}\nexport function assertConditional(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Conditional {\n  assert(\"Conditional\", node, opts);\n}\nexport function assertLoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Loop {\n  assert(\"Loop\", node, opts);\n}\nexport function assertWhile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.While {\n  assert(\"While\", node, opts);\n}\nexport function assertExpressionWrapper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionWrapper {\n  assert(\"ExpressionWrapper\", node, opts);\n}\nexport function assertFor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.For {\n  assert(\"For\", node, opts);\n}\nexport function assertForXStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForXStatement {\n  assert(\"ForXStatement\", node, opts);\n}\nexport function assertFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Function {\n  assert(\"Function\", node, opts);\n}\nexport function assertFunctionParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionParent {\n  assert(\"FunctionParent\", node, opts);\n}\nexport function assertPureish(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pureish {\n  assert(\"Pureish\", node, opts);\n}\nexport function assertDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Declaration {\n  assert(\"Declaration\", node, opts);\n}\nexport function assertPatternLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PatternLike {\n  assert(\"PatternLike\", node, opts);\n}\nexport function assertLVal(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LVal {\n  assert(\"LVal\", node, opts);\n}\nexport function assertTSEntityName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEntityName {\n  assert(\"TSEntityName\", node, opts);\n}\nexport function assertLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Literal {\n  assert(\"Literal\", node, opts);\n}\nexport function assertImmutable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Immutable {\n  assert(\"Immutable\", node, opts);\n}\nexport function assertUserWhitespacable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UserWhitespacable {\n  assert(\"UserWhitespacable\", node, opts);\n}\nexport function assertMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Method {\n  assert(\"Method\", node, opts);\n}\nexport function assertObjectMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMember {\n  assert(\"ObjectMember\", node, opts);\n}\nexport function assertProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Property {\n  assert(\"Property\", node, opts);\n}\nexport function assertUnaryLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryLike {\n  assert(\"UnaryLike\", node, opts);\n}\nexport function assertPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pattern {\n  assert(\"Pattern\", node, opts);\n}\nexport function assertClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Class {\n  assert(\"Class\", node, opts);\n}\nexport function assertImportOrExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportOrExportDeclaration {\n  assert(\"ImportOrExportDeclaration\", node, opts);\n}\nexport function assertExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDeclaration {\n  assert(\"ExportDeclaration\", node, opts);\n}\nexport function assertModuleSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleSpecifier {\n  assert(\"ModuleSpecifier\", node, opts);\n}\nexport function assertAccessor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Accessor {\n  assert(\"Accessor\", node, opts);\n}\nexport function assertPrivate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Private {\n  assert(\"Private\", node, opts);\n}\nexport function assertFlow(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Flow {\n  assert(\"Flow\", node, opts);\n}\nexport function assertFlowType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowType {\n  assert(\"FlowType\", node, opts);\n}\nexport function assertFlowBaseAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowBaseAnnotation {\n  assert(\"FlowBaseAnnotation\", node, opts);\n}\nexport function assertFlowDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowDeclaration {\n  assert(\"FlowDeclaration\", node, opts);\n}\nexport function assertFlowPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowPredicate {\n  assert(\"FlowPredicate\", node, opts);\n}\nexport function assertEnumBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBody {\n  assert(\"EnumBody\", node, opts);\n}\nexport function assertEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumMember {\n  assert(\"EnumMember\", node, opts);\n}\nexport function assertJSX(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSX {\n  assert(\"JSX\", node, opts);\n}\nexport function assertMiscellaneous(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Miscellaneous {\n  assert(\"Miscellaneous\", node, opts);\n}\nexport function assertTypeScript(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeScript {\n  assert(\"TypeScript\", node, opts);\n}\nexport function assertTSTypeElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeElement {\n  assert(\"TSTypeElement\", node, opts);\n}\nexport function assertTSType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSType {\n  assert(\"TSType\", node, opts);\n}\nexport function assertTSBaseType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBaseType {\n  assert(\"TSBaseType\", node, opts);\n}\nexport function assertNumberLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertNumberLiteral\", \"assertNumericLiteral\");\n  assert(\"NumberLiteral\", node, opts);\n}\nexport function assertRegexLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertRegexLiteral\", \"assertRegExpLiteral\");\n  assert(\"RegexLiteral\", node, opts);\n}\nexport function assertRestProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertRestProperty\", \"assertRestElement\");\n  assert(\"RestProperty\", node, opts);\n}\nexport function assertSpreadProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertSpreadProperty\", \"assertSpreadElement\");\n  assert(\"SpreadProperty\", node, opts);\n}\nexport function assertModuleDeclaration(node: any, opts: any): void {\n  deprecationWarning(\n    \"assertModuleDeclaration\",\n    \"assertImportOrExportDeclaration\",\n  );\n  assert(\"ModuleDeclaration\", node, opts);\n}\n",null,"import {\n  anyTypeAnnotation,\n  stringTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n  booleanTypeAnnotation,\n  genericTypeAnnotation,\n  identifier,\n} from \"../generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nexport default createTypeAnnotationBasedOnTypeof as {\n  (type: \"string\"): t.StringTypeAnnotation;\n  (type: \"number\"): t.NumberTypeAnnotation;\n  (type: \"undefined\"): t.VoidTypeAnnotation;\n  (type: \"boolean\"): t.BooleanTypeAnnotation;\n  (type: \"function\"): t.GenericTypeAnnotation;\n  (type: \"object\"): t.GenericTypeAnnotation;\n  (type: \"symbol\"): t.GenericTypeAnnotation;\n  (type: \"bigint\"): t.AnyTypeAnnotation;\n};\n\n/**\n * Create a type annotation based on typeof expression.\n */\nfunction createTypeAnnotationBasedOnTypeof(type: string): t.FlowType {\n  switch (type) {\n    case \"string\":\n      return stringTypeAnnotation();\n    case \"number\":\n      return numberTypeAnnotation();\n    case \"undefined\":\n      return voidTypeAnnotation();\n    case \"boolean\":\n      return booleanTypeAnnotation();\n    case \"function\":\n      return genericTypeAnnotation(identifier(\"Function\"));\n    case \"object\":\n      return genericTypeAnnotation(identifier(\"Object\"));\n    case \"symbol\":\n      return genericTypeAnnotation(identifier(\"Symbol\"));\n    case \"bigint\":\n      // todo: use BigInt annotation when Flow supports BigInt\n      // https://github.com/facebook/flow/issues/6639\n      return anyTypeAnnotation();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}\n",null,"import { unionTypeAnnotation } from \"../generated/index.ts\";\nimport removeTypeDuplicates from \"../../modifications/flow/removeTypeDuplicates.ts\";\nimport type * as t from \"../../index.ts\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createFlowUnionType<T extends t.FlowType>(\n  types: [T] | Array<T>,\n): T | t.UnionTypeAnnotation {\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0] as T;\n  } else {\n    return unionTypeAnnotation(flattened);\n  }\n}\n",null,"import {\n  isAnyTypeAnnotation,\n  isGenericTypeAnnotation,\n  isUnionTypeAnnotation,\n  isFlowBaseAnnotation,\n  isIdentifier,\n} from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nfunction getQualifiedName(node: t.GenericTypeAnnotation[\"id\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.id.name}.${getQualifiedName(node.qualification)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodesIn: ReadonlyArray<t.FlowType | false | null | undefined>,\n): t.FlowType[] {\n  const nodes = Array.from(nodesIn);\n\n  const generics = new Map<string, t.GenericTypeAnnotation>();\n  const bases = new Map<t.FlowBaseAnnotation[\"type\"], t.FlowBaseAnnotation>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.FlowType[]>();\n\n  const types: t.FlowType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isAnyTypeAnnotation(node)) {\n      return [node];\n    }\n\n    if (isFlowBaseAnnotation(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isUnionTypeAnnotation(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // find a matching generic type and merge and deduplicate the type parameters\n    if (isGenericTypeAnnotation(node)) {\n      const name = getQualifiedName(node.id);\n\n      if (generics.has(name)) {\n        let existing: t.Flow = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params,\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n",null,"import { tsUnionType } from \"../generated/index.ts\";\nimport removeTypeDuplicates from \"../../modifications/typescript/removeTypeDuplicates.ts\";\nimport { isTSTypeAnnotation } from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createTSUnionType(\n  typeAnnotations: Array<t.TSTypeAnnotation | t.TSType>,\n): t.TSType {\n  const types = typeAnnotations.map(type => {\n    return isTSTypeAnnotation(type) ? type.typeAnnotation : type;\n  });\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return tsUnionType(flattened);\n  }\n}\n",null,"import {\n  isIdentifier,\n  isTSAnyKeyword,\n  isTSTypeReference,\n  isTSUnionType,\n  isTSBaseType,\n} from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nfunction getQualifiedName(node: t.TSTypeReference[\"typeName\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.right.name}.${getQualifiedName(node.left)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodesIn: ReadonlyArray<t.TSType>,\n): Array<t.TSType> {\n  const nodes = Array.from(nodesIn);\n\n  const generics = new Map<string, t.TSTypeReference>();\n  const bases = new Map<t.TSBaseType[\"type\"], t.TSBaseType>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.TSType[]>();\n\n  const types: t.TSType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isTSAnyKeyword(node)) {\n      return [node];\n    }\n\n    // Analogue of FlowBaseAnnotation\n    if (isTSBaseType(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isTSUnionType(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // todo: support merging tuples: number[]\n    if (isTSTypeReference(node) && node.typeParameters) {\n      const name = getQualifiedName(node.typeName);\n\n      if (generics.has(name)) {\n        let existing: t.TypeScript = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params,\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n",null,"/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\n/**\n * This file is written in JavaScript and not TypeScript because uppercase builders\n * conflict with AST types. TypeScript reads the uppercase.d.ts file instead.\n */\n\nexport {\n  arrayExpression as ArrayExpression,\n  assignmentExpression as AssignmentExpression,\n  binaryExpression as BinaryExpression,\n  interpreterDirective as InterpreterDirective,\n  directive as Directive,\n  directiveLiteral as DirectiveLiteral,\n  blockStatement as BlockStatement,\n  breakStatement as BreakStatement,\n  callExpression as CallExpression,\n  catchClause as CatchClause,\n  conditionalExpression as ConditionalExpression,\n  continueStatement as ContinueStatement,\n  debuggerStatement as DebuggerStatement,\n  doWhileStatement as DoWhileStatement,\n  emptyStatement as EmptyStatement,\n  expressionStatement as ExpressionStatement,\n  file as File,\n  forInStatement as ForInStatement,\n  forStatement as ForStatement,\n  functionDeclaration as FunctionDeclaration,\n  functionExpression as FunctionExpression,\n  identifier as Identifier,\n  ifStatement as IfStatement,\n  labeledStatement as LabeledStatement,\n  stringLiteral as StringLiteral,\n  numericLiteral as NumericLiteral,\n  nullLiteral as NullLiteral,\n  booleanLiteral as BooleanLiteral,\n  regExpLiteral as RegExpLiteral,\n  logicalExpression as LogicalExpression,\n  memberExpression as MemberExpression,\n  newExpression as NewExpression,\n  program as Program,\n  objectExpression as ObjectExpression,\n  objectMethod as ObjectMethod,\n  objectProperty as ObjectProperty,\n  restElement as RestElement,\n  returnStatement as ReturnStatement,\n  sequenceExpression as SequenceExpression,\n  parenthesizedExpression as ParenthesizedExpression,\n  switchCase as SwitchCase,\n  switchStatement as SwitchStatement,\n  thisExpression as ThisExpression,\n  throwStatement as ThrowStatement,\n  tryStatement as TryStatement,\n  unaryExpression as UnaryExpression,\n  updateExpression as UpdateExpression,\n  variableDeclaration as VariableDeclaration,\n  variableDeclarator as VariableDeclarator,\n  whileStatement as WhileStatement,\n  withStatement as WithStatement,\n  assignmentPattern as AssignmentPattern,\n  arrayPattern as ArrayPattern,\n  arrowFunctionExpression as ArrowFunctionExpression,\n  classBody as ClassBody,\n  classExpression as ClassExpression,\n  classDeclaration as ClassDeclaration,\n  exportAllDeclaration as ExportAllDeclaration,\n  exportDefaultDeclaration as ExportDefaultDeclaration,\n  exportNamedDeclaration as ExportNamedDeclaration,\n  exportSpecifier as ExportSpecifier,\n  forOfStatement as ForOfStatement,\n  importDeclaration as ImportDeclaration,\n  importDefaultSpecifier as ImportDefaultSpecifier,\n  importNamespaceSpecifier as ImportNamespaceSpecifier,\n  importSpecifier as ImportSpecifier,\n  importExpression as ImportExpression,\n  metaProperty as MetaProperty,\n  classMethod as ClassMethod,\n  objectPattern as ObjectPattern,\n  spreadElement as SpreadElement,\n  super as Super,\n  taggedTemplateExpression as TaggedTemplateExpression,\n  templateElement as TemplateElement,\n  templateLiteral as TemplateLiteral,\n  yieldExpression as YieldExpression,\n  awaitExpression as AwaitExpression,\n  import as Import,\n  bigIntLiteral as BigIntLiteral,\n  exportNamespaceSpecifier as ExportNamespaceSpecifier,\n  optionalMemberExpression as OptionalMemberExpression,\n  optionalCallExpression as OptionalCallExpression,\n  classProperty as ClassProperty,\n  classAccessorProperty as ClassAccessorProperty,\n  classPrivateProperty as ClassPrivateProperty,\n  classPrivateMethod as ClassPrivateMethod,\n  privateName as PrivateName,\n  staticBlock as StaticBlock,\n  anyTypeAnnotation as AnyTypeAnnotation,\n  arrayTypeAnnotation as ArrayTypeAnnotation,\n  booleanTypeAnnotation as BooleanTypeAnnotation,\n  booleanLiteralTypeAnnotation as BooleanLiteralTypeAnnotation,\n  nullLiteralTypeAnnotation as NullLiteralTypeAnnotation,\n  classImplements as ClassImplements,\n  declareClass as DeclareClass,\n  declareFunction as DeclareFunction,\n  declareInterface as DeclareInterface,\n  declareModule as DeclareModule,\n  declareModuleExports as DeclareModuleExports,\n  declareTypeAlias as DeclareTypeAlias,\n  declareOpaqueType as DeclareOpaqueType,\n  declareVariable as DeclareVariable,\n  declareExportDeclaration as DeclareExportDeclaration,\n  declareExportAllDeclaration as DeclareExportAllDeclaration,\n  declaredPredicate as DeclaredPredicate,\n  existsTypeAnnotation as ExistsTypeAnnotation,\n  functionTypeAnnotation as FunctionTypeAnnotation,\n  functionTypeParam as FunctionTypeParam,\n  genericTypeAnnotation as GenericTypeAnnotation,\n  inferredPredicate as InferredPredicate,\n  interfaceExtends as InterfaceExtends,\n  interfaceDeclaration as InterfaceDeclaration,\n  interfaceTypeAnnotation as InterfaceTypeAnnotation,\n  intersectionTypeAnnotation as IntersectionTypeAnnotation,\n  mixedTypeAnnotation as MixedTypeAnnotation,\n  emptyTypeAnnotation as EmptyTypeAnnotation,\n  nullableTypeAnnotation as NullableTypeAnnotation,\n  numberLiteralTypeAnnotation as NumberLiteralTypeAnnotation,\n  numberTypeAnnotation as NumberTypeAnnotation,\n  objectTypeAnnotation as ObjectTypeAnnotation,\n  objectTypeInternalSlot as ObjectTypeInternalSlot,\n  objectTypeCallProperty as ObjectTypeCallProperty,\n  objectTypeIndexer as ObjectTypeIndexer,\n  objectTypeProperty as ObjectTypeProperty,\n  objectTypeSpreadProperty as ObjectTypeSpreadProperty,\n  opaqueType as OpaqueType,\n  qualifiedTypeIdentifier as QualifiedTypeIdentifier,\n  stringLiteralTypeAnnotation as StringLiteralTypeAnnotation,\n  stringTypeAnnotation as StringTypeAnnotation,\n  symbolTypeAnnotation as SymbolTypeAnnotation,\n  thisTypeAnnotation as ThisTypeAnnotation,\n  tupleTypeAnnotation as TupleTypeAnnotation,\n  typeofTypeAnnotation as TypeofTypeAnnotation,\n  typeAlias as TypeAlias,\n  typeAnnotation as TypeAnnotation,\n  typeCastExpression as TypeCastExpression,\n  typeParameter as TypeParameter,\n  typeParameterDeclaration as TypeParameterDeclaration,\n  typeParameterInstantiation as TypeParameterInstantiation,\n  unionTypeAnnotation as UnionTypeAnnotation,\n  variance as Variance,\n  voidTypeAnnotation as VoidTypeAnnotation,\n  enumDeclaration as EnumDeclaration,\n  enumBooleanBody as EnumBooleanBody,\n  enumNumberBody as EnumNumberBody,\n  enumStringBody as EnumStringBody,\n  enumSymbolBody as EnumSymbolBody,\n  enumBooleanMember as EnumBooleanMember,\n  enumNumberMember as EnumNumberMember,\n  enumStringMember as EnumStringMember,\n  enumDefaultedMember as EnumDefaultedMember,\n  indexedAccessType as IndexedAccessType,\n  optionalIndexedAccessType as OptionalIndexedAccessType,\n  jsxAttribute as JSXAttribute,\n  jsxClosingElement as JSXClosingElement,\n  jsxElement as JSXElement,\n  jsxEmptyExpression as JSXEmptyExpression,\n  jsxExpressionContainer as JSXExpressionContainer,\n  jsxSpreadChild as JSXSpreadChild,\n  jsxIdentifier as JSXIdentifier,\n  jsxMemberExpression as JSXMemberExpression,\n  jsxNamespacedName as JSXNamespacedName,\n  jsxOpeningElement as JSXOpeningElement,\n  jsxSpreadAttribute as JSXSpreadAttribute,\n  jsxText as JSXText,\n  jsxFragment as JSXFragment,\n  jsxOpeningFragment as JSXOpeningFragment,\n  jsxClosingFragment as JSXClosingFragment,\n  noop as Noop,\n  placeholder as Placeholder,\n  v8IntrinsicIdentifier as V8IntrinsicIdentifier,\n  argumentPlaceholder as ArgumentPlaceholder,\n  bindExpression as BindExpression,\n  importAttribute as ImportAttribute,\n  decorator as Decorator,\n  doExpression as DoExpression,\n  exportDefaultSpecifier as ExportDefaultSpecifier,\n  recordExpression as RecordExpression,\n  tupleExpression as TupleExpression,\n  decimalLiteral as DecimalLiteral,\n  moduleExpression as ModuleExpression,\n  topicReference as TopicReference,\n  pipelineTopicExpression as PipelineTopicExpression,\n  pipelineBareFunction as PipelineBareFunction,\n  pipelinePrimaryTopicReference as PipelinePrimaryTopicReference,\n  tsParameterProperty as TSParameterProperty,\n  tsDeclareFunction as TSDeclareFunction,\n  tsDeclareMethod as TSDeclareMethod,\n  tsQualifiedName as TSQualifiedName,\n  tsCallSignatureDeclaration as TSCallSignatureDeclaration,\n  tsConstructSignatureDeclaration as TSConstructSignatureDeclaration,\n  tsPropertySignature as TSPropertySignature,\n  tsMethodSignature as TSMethodSignature,\n  tsIndexSignature as TSIndexSignature,\n  tsAnyKeyword as TSAnyKeyword,\n  tsBooleanKeyword as TSBooleanKeyword,\n  tsBigIntKeyword as TSBigIntKeyword,\n  tsIntrinsicKeyword as TSIntrinsicKeyword,\n  tsNeverKeyword as TSNeverKeyword,\n  tsNullKeyword as TSNullKeyword,\n  tsNumberKeyword as TSNumberKeyword,\n  tsObjectKeyword as TSObjectKeyword,\n  tsStringKeyword as TSStringKeyword,\n  tsSymbolKeyword as TSSymbolKeyword,\n  tsUndefinedKeyword as TSUndefinedKeyword,\n  tsUnknownKeyword as TSUnknownKeyword,\n  tsVoidKeyword as TSVoidKeyword,\n  tsThisType as TSThisType,\n  tsFunctionType as TSFunctionType,\n  tsConstructorType as TSConstructorType,\n  tsTypeReference as TSTypeReference,\n  tsTypePredicate as TSTypePredicate,\n  tsTypeQuery as TSTypeQuery,\n  tsTypeLiteral as TSTypeLiteral,\n  tsArrayType as TSArrayType,\n  tsTupleType as TSTupleType,\n  tsOptionalType as TSOptionalType,\n  tsRestType as TSRestType,\n  tsNamedTupleMember as TSNamedTupleMember,\n  tsUnionType as TSUnionType,\n  tsIntersectionType as TSIntersectionType,\n  tsConditionalType as TSConditionalType,\n  tsInferType as TSInferType,\n  tsParenthesizedType as TSParenthesizedType,\n  tsTypeOperator as TSTypeOperator,\n  tsIndexedAccessType as TSIndexedAccessType,\n  tsMappedType as TSMappedType,\n  tsLiteralType as TSLiteralType,\n  tsExpressionWithTypeArguments as TSExpressionWithTypeArguments,\n  tsInterfaceDeclaration as TSInterfaceDeclaration,\n  tsInterfaceBody as TSInterfaceBody,\n  tsTypeAliasDeclaration as TSTypeAliasDeclaration,\n  tsInstantiationExpression as TSInstantiationExpression,\n  tsAsExpression as TSAsExpression,\n  tsSatisfiesExpression as TSSatisfiesExpression,\n  tsTypeAssertion as TSTypeAssertion,\n  tsEnumDeclaration as TSEnumDeclaration,\n  tsEnumMember as TSEnumMember,\n  tsModuleDeclaration as TSModuleDeclaration,\n  tsModuleBlock as TSModuleBlock,\n  tsImportType as TSImportType,\n  tsImportEqualsDeclaration as TSImportEqualsDeclaration,\n  tsExternalModuleReference as TSExternalModuleReference,\n  tsNonNullExpression as TSNonNullExpression,\n  tsExportAssignment as TSExportAssignment,\n  tsNamespaceExportDeclaration as TSNamespaceExportDeclaration,\n  tsTypeAnnotation as TSTypeAnnotation,\n  tsTypeParameterInstantiation as TSTypeParameterInstantiation,\n  tsTypeParameterDeclaration as TSTypeParameterDeclaration,\n  tsTypeParameter as TSTypeParameter,\n  numberLiteral as NumberLiteral,\n  regexLiteral as RegexLiteral,\n  restProperty as RestProperty,\n  spreadProperty as SpreadProperty,\n} from \"./index.ts\";\n",null,"import { numericLiteral, unaryExpression } from \"./generated/index.ts\";\n\nexport function buildUndefinedNode() {\n  return unaryExpression(\"void\", numericLiteral(0), true);\n}\n",null,"import { NODE_FIELDS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\nimport { isFile, isIdentifier } from \"../validators/generated/index.ts\";\n\nconst { hasOwn } = process.env.BABEL_8_BREAKING\n  ? Object\n  : { hasOwn: Function.call.bind(Object.prototype.hasOwnProperty) };\n\ntype CommentCache = Map<t.Comment, t.Comment>;\n\n// This function will never be called for comments, only for real nodes.\nfunction cloneIfNode(\n  obj: t.Node | undefined | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (obj && typeof obj.type === \"string\") {\n    return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);\n  }\n\n  return obj;\n}\n\nfunction cloneIfNodeOrArray(\n  obj: t.Node | undefined | null | (t.Node | undefined | null)[],\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (Array.isArray(obj)) {\n    return obj.map(node => cloneIfNode(node, deep, withoutLoc, commentsCache));\n  }\n  return cloneIfNode(obj, deep, withoutLoc, commentsCache);\n}\n\n/**\n * Create a clone of a `node` including only properties belonging to the node.\n * If the second parameter is `false`, cloneNode performs a shallow clone.\n * If the third parameter is true, the cloned nodes exclude location properties.\n */\nexport default function cloneNode<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n): T {\n  return cloneNodeInternal(node, deep, withoutLoc, new Map());\n}\n\nfunction cloneNodeInternal<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n  commentsCache: CommentCache,\n): T {\n  if (!node) return node;\n\n  const { type } = node;\n  const newNode: any = { type: node.type };\n\n  // Special-case identifiers since they are the most cloned nodes.\n  if (isIdentifier(node)) {\n    newNode.name = node.name;\n\n    if (hasOwn(node, \"optional\") && typeof node.optional === \"boolean\") {\n      newNode.optional = node.optional;\n    }\n\n    if (hasOwn(node, \"typeAnnotation\")) {\n      newNode.typeAnnotation = deep\n        ? cloneIfNodeOrArray(\n            node.typeAnnotation,\n            true,\n            withoutLoc,\n            commentsCache,\n          )\n        : node.typeAnnotation;\n    }\n  } else if (!hasOwn(NODE_FIELDS, type)) {\n    throw new Error(`Unknown node type: \"${type}\"`);\n  } else {\n    for (const field of Object.keys(NODE_FIELDS[type])) {\n      if (hasOwn(node, field)) {\n        if (deep) {\n          newNode[field] =\n            isFile(node) && field === \"comments\"\n              ? maybeCloneComments(\n                  node.comments,\n                  deep,\n                  withoutLoc,\n                  commentsCache,\n                )\n              : cloneIfNodeOrArray(\n                  // @ts-expect-error node[field] has been guarded by has check\n                  node[field],\n                  true,\n                  withoutLoc,\n                  commentsCache,\n                );\n        } else {\n          newNode[field] =\n            // @ts-expect-error node[field] has been guarded by has check\n            node[field];\n        }\n      }\n    }\n  }\n\n  if (hasOwn(node, \"loc\")) {\n    if (withoutLoc) {\n      newNode.loc = null;\n    } else {\n      newNode.loc = node.loc;\n    }\n  }\n  if (hasOwn(node, \"leadingComments\")) {\n    newNode.leadingComments = maybeCloneComments(\n      node.leadingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"innerComments\")) {\n    newNode.innerComments = maybeCloneComments(\n      node.innerComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"trailingComments\")) {\n    newNode.trailingComments = maybeCloneComments(\n      node.trailingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"extra\")) {\n    newNode.extra = {\n      ...node.extra,\n    };\n  }\n\n  return newNode;\n}\n\nfunction maybeCloneComments<T extends t.Comment>(\n  comments: ReadonlyArray<T> | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: Map<T, T>,\n): ReadonlyArray<T> | null {\n  if (!comments || !deep) {\n    return comments;\n  }\n  return comments.map(comment => {\n    const cache = commentsCache.get(comment);\n    if (cache) return cache;\n\n    const { type, value, loc } = comment;\n\n    const ret = { type, value, loc } as T;\n    if (withoutLoc) {\n      ret.loc = null;\n    }\n\n    commentsCache.set(comment, ret);\n\n    return ret;\n  });\n}\n",null,"import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a shallow clone of a `node`, including only\n * properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function clone<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false);\n}\n",null,"import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function cloneDeep<T extends t.Node>(node: T): T {\n  return cloneNode(node);\n}\n",null,"import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * excluding `_private` and location properties.\n */\nexport default function cloneDeepWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ true, /* withoutLoc */ true);\n}\n",null,"import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a shallow clone of a `node` excluding `_private` and location properties.\n */\nexport default function cloneWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false, /* withoutLoc */ true);\n}\n",null,"import addComments from \"./addComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Add comment of certain type to a node.\n */\nexport default function addComment<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  content: string,\n  line?: boolean,\n): T {\n  return addComments(node, type, [\n    {\n      type: line ? \"CommentLine\" : \"CommentBlock\",\n      value: content,\n    } as t.Comment,\n  ]);\n}\n",null,"import type * as t from \"../index.ts\";\n\n/**\n * Add comments of certain type to a node.\n */\nexport default function addComments<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  comments: Array<t.Comment>,\n): T {\n  if (!comments || !node) return node;\n\n  const key = `${type}Comments` as const;\n\n  if (node[key]) {\n    if (type === \"leading\") {\n      node[key] = comments.concat(node[key]);\n    } else {\n      node[key].push(...comments);\n    }\n  } else {\n    node[key] = comments;\n  }\n\n  return node;\n}\n",null,"import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritInnerComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"innerComments\", child, parent);\n}\n",null,"import type * as t from \"../index.ts\";\n\nexport default function inherit<\n  C extends t.Node | undefined,\n  P extends t.Node | undefined,\n>(key: keyof C & keyof P, child: C, parent: P): void {\n  if (child && parent) {\n    // @ts-expect-error Could further refine key definitions\n    child[key] = Array.from(\n      new Set([].concat(child[key], parent[key]).filter(Boolean)),\n    );\n  }\n}\n",null,"import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritLeadingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"leadingComments\", child, parent);\n}\n",null,"import inheritTrailingComments from \"./inheritTrailingComments.ts\";\nimport inheritLeadingComments from \"./inheritLeadingComments.ts\";\nimport inheritInnerComments from \"./inheritInnerComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Inherit all unique comments from `parent` node to `child` node.\n */\nexport default function inheritsComments<T extends t.Node>(\n  child: T,\n  parent: t.Node,\n): T {\n  inheritTrailingComments(child, parent);\n  inheritLeadingComments(child, parent);\n  inheritInnerComments(child, parent);\n\n  return child;\n}\n",null,"import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritTrailingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"trailingComments\", child, parent);\n}\n",null,"import { COMMENT_KEYS } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Remove comment properties from a node.\n */\nexport default function removeComments<T extends t.Node>(node: T): T {\n  COMMENT_KEYS.forEach(key => {\n    node[key] = null;\n  });\n\n  return node;\n}\n",null,"/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport { FLIPPED_ALIAS_KEYS } from \"../../definitions/index.ts\";\n\nexport const STANDARDIZED_TYPES = FLIPPED_ALIAS_KEYS[\"Standardized\"];\nexport const EXPRESSION_TYPES = FLIPPED_ALIAS_KEYS[\"Expression\"];\nexport const BINARY_TYPES = FLIPPED_ALIAS_KEYS[\"Binary\"];\nexport const SCOPABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Scopable\"];\nexport const BLOCKPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"BlockParent\"];\nexport const BLOCK_TYPES = FLIPPED_ALIAS_KEYS[\"Block\"];\nexport const STATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"Statement\"];\nexport const TERMINATORLESS_TYPES = FLIPPED_ALIAS_KEYS[\"Terminatorless\"];\nexport const COMPLETIONSTATEMENT_TYPES =\n  FLIPPED_ALIAS_KEYS[\"CompletionStatement\"];\nexport const CONDITIONAL_TYPES = FLIPPED_ALIAS_KEYS[\"Conditional\"];\nexport const LOOP_TYPES = FLIPPED_ALIAS_KEYS[\"Loop\"];\nexport const WHILE_TYPES = FLIPPED_ALIAS_KEYS[\"While\"];\nexport const EXPRESSIONWRAPPER_TYPES = FLIPPED_ALIAS_KEYS[\"ExpressionWrapper\"];\nexport const FOR_TYPES = FLIPPED_ALIAS_KEYS[\"For\"];\nexport const FORXSTATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"ForXStatement\"];\nexport const FUNCTION_TYPES = FLIPPED_ALIAS_KEYS[\"Function\"];\nexport const FUNCTIONPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"FunctionParent\"];\nexport const PUREISH_TYPES = FLIPPED_ALIAS_KEYS[\"Pureish\"];\nexport const DECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"Declaration\"];\nexport const PATTERNLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"PatternLike\"];\nexport const LVAL_TYPES = FLIPPED_ALIAS_KEYS[\"LVal\"];\nexport const TSENTITYNAME_TYPES = FLIPPED_ALIAS_KEYS[\"TSEntityName\"];\nexport const LITERAL_TYPES = FLIPPED_ALIAS_KEYS[\"Literal\"];\nexport const IMMUTABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Immutable\"];\nexport const USERWHITESPACABLE_TYPES = FLIPPED_ALIAS_KEYS[\"UserWhitespacable\"];\nexport const METHOD_TYPES = FLIPPED_ALIAS_KEYS[\"Method\"];\nexport const OBJECTMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"ObjectMember\"];\nexport const PROPERTY_TYPES = FLIPPED_ALIAS_KEYS[\"Property\"];\nexport const UNARYLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"UnaryLike\"];\nexport const PATTERN_TYPES = FLIPPED_ALIAS_KEYS[\"Pattern\"];\nexport const CLASS_TYPES = FLIPPED_ALIAS_KEYS[\"Class\"];\nexport const IMPORTOREXPORTDECLARATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"ImportOrExportDeclaration\"];\nexport const EXPORTDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"ExportDeclaration\"];\nexport const MODULESPECIFIER_TYPES = FLIPPED_ALIAS_KEYS[\"ModuleSpecifier\"];\nexport const ACCESSOR_TYPES = FLIPPED_ALIAS_KEYS[\"Accessor\"];\nexport const PRIVATE_TYPES = FLIPPED_ALIAS_KEYS[\"Private\"];\nexport const FLOW_TYPES = FLIPPED_ALIAS_KEYS[\"Flow\"];\nexport const FLOWTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowType\"];\nexport const FLOWBASEANNOTATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"FlowBaseAnnotation\"];\nexport const FLOWDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"FlowDeclaration\"];\nexport const FLOWPREDICATE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowPredicate\"];\nexport const ENUMBODY_TYPES = FLIPPED_ALIAS_KEYS[\"EnumBody\"];\nexport const ENUMMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"EnumMember\"];\nexport const JSX_TYPES = FLIPPED_ALIAS_KEYS[\"JSX\"];\nexport const MISCELLANEOUS_TYPES = FLIPPED_ALIAS_KEYS[\"Miscellaneous\"];\nexport const TYPESCRIPT_TYPES = FLIPPED_ALIAS_KEYS[\"TypeScript\"];\nexport const TSTYPEELEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"TSTypeElement\"];\nexport const TSTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSType\"];\nexport const TSBASETYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSBaseType\"];\n/**\n * @deprecated migrate to IMPORTOREXPORTDECLARATION_TYPES.\n */\nexport const MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;\n",null,"import toBlock from \"./toBlock.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Ensure the `key` (defaults to \"body\") of a `node` is a block.\n * Casting it to a block if it is not.\n *\n * Returns the BlockStatement\n */\nexport default function ensureBlock(\n  node: t.Node,\n  key: string = \"body\",\n): t.BlockStatement {\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  const result = toBlock(node[key], node);\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  node[key] = result;\n  return result;\n}\n",null,"import {\n  isBlockStatement,\n  isFunction,\n  isEmptyStatement,\n  isStatement,\n} from \"../validators/generated/index.ts\";\nimport {\n  returnStatement,\n  expressionStatement,\n  blockStatement,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toBlock(\n  node: t.Statement | t.Expression,\n  parent?: t.Node,\n): t.BlockStatement {\n  if (isBlockStatement(node)) {\n    return node;\n  }\n\n  let blockNodes: t.Statement[] = [];\n\n  if (isEmptyStatement(node)) {\n    blockNodes = [];\n  } else {\n    if (!isStatement(node)) {\n      if (isFunction(parent)) {\n        node = returnStatement(node);\n      } else {\n        node = expressionStatement(node);\n      }\n    }\n\n    blockNodes = [node];\n  }\n\n  return blockStatement(blockNodes);\n}\n",null,"import toIdentifier from \"./toIdentifier.ts\";\n\nexport default function toBindingIdentifierName(name: string): string {\n  name = toIdentifier(name);\n  if (name === \"eval\" || name === \"arguments\") name = \"_\" + name;\n\n  return name;\n}\n",null,"import isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isIdentifierChar } from \"@babel/helper-validator-identifier\";\n\nexport default function toIdentifier(input: string): string {\n  input = input + \"\";\n\n  // replace all non-valid identifiers with dashes\n  let name = \"\";\n  for (const c of input) {\n    name += isIdentifierChar(c.codePointAt(0)) ? c : \"-\";\n  }\n\n  // remove all dashes and numbers from start of name\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  // camel case\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!isValidIdentifier(name)) {\n    name = `_${name}`;\n  }\n\n  return name || \"_\";\n}\n",null,"import { isIdentifier } from \"../validators/generated/index.ts\";\nimport { stringLiteral } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toComputedKey(\n  node:\n    | t.ObjectMember\n    | t.ObjectProperty\n    | t.ClassMethod\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.MemberExpression\n    | t.OptionalMemberExpression,\n  // @ts-expect-error todo(flow->ts): maybe check the type of node before accessing .key and .property\n  key: t.Expression | t.PrivateName = node.key || node.property,\n) {\n  if (!node.computed && isIdentifier(key)) key = stringLiteral(key.name);\n\n  return key;\n}\n",null,"import {\n  isExpression,\n  isFunction,\n  isClass,\n  isExpressionStatement,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toExpression as {\n  (node: t.Function): t.FunctionExpression;\n  (node: t.Class): t.ClassExpression;\n  (\n    node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n  ): t.Expression;\n};\n\nfunction toExpression(\n  node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n): t.Expression {\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  // return unmodified node\n  // important for things like ArrowFunctions where\n  // type change from ArrowFunction to FunctionExpression\n  // produces bugs like -> `()=>a` to `function () a`\n  // without generating a BlockStatement for it\n  // ref: https://github.com/babel/babili/issues/130\n  if (isExpression(node)) {\n    return node;\n  }\n\n  // convert all classes and functions\n  // ClassDeclaration -> ClassExpression\n  // FunctionDeclaration, ObjectMethod, ClassMethod -> FunctionExpression\n  if (isClass(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"ClassExpression\";\n  } else if (isFunction(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"FunctionExpression\";\n  }\n\n  // if it's still not an expression\n  if (!isExpression(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}\n",null,"import {\n  isIdentifier,\n  isStringLiteral,\n} from \"../validators/generated/index.ts\";\nimport cloneNode from \"../clone/cloneNode.ts\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n",null,"import traverseFast from \"../traverse/traverseFast.ts\";\nimport removeProperties from \"./removeProperties.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function removePropertiesDeep<T extends t.Node>(\n  tree: T,\n  opts?: { preserveComments: boolean } | null,\n): T {\n  traverseFast(tree, removeProperties, opts);\n\n  return tree;\n}\n",null,"import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * A prefix AST traversal implementation meant for simple searching\n * and processing.\n */\nexport default function traverseFast<Options = {}>(\n  node: t.Node | null | undefined,\n  enter: (node: t.Node, opts?: Options) => void,\n  opts?: Options,\n): void {\n  if (!node) return;\n\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  opts = opts || ({} as Options);\n  enter(node, opts);\n\n  for (const key of keys) {\n    const subNode: t.Node | undefined | null =\n      // @ts-expect-error key must present in node\n      node[key];\n\n    if (Array.isArray(subNode)) {\n      for (const node of subNode) {\n        traverseFast(node, enter, opts);\n      }\n    } else {\n      traverseFast(subNode, enter, opts);\n    }\n  }\n}\n",null,"import { COMMENT_KEYS } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\nconst CLEAR_KEYS = [\n  \"tokens\", // only exist in t.File\n  \"start\",\n  \"end\",\n  \"loc\",\n  // Fixme: should be extra.raw / extra.rawValue?\n  \"raw\",\n  \"rawValue\",\n] as const;\n\nconst CLEAR_KEYS_PLUS_COMMENTS = [\n  ...COMMENT_KEYS,\n  \"comments\",\n  ...CLEAR_KEYS,\n] as const;\n\nexport type Options = { preserveComments?: boolean };\n/**\n * Remove all of the _* properties from a node along with the additional metadata\n * properties like location data and raw token data.\n */\nexport default function removeProperties(\n  node: t.Node,\n  opts: Options = {},\n): void {\n  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  for (const key of map) {\n    // @ts-expect-error tokens only exist in t.File\n    if (node[key] != null) node[key] = undefined;\n  }\n\n  for (const key of Object.keys(node)) {\n    // @ts-expect-error string can not index node\n    if (key[0] === \"_\" && node[key] != null) node[key] = undefined;\n  }\n\n  const symbols: Array<symbol> = Object.getOwnPropertySymbols(node);\n  for (const sym of symbols) {\n    // @ts-expect-error Fixme: document symbol properties\n    node[sym] = null;\n  }\n}\n",null,"import {\n  isStatement,\n  isFunction,\n  isClass,\n  isAssignmentExpression,\n} from \"../validators/generated/index.ts\";\nimport { expressionStatement } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toStatement as {\n  (node: t.AssignmentExpression, ignore?: boolean): t.ExpressionStatement;\n\n  <T extends t.Statement>(node: T, ignore: false): T;\n  <T extends t.Statement>(node: T, ignore?: boolean): T | false;\n\n  (node: t.Class, ignore: false): t.ClassDeclaration;\n  (node: t.Class, ignore?: boolean): t.ClassDeclaration | false;\n\n  (node: t.Function, ignore: false): t.FunctionDeclaration;\n  (node: t.Function, ignore?: boolean): t.FunctionDeclaration | false;\n\n  (node: t.Node, ignore: false): t.Statement;\n  (node: t.Node, ignore?: boolean): t.Statement | false;\n};\n\nfunction toStatement(node: t.Node, ignore?: boolean): t.Statement | false {\n  if (isStatement(node)) {\n    return node;\n  }\n\n  let mustHaveId = false;\n  let newType;\n\n  if (isClass(node)) {\n    mustHaveId = true;\n    newType = \"ClassDeclaration\" as const;\n  } else if (isFunction(node)) {\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\" as const;\n  } else if (isAssignmentExpression(node)) {\n    return expressionStatement(node);\n  }\n\n  // @ts-expect-error todo(flow->ts): node.id might be missing\n  if (mustHaveId && !node.id) {\n    newType = false;\n  }\n\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(`cannot turn ${node.type} to a statement`);\n    }\n  }\n\n  // @ts-expect-error manipulating node.type\n  node.type = newType;\n\n  // @ts-expect-error todo(flow->ts) refactor to avoid type unsafe mutations like reassigning node type above\n  return node;\n}\n",null,"import isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport {\n  identifier,\n  booleanLiteral,\n  nullLiteral,\n  stringLiteral,\n  numericLiteral,\n  regExpLiteral,\n  arrayExpression,\n  objectProperty,\n  objectExpression,\n  unaryExpression,\n  binaryExpression,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default valueToNode as {\n  (value: undefined): t.Identifier; // TODO: This should return \"void 0\"\n  (value: boolean): t.BooleanLiteral;\n  (value: null): t.NullLiteral;\n  (value: string): t.StringLiteral;\n  // Infinities and NaN need to use a BinaryExpression; negative values must be wrapped in UnaryExpression\n  (value: number): t.NumericLiteral | t.BinaryExpression | t.UnaryExpression;\n  (value: RegExp): t.RegExpLiteral;\n  (value: ReadonlyArray<unknown>): t.ArrayExpression;\n\n  // this throws with objects that are not plain objects,\n  // or if there are non-valueToNode-able values\n  (value: object): t.ObjectExpression;\n\n  (value: unknown): t.Expression;\n};\n\n// @ts-expect-error: Object.prototype.toString must return a string\nconst objectToString: (value: unknown) => string = Function.call.bind(\n  Object.prototype.toString,\n);\n\nfunction isRegExp(value: unknown): value is RegExp {\n  return objectToString(value) === \"[object RegExp]\";\n}\n\nfunction isPlainObject(value: unknown): value is object {\n  if (\n    typeof value !== \"object\" ||\n    value === null ||\n    Object.prototype.toString.call(value) !== \"[object Object]\"\n  ) {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  // Object.prototype's __proto__ is null. Every other class's __proto__.__proto__ is\n  // not null by default. We cannot check if proto === Object.prototype because it\n  // could come from another realm.\n  return proto === null || Object.getPrototypeOf(proto) === null;\n}\n\nfunction valueToNode(value: unknown): t.Expression {\n  // undefined\n  if (value === undefined) {\n    return identifier(\"undefined\");\n  }\n\n  // boolean\n  if (value === true || value === false) {\n    return booleanLiteral(value);\n  }\n\n  // null\n  if (value === null) {\n    return nullLiteral();\n  }\n\n  // strings\n  if (typeof value === \"string\") {\n    return stringLiteral(value);\n  }\n\n  // numbers\n  if (typeof value === \"number\") {\n    let result;\n    if (Number.isFinite(value)) {\n      result = numericLiteral(Math.abs(value));\n    } else {\n      let numerator;\n      if (Number.isNaN(value)) {\n        // NaN\n        numerator = numericLiteral(0);\n      } else {\n        // Infinity / -Infinity\n        numerator = numericLiteral(1);\n      }\n\n      result = binaryExpression(\"/\", numerator, numericLiteral(0));\n    }\n\n    if (value < 0 || Object.is(value, -0)) {\n      result = unaryExpression(\"-\", result);\n    }\n\n    return result;\n  }\n\n  // regexes\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return regExpLiteral(pattern, flags);\n  }\n\n  // array\n  if (Array.isArray(value)) {\n    return arrayExpression(value.map(valueToNode));\n  }\n\n  // object\n  if (isPlainObject(value)) {\n    const props = [];\n    for (const key of Object.keys(value)) {\n      let nodeKey;\n      if (isValidIdentifier(key)) {\n        nodeKey = identifier(key);\n      } else {\n        nodeKey = stringLiteral(key);\n      }\n      props.push(\n        objectProperty(\n          nodeKey,\n          valueToNode(\n            // @ts-expect-error key must present in value\n            value[key],\n          ),\n        ),\n      );\n    }\n    return objectExpression(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}\n",null,"import { memberExpression } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Append a node to a member expression.\n */\nexport default function appendToMemberExpression(\n  member: t.MemberExpression,\n  append: t.MemberExpression[\"property\"],\n  computed: boolean = false,\n): t.MemberExpression {\n  member.object = memberExpression(\n    member.object,\n    member.property,\n    member.computed,\n  );\n  member.property = append;\n  member.computed = !!computed;\n\n  return member;\n}\n",null,"import { INHERIT_KEYS } from \"../constants/index.ts\";\nimport inheritsComments from \"../comments/inheritsComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Inherit all contextual properties from `parent` node to `child` node.\n */\nexport default function inherits<T extends t.Node | null | undefined>(\n  child: T,\n  parent: t.Node | null | undefined,\n): T {\n  if (!child || !parent) return child;\n\n  // optionally inherit specific properties if not null\n  for (const key of INHERIT_KEYS.optional) {\n    // @ts-expect-error Fixme: refine parent types\n    if (child[key] == null) {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit \"private\" properties\n  for (const key of Object.keys(parent)) {\n    if (key[0] === \"_\" && key !== \"__clone\") {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit select properties\n  for (const key of INHERIT_KEYS.force) {\n    // @ts-expect-error Fixme: refine parent types\n    child[key] = parent[key];\n  }\n\n  inheritsComments(child, parent);\n\n  return child;\n}\n",null,"import { memberExpression } from \"../builders/generated/index.ts\";\nimport { isSuper } from \"../index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Prepend a node to a member expression.\n */\nexport default function prependToMemberExpression<\n  T extends Pick<t.MemberExpression, \"object\" | \"property\">,\n>(member: T, prepend: t.MemberExpression[\"object\"]): T {\n  if (isSuper(member.object)) {\n    throw new Error(\n      \"Cannot prepend node to super property access (`super.foo`).\",\n    );\n  }\n  member.object = memberExpression(prepend, member.object);\n\n  return member;\n}\n",null,"import {\n  isExportDeclaration,\n  isIdentifier,\n  isDeclaration,\n  isFunctionDeclaration,\n  isFunctionExpression,\n  isExportAllDeclaration,\n  isAssignmentExpression,\n  isUnaryExpression,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport { getBindingIdentifiers as default };\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates: true,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, Array<t.Identifier>>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: false,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n\n/**\n * Return a list of binding identifiers associated with the input `node`.\n */\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  const search: t.Node[] = [].concat(node);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n\n    if (\n      newBindingsOnly &&\n      // These two nodes do not introduce _new_ bindings, but they are included\n      // in getBindingIdentifiers.keys for backwards compatibility.\n      // TODO(@nicolo-ribaudo): Check if we can remove them from .keys in a\n      // backward-compatible way, and if not what we need to do to remove them\n      // in Babel 8.\n      (isAssignmentExpression(id) || isUnaryExpression(id))\n    ) {\n      continue;\n    }\n\n    const keys =\n      // @ts-expect-error getBindingIdentifiers.keys do not cover all AST types\n      getBindingIdentifiers.keys[id.type];\n\n    if (isIdentifier(id)) {\n      if (duplicates) {\n        const _ids = (ids[id.name] = ids[id.name] || []);\n        _ids.push(id);\n      } else {\n        ids[id.name] = id;\n      }\n      continue;\n    }\n\n    if (isExportDeclaration(id) && !isExportAllDeclaration(id)) {\n      if (isDeclaration(id.declaration)) {\n        search.push(id.declaration);\n      }\n      continue;\n    }\n\n    if (outerOnly) {\n      if (isFunctionDeclaration(id)) {\n        search.push(id.id);\n        continue;\n      }\n\n      if (isFunctionExpression(id)) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const nodes =\n          // @ts-expect-error key must present in id\n          id[key] as t.Node[] | t.Node | undefined | null;\n        if (nodes) {\n          Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes);\n        }\n      }\n    }\n  }\n\n  // $FlowIssue Object.create() seems broken\n  return ids;\n}\n\n/**\n * Mapping of types to their identifier keys.\n */\ngetBindingIdentifiers.keys = {\n  DeclareClass: [\"id\"],\n  DeclareFunction: [\"id\"],\n  DeclareModule: [\"id\"],\n  DeclareVariable: [\"id\"],\n  DeclareInterface: [\"id\"],\n  DeclareTypeAlias: [\"id\"],\n  DeclareOpaqueType: [\"id\"],\n  InterfaceDeclaration: [\"id\"],\n  TypeAlias: [\"id\"],\n  OpaqueType: [\"id\"],\n\n  CatchClause: [\"param\"],\n  LabeledStatement: [\"label\"],\n  UnaryExpression: [\"argument\"],\n  AssignmentExpression: [\"left\"],\n\n  ImportSpecifier: [\"local\"],\n  ImportNamespaceSpecifier: [\"local\"],\n  ImportDefaultSpecifier: [\"local\"],\n  ImportDeclaration: [\"specifiers\"],\n\n  ExportSpecifier: [\"exported\"],\n  ExportNamespaceSpecifier: [\"exported\"],\n  ExportDefaultSpecifier: [\"exported\"],\n\n  FunctionDeclaration: [\"id\", \"params\"],\n  FunctionExpression: [\"id\", \"params\"],\n  ArrowFunctionExpression: [\"params\"],\n  ObjectMethod: [\"params\"],\n  ClassMethod: [\"params\"],\n  ClassPrivateMethod: [\"params\"],\n\n  ForInStatement: [\"left\"],\n  ForOfStatement: [\"left\"],\n\n  ClassDeclaration: [\"id\"],\n  ClassExpression: [\"id\"],\n\n  RestElement: [\"argument\"],\n  UpdateExpression: [\"argument\"],\n\n  ObjectProperty: [\"value\"],\n\n  AssignmentPattern: [\"left\"],\n  ArrayPattern: [\"elements\"],\n  ObjectPattern: [\"properties\"],\n\n  VariableDeclaration: [\"declarations\"],\n  VariableDeclarator: [\"id\"],\n};\n",null,"import getBindingIdentifiers from \"./getBindingIdentifiers.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default getOuterBindingIdentifiers as {\n  (node: t.Node, duplicates: true): Record<string, Array<t.Identifier>>;\n  (node: t.Node, duplicates?: false): Record<string, t.Identifier>;\n  (\n    node: t.Node,\n    duplicates?: boolean,\n  ): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n};\n\nfunction getOuterBindingIdentifiers(\n  node: t.Node,\n  duplicates: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  return getBindingIdentifiers(node, duplicates, true);\n}\n",null,"import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport type TraversalAncestors = Array<{\n  node: t.Node;\n  key: string;\n  index?: number;\n}>;\n\nexport type TraversalHandler<T> = (\n  this: undefined,\n  node: t.Node,\n  parent: TraversalAncestors,\n  state: T,\n) => void;\n\nexport type TraversalHandlers<T> = {\n  enter?: TraversalHandler<T>;\n  exit?: TraversalHandler<T>;\n};\n\n/**\n * A general AST traversal with both prefix and postfix handlers, and a\n * state object. Exposes ancestry data to each handler so that more complex\n * AST data can be taken into account.\n */\nexport default function traverse<T>(\n  node: t.Node,\n  handlers: TraversalHandler<T> | TraversalHandlers<T>,\n  state?: T,\n): void {\n  if (typeof handlers === \"function\") {\n    handlers = { enter: handlers };\n  }\n\n  const { enter, exit } = handlers;\n\n  traverseSimpleImpl(node, enter, exit, state, []);\n}\n\nfunction traverseSimpleImpl<T>(\n  node: any,\n  enter: Function | undefined,\n  exit: Function | undefined,\n  state: T | undefined,\n  ancestors: TraversalAncestors,\n) {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  if (enter) enter(node, ancestors, state);\n\n  for (const key of keys) {\n    const subNode = node[key];\n\n    if (Array.isArray(subNode)) {\n      for (let i = 0; i < subNode.length; i++) {\n        const child = subNode[i];\n        if (!child) continue;\n\n        ancestors.push({\n          node,\n          key,\n          index: i,\n        });\n\n        traverseSimpleImpl(child, enter, exit, state, ancestors);\n\n        ancestors.pop();\n      }\n    } else if (subNode) {\n      ancestors.push({\n        node,\n        key,\n      });\n\n      traverseSimpleImpl(subNode, enter, exit, state, ancestors);\n\n      ancestors.pop();\n    }\n  }\n\n  if (exit) exit(node, ancestors, state);\n}\n",null,"import getBindingIdentifiers from \"../retrievers/getBindingIdentifiers.ts\";\nimport type * as t from \"../index.ts\";\n/**\n * Check if the input `node` is a binding identifier.\n */\nexport default function isBinding(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  if (\n    grandparent &&\n    node.type === \"Identifier\" &&\n    parent.type === \"ObjectProperty\" &&\n    grandparent.type === \"ObjectExpression\"\n  ) {\n    // We need to special-case this, because getBindingIdentifiers\n    // has an ObjectProperty->value entry for destructuring patterns.\n    return false;\n  }\n\n  const keys =\n    // @ts-expect-error getBindingIdentifiers.keys does not cover all AST types\n    getBindingIdentifiers.keys[parent.type];\n  if (keys) {\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const val =\n        // @ts-expect-error key must present in parent\n        parent[key];\n      if (Array.isArray(val)) {\n        if (val.indexOf(node) >= 0) return true;\n      } else {\n        if (val === node) return true;\n      }\n    }\n  }\n\n  return false;\n}\n",null,"import {\n  isClassDeclaration,\n  isFunctionDeclaration,\n} from \"./generated/index.ts\";\nimport isLet from \"./isLet.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is block scoped.\n */\nexport default function isBlockScoped(node: t.Node): boolean {\n  return isFunctionDeclaration(node) || isClassDeclaration(node) || isLet(node);\n}\n",null,"import { isVariableDeclaration } from \"./generated/index.ts\";\nimport { BLOCK_SCOPED_SYMBOL } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a `let` variable declaration.\n */\nexport default function isLet(node: t.Node): boolean {\n  return (\n    isVariableDeclaration(node) &&\n    (node.kind !== \"var\" ||\n      // @ts-expect-error Fixme: document private properties\n      node[BLOCK_SCOPED_SYMBOL])\n  );\n}\n",null,"import isType from \"./isType.ts\";\nimport { isIdentifier } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is definitely immutable.\n */\nexport default function isImmutable(node: t.Node): boolean {\n  if (isType(node.type, \"Immutable\")) return true;\n\n  if (isIdentifier(node)) {\n    if (node.name === \"undefined\") {\n      // immutable!\n      return true;\n    } else {\n      // no idea...\n      return false;\n    }\n  }\n\n  return false;\n}\n",null,"import { NODE_FIELDS, VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if two nodes are equivalent\n */\nexport default function isNodesEquivalent<T extends Partial<t.Node>>(\n  a: T,\n  b: any,\n): b is T {\n  if (\n    typeof a !== \"object\" ||\n    typeof b !== \"object\" ||\n    a == null ||\n    b == null\n  ) {\n    return a === b;\n  }\n\n  if (a.type !== b.type) {\n    return false;\n  }\n\n  const fields = Object.keys(NODE_FIELDS[a.type] || a.type);\n  const visitorKeys = VISITOR_KEYS[a.type];\n\n  for (const field of fields) {\n    const val_a =\n      // @ts-expect-error field must present in a\n      a[field];\n    const val_b = b[field];\n    if (typeof val_a !== typeof val_b) {\n      return false;\n    }\n    if (val_a == null && val_b == null) {\n      continue;\n    } else if (val_a == null || val_b == null) {\n      return false;\n    }\n\n    if (Array.isArray(val_a)) {\n      if (!Array.isArray(val_b)) {\n        return false;\n      }\n      if (val_a.length !== val_b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < val_a.length; i++) {\n        if (!isNodesEquivalent(val_a[i], val_b[i])) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (typeof val_a === \"object\" && !visitorKeys?.includes(field)) {\n      for (const key of Object.keys(val_a)) {\n        if (val_a[key] !== val_b[key]) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (!isNodesEquivalent(val_a, val_b)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n",null,"import type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a reference to a bound variable.\n */\nexport default function isReferenced(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  switch (parent.type) {\n    // yes: PARENT[NODE]\n    // yes: NODE.child\n    // no: parent.NODE\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n      if (parent.property === node) {\n        return !!parent.computed;\n      }\n      return parent.object === node;\n\n    case \"JSXMemberExpression\":\n      return parent.object === node;\n    // no: let NODE = init;\n    // yes: let id = NODE;\n    case \"VariableDeclarator\":\n      return parent.init === node;\n\n    // yes: () => NODE\n    // no: (NODE) => {}\n    case \"ArrowFunctionExpression\":\n      return parent.body === node;\n\n    // no: class { #NODE; }\n    // no: class { get #NODE() {} }\n    // no: class { #NODE() {} }\n    // no: class { fn() { return this.#NODE; } }\n    case \"PrivateName\":\n      return false;\n\n    // no: class { NODE() {} }\n    // yes: class { [NODE]() {} }\n    // no: class { foo(NODE) {} }\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"ObjectMethod\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return false;\n\n    // yes: { [NODE]: \"\" }\n    // no: { NODE: \"\" }\n    // depends: { NODE }\n    // depends: { key: NODE }\n    case \"ObjectProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      // parent.value === node\n      return !grandparent || grandparent.type !== \"ObjectPattern\";\n    // no: class { NODE = value; }\n    // yes: class { [NODE] = value; }\n    // yes: class { key = NODE; }\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n    case \"ClassPrivateProperty\":\n      return parent.key !== node;\n\n    // no: class NODE {}\n    // yes: class Foo extends NODE {}\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n      return parent.superClass === node;\n\n    // yes: left = NODE;\n    // no: NODE = right;\n    case \"AssignmentExpression\":\n      return parent.right === node;\n\n    // no: [NODE = foo] = [];\n    // yes: [foo = NODE] = [];\n    case \"AssignmentPattern\":\n      return parent.right === node;\n\n    // no: NODE: for (;;) {}\n    case \"LabeledStatement\":\n      return false;\n\n    // no: try {} catch (NODE) {}\n    case \"CatchClause\":\n      return false;\n\n    // no: function foo(...NODE) {}\n    case \"RestElement\":\n      return false;\n\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n      return false;\n\n    // no: function NODE() {}\n    // no: function foo(NODE) {}\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n      return false;\n\n    // no: export NODE from \"foo\";\n    // no: export * as NODE from \"foo\";\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      return false;\n\n    // no: export { foo as NODE };\n    // yes: export { NODE as foo };\n    // no: export { NODE as foo } from \"foo\";\n    case \"ExportSpecifier\":\n      // @ts-expect-error todo(flow->ts): Property 'source' does not exist on type 'AnyTypeAnnotation'.\n      if (grandparent?.source) {\n        return false;\n      }\n      return parent.local === node;\n\n    // no: import NODE from \"foo\";\n    // no: import * as NODE from \"foo\";\n    // no: import { NODE as foo } from \"foo\";\n    // no: import { foo as NODE } from \"foo\";\n    // no: import NODE from \"bar\";\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n      return false;\n\n    // no: import \"foo\" assert { NODE: \"json\" }\n    case \"ImportAttribute\":\n      return false;\n\n    // no: <div NODE=\"foo\" />\n    case \"JSXAttribute\":\n      return false;\n\n    // no: [NODE] = [];\n    // no: ({ NODE }) = [];\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return false;\n\n    // no: new.NODE\n    // no: NODE.target\n    case \"MetaProperty\":\n      return false;\n\n    // yes: type X = { someProperty: NODE }\n    // no: type X = { NODE: OtherType }\n    case \"ObjectTypeProperty\":\n      return parent.key !== node;\n\n    // yes: enum X { Foo = NODE }\n    // no: enum X { NODE }\n    case \"TSEnumMember\":\n      return parent.id !== node;\n\n    // yes: { [NODE]: value }\n    // no: { NODE: value }\n    case \"TSPropertySignature\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n\n      return true;\n  }\n\n  return true;\n}\n",null,"import {\n  isFunction,\n  isCatchClause,\n  isBlockStatement,\n  isScopable,\n  isPattern,\n} from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a scope.\n */\nexport default function isScope(node: t.Node, parent: t.Node): boolean {\n  // If a BlockStatement is an immediate descendent of a Function/CatchClause, it must be in the body.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isBlockStatement(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return false;\n  }\n\n  // If a Pattern is an immediate descendent of a Function/CatchClause, it must be in the params.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isPattern(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return true;\n  }\n\n  return isScopable(node);\n}\n",null,"import { isIdentifier, isImportDefaultSpecifier } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `specifier` is a `default` import or export.\n */\nexport default function isSpecifierDefault(\n  specifier: t.ModuleSpecifier,\n): boolean {\n  return (\n    isImportDefaultSpecifier(specifier) ||\n    // @ts-expect-error todo(flow->ts): stricter type for specifier\n    isIdentifier(specifier.imported || specifier.exported, {\n      name: \"default\",\n    })\n  );\n}\n",null,"import isValidIdentifier from \"./isValidIdentifier.ts\";\n\nconst RESERVED_WORDS_ES3_ONLY: Set<string> = new Set([\n  \"abstract\",\n  \"boolean\",\n  \"byte\",\n  \"char\",\n  \"double\",\n  \"enum\",\n  \"final\",\n  \"float\",\n  \"goto\",\n  \"implements\",\n  \"int\",\n  \"interface\",\n  \"long\",\n  \"native\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"short\",\n  \"static\",\n  \"synchronized\",\n  \"throws\",\n  \"transient\",\n  \"volatile\",\n]);\n\n/**\n * Check if the input `name` is a valid identifier name according to the ES3 specification.\n *\n * Additional ES3 reserved words are\n */\nexport default function isValidES3Identifier(name: string): boolean {\n  return isValidIdentifier(name) && !RESERVED_WORDS_ES3_ONLY.has(name);\n}\n",null,"import { isVariableDeclaration } from \"./generated/index.ts\";\nimport { BLOCK_SCOPED_SYMBOL } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a variable declaration.\n */\nexport default function isVar(node: t.Node): boolean {\n  return (\n    isVariableDeclaration(node, { kind: \"var\" }) &&\n    !(\n      // @ts-expect-error document private properties\n      node[BLOCK_SCOPED_SYMBOL]\n    )\n  );\n}\n",null,"// TODO(Babel 8) Remove this file\nif (process.env.BABEL_8_BREAKING) {\n  throw new Error(\n    \"Internal Babel error: This file should only be loaded in Babel 7\",\n  );\n}\n\nimport gatherSequenceExpressions from \"./gatherSequenceExpressions.ts\";\nimport type * as t from \"../index.ts\";\nimport type { DeclarationInfo } from \"./gatherSequenceExpressions.ts\";\n\n/**\n * Turn an array of statement `nodes` into a `SequenceExpression`.\n *\n * Variable declarations are turned into simple assignments and their\n * declarations hoisted to the top of the current scope.\n *\n * Expression statements are just resolved to their expression.\n */\nexport default function toSequenceExpression(\n  nodes: ReadonlyArray<t.Node>,\n  scope: any,\n): t.SequenceExpression | undefined {\n  if (!nodes?.length) return;\n\n  const declars: DeclarationInfo[] = [];\n  const result = gatherSequenceExpressions(nodes, scope, declars);\n  if (!result) return;\n\n  for (const declar of declars) {\n    scope.push(declar);\n  }\n\n  // @ts-expect-error fixme: gatherSequenceExpressions will return an Expression when there are only one element\n  return result;\n}\n",null,"// TODO(Babel 8) Remove this file\nif (process.env.BABEL_8_BREAKING) {\n  throw new Error(\n    \"Internal Babel error: This file should only be loaded in Babel 7\",\n  );\n}\n\nimport getBindingIdentifiers from \"../retrievers/getBindingIdentifiers.ts\";\nimport {\n  isExpression,\n  isExpressionStatement,\n  isVariableDeclaration,\n  isIfStatement,\n  isBlockStatement,\n  isEmptyStatement,\n} from \"../validators/generated/index.ts\";\nimport {\n  sequenceExpression,\n  assignmentExpression,\n  conditionalExpression,\n} from \"../builders/generated/index.ts\";\nimport cloneNode from \"../clone/cloneNode.ts\";\nimport type * as t from \"../index.ts\";\nimport type { Scope } from \"@babel/traverse\";\n\nexport type DeclarationInfo = {\n  kind: t.VariableDeclaration[\"kind\"];\n  id: t.Identifier;\n};\n\nexport default function gatherSequenceExpressions(\n  nodes: ReadonlyArray<t.Node>,\n  scope: Scope,\n  declars: Array<DeclarationInfo>,\n) {\n  const exprs: t.Expression[] = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    // if we encounter emptyStatement before a non-emptyStatement\n    // we want to disregard that\n    if (!isEmptyStatement(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if (isExpression(node)) {\n      exprs.push(node);\n    } else if (isExpressionStatement(node)) {\n      exprs.push(node.expression);\n    } else if (isVariableDeclaration(node)) {\n      if (node.kind !== \"var\") return; // bailed\n\n      for (const declar of node.declarations) {\n        const bindings = getBindingIdentifiers(declar);\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: cloneNode(bindings[key]),\n          });\n        }\n\n        if (declar.init) {\n          exprs.push(assignmentExpression(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if (isIfStatement(node)) {\n      const consequent = node.consequent\n        ? gatherSequenceExpressions([node.consequent], scope, declars)\n        : scope.buildUndefinedNode();\n      const alternate = node.alternate\n        ? gatherSequenceExpressions([node.alternate], scope, declars)\n        : scope.buildUndefinedNode();\n      if (!consequent || !alternate) return; // bailed\n\n      exprs.push(conditionalExpression(node.test, consequent, alternate));\n    } else if (isBlockStatement(node)) {\n      const body = gatherSequenceExpressions(node.body, scope, declars);\n      if (!body) return; // bailed\n\n      exprs.push(body);\n    } else if (isEmptyStatement(node)) {\n      // empty statement so ensure the last item is undefined if we're last\n      // checks if emptyStatement is first\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      // bailed, we can't turn this statement into an expression\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) {\n    exprs.push(scope.buildUndefinedNode());\n  }\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return sequenceExpression(exprs);\n  }\n}\n"],"names":["helper","backend","view","assertArrowFunctionExpression","updateExpression","document","addEventListener","posts","getPosts","user","getCurrentUser","buildPosts","newPostButton","getElementById","modal","openModal","loginForm","event","preventDefault","elements","target","auth","authUser","value","pwd","loginError","closeModal","reset","form","post","buildPost","title","body","name","id","pushPost","modalClosers","querySelectorAll","forEach","button","parentElement","nextElementSibling","deletionButtons","dialog","deletePost","dataset","post_id","upatedPosts","logout","logoutUser","author","author_id","PocketBase","url","pb","records","collection","getFullList","sort","error","console","log","create","delete","username","password","authData","authWithPassword","authStore","model","clear","ClientResponseError","Error","constructor","errData","super","this","status","response","isAbort","originalError","Object","setPrototypeOf","prototype","data","DOMException","message","cause","includes","toJSON","fieldContentRegExp","cookieParse","str","options","result","decode","assign","defaultDecode","index","length","eqIdx","indexOf","endIdx","lastIndexOf","key","slice","trim","undefined","val","charCodeAt","_","cookieSerialize","opt","encode","defaultEncode","test","TypeError","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","isDate","toString","call","Date","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","decodeURIComponent","encodeURIComponent","atobPolyfill","getTokenPayload","token","encodedPayload","split","map","c","join","JSON","parse","e","isTokenExpired","expirationThreshold","payload","keys","exp","now","atob","input","String","replace","bs","buffer","bc","idx","output","charAt","fromCharCode","defaultCookieKey","BaseAuthStore","baseToken","baseModel","_onChangeCallbacks","isValid","isAdmin","type","isAuthRecord","save","triggerChange","loadFromCookie","cookie","rawData","Array","isArray","exportToCookie","defaultOptions","stringify","resultLength","Blob","size","email","extraProps","prop","onChange","callback","fireImmediately","push","i","splice","LocalAuthStore","storageKey","storageFallback","_bindStorageEvent","_storageGet","_storageSet","_storageRemove","window","localStorage","rawValue","getItem","normalizedVal","setItem","removeItem","BaseService","client","SettingsService","getAll","method","send","update","bodyParams","testS3","filesystem","then","testEmail","toEmail","emailTemplate","template","generateAppleClientSecret","clientId","teamId","keyId","privateKey","duration","CrudService","batchOrqueryParams","_getFullList","batch","getList","page","perPage","query","baseCrudPath","responseData","items","item","getFirstListItem","filter","requestKey","skipTotal","code","getOne","buildUrl","batchSize","request","async","list","concat","normalizeLegacyOptionsArgs","legacyWarn","baseOptions","bodyOrOptions","hasQuery","warn","resetAutoRefresh","_resetAutoRefresh","AdminService","collectionId","success","authResponse","admin","identity","autoRefreshThreshold","autoRefresh","registerAutoRefresh","threshold","refreshFunc","reauthenticateFunc","oldBeforeSend","beforeSend","oldModel","unsubStoreChange","newToken","sendOptions","oldToken","headers","authRefresh","bind","requestPasswordReset","confirmPasswordReset","resetToken","passwordConfirm","knownSendOptionsKeys","normalizeUnknownQueryParams","RealtimeService","eventSource","subscriptions","lastSentSubscriptions","maxConnectTimeout","reconnectAttempts","maxReconnectAttempts","Infinity","predefinedReconnectIntervals","pendingConnects","isConnected","subscribe","topic","serialized","listener","msgEvent","submitSubscriptions","connect","unsubscribeByTopicAndListener","unsubscribe","needToSubmit","subs","getSubscriptionsByTopic","hasSubscriptionListeners","removeEventListener","disconnect","unsubscribeByPrefix","keyPrefix","hasAtleastOneTopic","startsWith","exist","keyToCheck","addAllSubscriptionListeners","getNonEmptySubscriptionKeys","getSubscriptionsCancelKey","catch","err","removeAllSubscriptionListeners","Promise","resolve","reject","initConnect","clearTimeout","connectTimeoutId","setTimeout","connectErrorHandler","EventSource","onerror","lastEventId","retries","hasUnsentSubscriptions","p","reconnectTimeoutId","connectSubs","latestTopics","t","timeout","fromReconnect","cancelRequest","close","RecordService","collectionIdOrName","baseCollectionPath","realtime","batchOrOptions","params","collectionName","record","listAuthMethods","usernamePassword","emailPassword","authProviders","usernameOrEmail","authWithOAuth2Code","provider","codeVerifier","redirectUrl","createData","authWithOAuth2","args","config","find","eagerDefaultPopup","cleanup","urlCallback","openBrowserPopup","oldState","state","scopes","replacements","_replaceQueryParams","authUrl","location","href","passwordResetToken","requestVerification","confirmVerification","verificationToken","verified","requestEmailChange","newEmail","confirmEmailChange","emailChangeToken","listExternalAuths","recordId","unlinkExternalAuth","urlPath","substring","parsedParams","rawParams","param","pair","hasOwnProperty","open","width","height","windowWidth","innerWidth","windowHeight","innerHeight","left","top","CollectionService","import","collections","deleteMissing","LogService","getStats","HealthService","check","FileService","getUrl","filename","queryParams","parts","download","URLSearchParams","getToken","BackupService","basename","upload","restore","getDownloadUrl","Client","baseUrl","lang","cancelControllers","recordServices","enableAutoCancellation","admins","files","logs","settings","health","backups","idOrName","autoCancellation","enable","abort","cancelAllRequests","k","raw","toISOString","replaceAll","getFileUrl","origin","endsWith","pathname","initSendOptions","serializeQueryParams","getHeader","fetch","json","afterSend","convertToFormDataIfNeeded","$autoCancel","$cancelKey","isFormData","Authorization","controller","AbortController","signal","FormData","hasBlobField","v","append","values","File","encodedKey","AsyncAuthStore","queue","saveFunc","clearFunc","_enqueue","_loadInitial","initial","parsed","asyncCallback","_dequeue","finally","shift","currentUser","postsContainer","hasChildNodes","removeChild","firstChild","buildHeading","textContent","createElement","classList","add","date","created","toDateString","byline","appendChild","del","innerHTML","onclick","deletionModal","divider","announcement","authHeading","style","display","showModal","errorMsg","_isReactComponent","require","_isCompatTag","_buildChildren","_assertNode","_index","_exportNames","exports","defineProperty","enumerable","get","_createTypeAnnotationBasedOnTypeof","_createFlowUnionType","_createTSUnionType","_index2","_uppercase","_productions","_cloneNode","_clone","_cloneDeep","_cloneDeepWithoutLoc","_cloneWithoutLoc","_addComment","_addComments","_inheritInnerComments","_inheritLeadingComments","_inheritsComments","_inheritTrailingComments","_removeComments","_index3","_index4","_ensureBlock","_toBindingIdentifierName","_toBlock","_toComputedKey","_toExpression","_toIdentifier","_toKeyAlias","_toStatement","_valueToNode","_index5","_appendToMemberExpression","_inherits","_prependToMemberExpression","_removeProperties","_removePropertiesDeep","_removeTypeDuplicates","_getBindingIdentifiers","_getOuterBindingIdentifiers","_traverse","_traverseFast","_shallowEqual","_is","_isBinding","_isBlockScoped","_isImmutable","_isLet","_isNode","_isNodesEquivalent","_isPlaceholderType","_isReferenced","_isScope","_isSpecifierDefault","_isType","_isValidES3Identifier","_isValidIdentifier","_isVar","_matchesPattern","_validate","_buildMatchMemberExpression","_index6","_deprecationWarning","react","isReactComponent","isCompatTag","buildChildren","toSequenceExpression","default","buildMatchMemberExpression","_default","match","allowPartial","member","matchesPattern","isMemberExpression","nodes","node","object","property","j","isIdentifier","isStringLiteral","isThisExpression","isArrayExpression","opts","shallowEqual","isAssignmentExpression","isBinaryExpression","isInterpreterDirective","isDirective","isDirectiveLiteral","isBlockStatement","isBreakStatement","isCallExpression","isCatchClause","isConditionalExpression","isContinueStatement","isDebuggerStatement","isDoWhileStatement","isEmptyStatement","isExpressionStatement","isFile","isForInStatement","isForStatement","isFunctionDeclaration","isFunctionExpression","isIfStatement","isLabeledStatement","isNumericLiteral","isNullLiteral","isBooleanLiteral","isRegExpLiteral","isLogicalExpression","isNewExpression","isProgram","isObjectExpression","isObjectMethod","isObjectProperty","isRestElement","isReturnStatement","isSequenceExpression","isParenthesizedExpression","isSwitchCase","isSwitchStatement","isThrowStatement","isTryStatement","isUnaryExpression","isUpdateExpression","isVariableDeclaration","isVariableDeclarator","isWhileStatement","isWithStatement","isAssignmentPattern","isArrayPattern","isArrowFunctionExpression","isClassBody","isClassExpression","isClassDeclaration","isExportAllDeclaration","isExportDefaultDeclaration","isExportNamedDeclaration","isExportSpecifier","isForOfStatement","isImportDeclaration","isImportDefaultSpecifier","isImportNamespaceSpecifier","isImportSpecifier","isImportExpression","isMetaProperty","isClassMethod","isObjectPattern","isSpreadElement","isSuper","isTaggedTemplateExpression","isTemplateElement","isTemplateLiteral","isYieldExpression","isAwaitExpression","isImport","isBigIntLiteral","isExportNamespaceSpecifier","isOptionalMemberExpression","isOptionalCallExpression","isClassProperty","isClassAccessorProperty","isClassPrivateProperty","isClassPrivateMethod","isPrivateName","isStaticBlock","isAnyTypeAnnotation","isArrayTypeAnnotation","isBooleanTypeAnnotation","isBooleanLiteralTypeAnnotation","isNullLiteralTypeAnnotation","isClassImplements","isDeclareClass","isDeclareFunction","isDeclareInterface","isDeclareModule","isDeclareModuleExports","isDeclareTypeAlias","isDeclareOpaqueType","isDeclareVariable","isDeclareExportDeclaration","isDeclareExportAllDeclaration","isDeclaredPredicate","isExistsTypeAnnotation","isFunctionTypeAnnotation","isFunctionTypeParam","isGenericTypeAnnotation","isInferredPredicate","isInterfaceExtends","isInterfaceDeclaration","isInterfaceTypeAnnotation","isIntersectionTypeAnnotation","isMixedTypeAnnotation","isEmptyTypeAnnotation","isNullableTypeAnnotation","isNumberLiteralTypeAnnotation","isNumberTypeAnnotation","isObjectTypeAnnotation","isObjectTypeInternalSlot","isObjectTypeCallProperty","isObjectTypeIndexer","isObjectTypeProperty","isObjectTypeSpreadProperty","isOpaqueType","isQualifiedTypeIdentifier","isStringLiteralTypeAnnotation","isStringTypeAnnotation","isSymbolTypeAnnotation","isThisTypeAnnotation","isTupleTypeAnnotation","isTypeofTypeAnnotation","isTypeAlias","isTypeAnnotation","isTypeCastExpression","isTypeParameter","isTypeParameterDeclaration","isTypeParameterInstantiation","isUnionTypeAnnotation","isVariance","isVoidTypeAnnotation","isEnumDeclaration","isEnumBooleanBody","isEnumNumberBody","isEnumStringBody","isEnumSymbolBody","isEnumBooleanMember","isEnumNumberMember","isEnumStringMember","isEnumDefaultedMember","isIndexedAccessType","isOptionalIndexedAccessType","isJSXAttribute","isJSXClosingElement","isJSXElement","isJSXEmptyExpression","isJSXExpressionContainer","isJSXSpreadChild","isJSXIdentifier","isJSXMemberExpression","isJSXNamespacedName","isJSXOpeningElement","isJSXSpreadAttribute","isJSXText","isJSXFragment","isJSXOpeningFragment","isJSXClosingFragment","isNoop","isPlaceholder","isV8IntrinsicIdentifier","isArgumentPlaceholder","isBindExpression","isImportAttribute","isDecorator","isDoExpression","isExportDefaultSpecifier","isRecordExpression","isTupleExpression","isDecimalLiteral","isModuleExpression","isTopicReference","isPipelineTopicExpression","isPipelineBareFunction","isPipelinePrimaryTopicReference","isTSParameterProperty","isTSDeclareFunction","isTSDeclareMethod","isTSQualifiedName","isTSCallSignatureDeclaration","isTSConstructSignatureDeclaration","isTSPropertySignature","isTSMethodSignature","isTSIndexSignature","isTSAnyKeyword","isTSBooleanKeyword","isTSBigIntKeyword","isTSIntrinsicKeyword","isTSNeverKeyword","isTSNullKeyword","isTSNumberKeyword","isTSObjectKeyword","isTSStringKeyword","isTSSymbolKeyword","isTSUndefinedKeyword","isTSUnknownKeyword","isTSVoidKeyword","isTSThisType","isTSFunctionType","isTSConstructorType","isTSTypeReference","isTSTypePredicate","isTSTypeQuery","isTSTypeLiteral","isTSArrayType","isTSTupleType","isTSOptionalType","isTSRestType","isTSNamedTupleMember","isTSUnionType","isTSIntersectionType","isTSConditionalType","isTSInferType","isTSParenthesizedType","isTSTypeOperator","isTSIndexedAccessType","isTSMappedType","isTSLiteralType","isTSExpressionWithTypeArguments","isTSInterfaceDeclaration","isTSInterfaceBody","isTSTypeAliasDeclaration","isTSInstantiationExpression","isTSAsExpression","isTSSatisfiesExpression","isTSTypeAssertion","isTSEnumDeclaration","isTSEnumMember","isTSModuleDeclaration","isTSModuleBlock","isTSImportType","isTSImportEqualsDeclaration","isTSExternalModuleReference","isTSNonNullExpression","isTSExportAssignment","isTSNamespaceExportDeclaration","isTSTypeAnnotation","isTSTypeParameterInstantiation","isTSTypeParameterDeclaration","isTSTypeParameter","isStandardized","expectedNode","isExpression","isBinary","isScopable","isBlockParent","isBlock","isStatement","isTerminatorless","isCompletionStatement","isConditional","isLoop","isWhile","isExpressionWrapper","isFor","isForXStatement","isFunction","isFunctionParent","isPureish","isDeclaration","isPatternLike","isLVal","isTSEntityName","isLiteral","isImmutable","isUserWhitespacable","isMethod","isObjectMember","isProperty","isUnaryLike","isPattern","isClass","isImportOrExportDeclaration","isExportDeclaration","isModuleSpecifier","isAccessor","isPrivate","isFlow","isFlowType","isFlowBaseAnnotation","isFlowDeclaration","isFlowPredicate","isEnumBody","isEnumMember","isJSX","isMiscellaneous","isTypeScript","isTSTypeElement","isTSType","isTSBaseType","isNumberLiteral","deprecationWarning","isRegexLiteral","isRestProperty","isSpreadProperty","isModuleDeclaration","actual","expected","warnings","Set","oldName","newName","prefix","has","internal","trace","captureShortStackTrace","skip","stackTraceLimit","prepareStackTrace","stackTrace","stack","shortStackTrace","getFileName","frame","tagName","_cleanJSXElementLiteralChild","children","child","cleanJSXElementLiteralChild","expression","lines","lastNonEmptyLine","line","isFirstLine","isLastLine","isLastNonEmptyLine","trimmedLine","inherits","stringLiteral","_validateNode","arrayExpression","validateNode","assignmentExpression","operator","right","binaryExpression","interpreterDirective","directive","directiveLiteral","blockStatement","directives","breakStatement","label","callExpression","callee","_arguments","arguments","catchClause","conditionalExpression","consequent","alternate","continueStatement","debuggerStatement","doWhileStatement","emptyStatement","expressionStatement","file","program","comments","tokens","forInStatement","forStatement","init","functionDeclaration","generator","functionExpression","identifier","ifStatement","labeledStatement","numericLiteral","nullLiteral","booleanLiteral","regExpLiteral","pattern","flags","logicalExpression","memberExpression","computed","optional","newExpression","sourceType","interpreter","objectExpression","properties","objectMethod","kind","objectProperty","shorthand","decorators","restElement","argument","returnStatement","sequenceExpression","expressions","parenthesizedExpression","switchCase","switchStatement","discriminant","cases","thisExpression","throwStatement","tryStatement","block","handler","finalizer","unaryExpression","variableDeclaration","declarations","variableDeclarator","whileStatement","withStatement","assignmentPattern","arrayPattern","arrowFunctionExpression","classBody","classExpression","superClass","classDeclaration","exportAllDeclaration","source","exportDefaultDeclaration","declaration","exportNamedDeclaration","specifiers","exportSpecifier","local","exported","forOfStatement","_await","await","importDeclaration","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","imported","importExpression","metaProperty","meta","classMethod","_static","static","objectPattern","spreadElement","_super","taggedTemplateExpression","tag","quasi","templateElement","tail","templateLiteral","quasis","yieldExpression","delegate","awaitExpression","_import","bigIntLiteral","exportNamespaceSpecifier","optionalMemberExpression","optionalCallExpression","classProperty","typeAnnotation","classAccessorProperty","classPrivateProperty","classPrivateMethod","privateName","staticBlock","anyTypeAnnotation","arrayTypeAnnotation","elementType","booleanTypeAnnotation","booleanLiteralTypeAnnotation","nullLiteralTypeAnnotation","classImplements","typeParameters","declareClass","_extends","extends","declareFunction","declareInterface","declareModule","declareModuleExports","declareTypeAlias","declareOpaqueType","supertype","declareVariable","declareExportDeclaration","declareExportAllDeclaration","declaredPredicate","existsTypeAnnotation","functionTypeAnnotation","rest","returnType","functionTypeParam","genericTypeAnnotation","inferredPredicate","interfaceExtends","interfaceDeclaration","interfaceTypeAnnotation","intersectionTypeAnnotation","types","mixedTypeAnnotation","emptyTypeAnnotation","nullableTypeAnnotation","numberLiteralTypeAnnotation","numberTypeAnnotation","objectTypeAnnotation","indexers","callProperties","internalSlots","exact","objectTypeInternalSlot","objectTypeCallProperty","objectTypeIndexer","variance","objectTypeProperty","proto","objectTypeSpreadProperty","opaqueType","impltype","qualifiedTypeIdentifier","qualification","stringLiteralTypeAnnotation","stringTypeAnnotation","symbolTypeAnnotation","thisTypeAnnotation","tupleTypeAnnotation","typeofTypeAnnotation","typeAlias","typeCastExpression","typeParameter","bound","typeParameterDeclaration","typeParameterInstantiation","unionTypeAnnotation","voidTypeAnnotation","enumDeclaration","enumBooleanBody","members","explicitType","hasUnknownMembers","enumNumberBody","enumStringBody","enumSymbolBody","enumBooleanMember","enumNumberMember","enumStringMember","enumDefaultedMember","indexedAccessType","objectType","indexType","optionalIndexedAccessType","jsxAttribute","jsxClosingElement","jsxElement","openingElement","closingElement","selfClosing","jsxEmptyExpression","jsxExpressionContainer","jsxSpreadChild","jsxIdentifier","jsxMemberExpression","jsxNamespacedName","namespace","jsxOpeningElement","attributes","jsxSpreadAttribute","jsxText","jsxFragment","openingFragment","closingFragment","jsxOpeningFragment","jsxClosingFragment","noop","placeholder","v8IntrinsicIdentifier","argumentPlaceholder","bindExpression","importAttribute","decorator","doExpression","exportDefaultSpecifier","recordExpression","tupleExpression","decimalLiteral","moduleExpression","topicReference","pipelineTopicExpression","pipelineBareFunction","pipelinePrimaryTopicReference","tsParameterProperty","parameter","tsDeclareFunction","tsDeclareMethod","tsQualifiedName","tsCallSignatureDeclaration","parameters","tsConstructSignatureDeclaration","tsPropertySignature","tsMethodSignature","tsIndexSignature","tsAnyKeyword","tsBooleanKeyword","tsBigIntKeyword","tsIntrinsicKeyword","tsNeverKeyword","tsNullKeyword","tsNumberKeyword","tsObjectKeyword","tsStringKeyword","tsSymbolKeyword","tsUndefinedKeyword","tsUnknownKeyword","tsVoidKeyword","tsThisType","tsFunctionType","tsConstructorType","tsTypeReference","typeName","tsTypePredicate","parameterName","asserts","tsTypeQuery","exprName","tsTypeLiteral","tsArrayType","tsTupleType","elementTypes","tsOptionalType","tsRestType","tsNamedTupleMember","tsUnionType","tsIntersectionType","tsConditionalType","checkType","extendsType","trueType","falseType","tsInferType","tsParenthesizedType","tsTypeOperator","tsIndexedAccessType","tsMappedType","nameType","tsLiteralType","literal","tsExpressionWithTypeArguments","tsInterfaceDeclaration","tsInterfaceBody","tsTypeAliasDeclaration","tsInstantiationExpression","tsAsExpression","tsSatisfiesExpression","tsTypeAssertion","tsEnumDeclaration","tsEnumMember","initializer","tsModuleDeclaration","tsModuleBlock","tsImportType","qualifier","tsImportEqualsDeclaration","moduleReference","isExport","tsExternalModuleReference","tsNonNullExpression","tsExportAssignment","tsNamespaceExportDeclaration","tsTypeAnnotation","tsTypeParameterInstantiation","tsTypeParameterDeclaration","tsTypeParameter","constraint","NumberLiteral","RegexLiteral","RestProperty","SpreadProperty","BUILDER_KEYS","validate","fields","NODE_FIELDS","field","validateField","validateChild","NODE_PARENT_VALIDATIONS","_toFastProperties","_utils","_placeholders","_deprecatedAliases","DEPRECATED_ALIASES","deprecatedAlias","FLIPPED_ALIAS_KEYS","toFastProperties","VISITOR_KEYS","ALIAS_KEYS","DEPRECATED_KEYS","PLACEHOLDERS_ALIAS","PLACEHOLDERS_FLIPPED_ALIAS","TYPES","_helperValidatorIdentifier","_helperStringParser","defineType","defineAliasedType","chain","assertValueType","assertEach","assertNodeOrValueType","process","env","BABEL_TYPES_8_BREAKING","visitor","aliases","assertOneOf","ASSIGNMENT_OPERATORS","validator","is","assertNodeType","builder","BINARY_OPERATORS","inOp","oneOfNodeTypes","typeArguments","each","functionCommon","functionTypeAnnotationCommon","functionDeclarationCommon","declare","predicate","parent","patternLikeCommon","isValidIdentifier","exec","parentKey","nonComp","isKeyword","isReservedWord","Number","invalid","LOGICAL_OPERATORS","normal","listKey","UNARY_OPERATORS","UPDATE_OPERATORS","without","definite","superTypeParameters","implements","mixins","abstract","exportKind","validateOptional","assertions","sourced","sourceless","lval","module","phase","importKind","classMethodOrPropertyCommon","accessibility","override","classMethodOrDeclareMethodCommon","access","assertShape","cooked","templateElementCookedValidator","unterminatedCalled","firstInvalidLoc","readStringContents","unterminated","strictNumericEscape","invalidEscapeSequence","numericSeparatorInEscapeSequence","unexpectedNumericSeparator","invalidDigit","invalidCodePoint","assertOptionalChainStart","readonly","matches","isType","isPlaceholderType","nodeType","targetType","alias","placeholderType","reserved","isStrictReservedWord","isIdentifierName","_identifier","_keyword","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","set","pos","isIdentifierStart","isIdentifierChar","isFirst","cp","trail","reservedWords","keyword","strict","strictBind","keywords","reservedWordsStrictSet","reservedWordsStrictBindSet","word","inModule","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","lineStart","curLine","errors","initialPos","initialLineStart","initialCurLine","out","chunkStart","isStringEnd","res","readEscapedChar","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","startPos","octalStr","octal","parseInt","next","len","forceLen","n","readInt","radix","allowNumSeparator","bailOnError","start","forbiddenSiblings","isAllowedSibling","total","prev","_isDigit","STATEMENT_OR_BLOCK_KEYS","FLATTENABLE_KEYS","FOR_INIT_KEYS","COMMENT_KEYS","BOOLEAN_NUMBER_BINARY_OPERATORS","EQUALITY_BINARY_OPERATORS","COMPARISON_BINARY_OPERATORS","BOOLEAN_BINARY_OPERATORS","NUMBER_BINARY_OPERATORS","op","BOOLEAN_UNARY_OPERATORS","NUMBER_UNARY_OPERATORS","STRING_UNARY_OPERATORS","INHERIT_KEYS","force","BLOCK_SCOPED_SYMBOL","Symbol","for","NOT_LOCAL_BINDING","getType","typeIs","validateType","validateOptionalType","arrayOf","arrayOfType","validateArrayOfType","subkey","oneOf","oneOfNodeOrValueTypes","valid","shape","shapeOf","_current","current","fns","fn","chainOf","validTypeOpts","validFieldKeys","store","defined","_store$opts$inherits$","_defined","additional","a","unshift","getOwnPropertyNames","def","deprecated","defineInterfaceishType","inexact","PLACEHOLDERS","Declaration","Pattern","_core","bool","tSFunctionTypeAnnotationCommon","signatureDeclarationCommon","callConstructSignatureDeclaration","namedTypeElementCommon","tsKeywordTypes","fnOrCtrBase","unionOrIntersection","unaryOperator","TSTypeExpression","const","global","in","ModuleDeclaration","assertNode","isNode","_node$type","assert","assertArrayExpression","assertAssignmentExpression","assertBinaryExpression","assertInterpreterDirective","assertDirective","assertDirectiveLiteral","assertBlockStatement","assertBreakStatement","assertCallExpression","assertCatchClause","assertConditionalExpression","assertContinueStatement","assertDebuggerStatement","assertDoWhileStatement","assertEmptyStatement","assertExpressionStatement","assertFile","assertForInStatement","assertForStatement","assertFunctionDeclaration","assertFunctionExpression","assertIdentifier","assertIfStatement","assertLabeledStatement","assertStringLiteral","assertNumericLiteral","assertNullLiteral","assertBooleanLiteral","assertRegExpLiteral","assertLogicalExpression","assertMemberExpression","assertNewExpression","assertProgram","assertObjectExpression","assertObjectMethod","assertObjectProperty","assertRestElement","assertReturnStatement","assertSequenceExpression","assertParenthesizedExpression","assertSwitchCase","assertSwitchStatement","assertThisExpression","assertThrowStatement","assertTryStatement","assertUnaryExpression","assertUpdateExpression","assertVariableDeclaration","assertVariableDeclarator","assertWhileStatement","assertWithStatement","assertAssignmentPattern","assertArrayPattern","assertClassBody","assertClassExpression","assertClassDeclaration","assertExportAllDeclaration","assertExportDefaultDeclaration","assertExportNamedDeclaration","assertExportSpecifier","assertForOfStatement","assertImportDeclaration","assertImportDefaultSpecifier","assertImportNamespaceSpecifier","assertImportSpecifier","assertImportExpression","assertMetaProperty","assertClassMethod","assertObjectPattern","assertSpreadElement","assertSuper","assertTaggedTemplateExpression","assertTemplateElement","assertTemplateLiteral","assertYieldExpression","assertAwaitExpression","assertImport","assertBigIntLiteral","assertExportNamespaceSpecifier","assertOptionalMemberExpression","assertOptionalCallExpression","assertClassProperty","assertClassAccessorProperty","assertClassPrivateProperty","assertClassPrivateMethod","assertPrivateName","assertStaticBlock","assertAnyTypeAnnotation","assertArrayTypeAnnotation","assertBooleanTypeAnnotation","assertBooleanLiteralTypeAnnotation","assertNullLiteralTypeAnnotation","assertClassImplements","assertDeclareClass","assertDeclareFunction","assertDeclareInterface","assertDeclareModule","assertDeclareModuleExports","assertDeclareTypeAlias","assertDeclareOpaqueType","assertDeclareVariable","assertDeclareExportDeclaration","assertDeclareExportAllDeclaration","assertDeclaredPredicate","assertExistsTypeAnnotation","assertFunctionTypeAnnotation","assertFunctionTypeParam","assertGenericTypeAnnotation","assertInferredPredicate","assertInterfaceExtends","assertInterfaceDeclaration","assertInterfaceTypeAnnotation","assertIntersectionTypeAnnotation","assertMixedTypeAnnotation","assertEmptyTypeAnnotation","assertNullableTypeAnnotation","assertNumberLiteralTypeAnnotation","assertNumberTypeAnnotation","assertObjectTypeAnnotation","assertObjectTypeInternalSlot","assertObjectTypeCallProperty","assertObjectTypeIndexer","assertObjectTypeProperty","assertObjectTypeSpreadProperty","assertOpaqueType","assertQualifiedTypeIdentifier","assertStringLiteralTypeAnnotation","assertStringTypeAnnotation","assertSymbolTypeAnnotation","assertThisTypeAnnotation","assertTupleTypeAnnotation","assertTypeofTypeAnnotation","assertTypeAlias","assertTypeAnnotation","assertTypeCastExpression","assertTypeParameter","assertTypeParameterDeclaration","assertTypeParameterInstantiation","assertUnionTypeAnnotation","assertVariance","assertVoidTypeAnnotation","assertEnumDeclaration","assertEnumBooleanBody","assertEnumNumberBody","assertEnumStringBody","assertEnumSymbolBody","assertEnumBooleanMember","assertEnumNumberMember","assertEnumStringMember","assertEnumDefaultedMember","assertIndexedAccessType","assertOptionalIndexedAccessType","assertJSXAttribute","assertJSXClosingElement","assertJSXElement","assertJSXEmptyExpression","assertJSXExpressionContainer","assertJSXSpreadChild","assertJSXIdentifier","assertJSXMemberExpression","assertJSXNamespacedName","assertJSXOpeningElement","assertJSXSpreadAttribute","assertJSXText","assertJSXFragment","assertJSXOpeningFragment","assertJSXClosingFragment","assertNoop","assertPlaceholder","assertV8IntrinsicIdentifier","assertArgumentPlaceholder","assertBindExpression","assertImportAttribute","assertDecorator","assertDoExpression","assertExportDefaultSpecifier","assertRecordExpression","assertTupleExpression","assertDecimalLiteral","assertModuleExpression","assertTopicReference","assertPipelineTopicExpression","assertPipelineBareFunction","assertPipelinePrimaryTopicReference","assertTSParameterProperty","assertTSDeclareFunction","assertTSDeclareMethod","assertTSQualifiedName","assertTSCallSignatureDeclaration","assertTSConstructSignatureDeclaration","assertTSPropertySignature","assertTSMethodSignature","assertTSIndexSignature","assertTSAnyKeyword","assertTSBooleanKeyword","assertTSBigIntKeyword","assertTSIntrinsicKeyword","assertTSNeverKeyword","assertTSNullKeyword","assertTSNumberKeyword","assertTSObjectKeyword","assertTSStringKeyword","assertTSSymbolKeyword","assertTSUndefinedKeyword","assertTSUnknownKeyword","assertTSVoidKeyword","assertTSThisType","assertTSFunctionType","assertTSConstructorType","assertTSTypeReference","assertTSTypePredicate","assertTSTypeQuery","assertTSTypeLiteral","assertTSArrayType","assertTSTupleType","assertTSOptionalType","assertTSRestType","assertTSNamedTupleMember","assertTSUnionType","assertTSIntersectionType","assertTSConditionalType","assertTSInferType","assertTSParenthesizedType","assertTSTypeOperator","assertTSIndexedAccessType","assertTSMappedType","assertTSLiteralType","assertTSExpressionWithTypeArguments","assertTSInterfaceDeclaration","assertTSInterfaceBody","assertTSTypeAliasDeclaration","assertTSInstantiationExpression","assertTSAsExpression","assertTSSatisfiesExpression","assertTSTypeAssertion","assertTSEnumDeclaration","assertTSEnumMember","assertTSModuleDeclaration","assertTSModuleBlock","assertTSImportType","assertTSImportEqualsDeclaration","assertTSExternalModuleReference","assertTSNonNullExpression","assertTSExportAssignment","assertTSNamespaceExportDeclaration","assertTSTypeAnnotation","assertTSTypeParameterInstantiation","assertTSTypeParameterDeclaration","assertTSTypeParameter","assertStandardized","assertExpression","assertBinary","assertScopable","assertBlockParent","assertBlock","assertStatement","assertTerminatorless","assertCompletionStatement","assertConditional","assertLoop","assertWhile","assertExpressionWrapper","assertFor","assertForXStatement","assertFunction","assertFunctionParent","assertPureish","assertDeclaration","assertPatternLike","assertLVal","assertTSEntityName","assertLiteral","assertImmutable","assertUserWhitespacable","assertMethod","assertObjectMember","assertProperty","assertUnaryLike","assertPattern","assertClass","assertImportOrExportDeclaration","assertExportDeclaration","assertModuleSpecifier","assertAccessor","assertPrivate","assertFlow","assertFlowType","assertFlowBaseAnnotation","assertFlowDeclaration","assertFlowPredicate","assertEnumBody","assertEnumMember","assertJSX","assertMiscellaneous","assertTypeScript","assertTSTypeElement","assertTSType","assertTSBaseType","assertNumberLiteral","assertRegexLiteral","assertRestProperty","assertSpreadProperty","assertModuleDeclaration","createTypeAnnotationBasedOnTypeof","createFlowUnionType","flattened","removeTypeDuplicates","getQualifiedName","nodesIn","from","generics","Map","bases","typeGroups","existing","baseType","genericName","createTSUnionType","typeAnnotations","buildUndefinedNode","hasOwn","Function","cloneIfNode","obj","deep","withoutLoc","commentsCache","cloneNodeInternal","cloneIfNodeOrArray","cloneNode","newNode","maybeCloneComments","loc","leadingComments","innerComments","trailingComments","extra","comment","cache","ret","clone","cloneDeep","cloneDeepWithoutLoc","cloneWithoutLoc","addComment","content","addComments","_inherit","inheritInnerComments","inherit","Boolean","inheritLeadingComments","inheritsComments","inheritTrailingComments","removeComments","STANDARDIZED_TYPES","EXPRESSION_TYPES","BINARY_TYPES","SCOPABLE_TYPES","BLOCKPARENT_TYPES","BLOCK_TYPES","STATEMENT_TYPES","TERMINATORLESS_TYPES","COMPLETIONSTATEMENT_TYPES","CONDITIONAL_TYPES","LOOP_TYPES","WHILE_TYPES","EXPRESSIONWRAPPER_TYPES","FOR_TYPES","FORXSTATEMENT_TYPES","FUNCTION_TYPES","FUNCTIONPARENT_TYPES","PUREISH_TYPES","DECLARATION_TYPES","PATTERNLIKE_TYPES","LVAL_TYPES","TSENTITYNAME_TYPES","LITERAL_TYPES","IMMUTABLE_TYPES","USERWHITESPACABLE_TYPES","METHOD_TYPES","OBJECTMEMBER_TYPES","PROPERTY_TYPES","UNARYLIKE_TYPES","PATTERN_TYPES","CLASS_TYPES","IMPORTOREXPORTDECLARATION_TYPES","EXPORTDECLARATION_TYPES","MODULESPECIFIER_TYPES","ACCESSOR_TYPES","PRIVATE_TYPES","FLOW_TYPES","FLOWTYPE_TYPES","FLOWBASEANNOTATION_TYPES","FLOWDECLARATION_TYPES","FLOWPREDICATE_TYPES","ENUMBODY_TYPES","ENUMMEMBER_TYPES","JSX_TYPES","MISCELLANEOUS_TYPES","TYPESCRIPT_TYPES","TSTYPEELEMENT_TYPES","TSTYPE_TYPES","TSBASETYPE_TYPES","MODULEDECLARATION_TYPES","ensureBlock","toBlock","blockNodes","toBindingIdentifierName","toIdentifier","codePointAt","toUpperCase","toComputedKey","toExpression","toKeyAlias","increment","removePropertiesDeep","uid","MAX_SAFE_INTEGER","tree","traverseFast","removeProperties","enter","subNode","CLEAR_KEYS","CLEAR_KEYS_PLUS_COMMENTS","preserveComments","symbols","getOwnPropertySymbols","sym","toStatement","ignore","mustHaveId","newType","valueToNode","objectToString","isRegExp","isPlainObject","getPrototypeOf","abs","numerator","props","nodeKey","appendToMemberExpression","prependToMemberExpression","prepend","getBindingIdentifiers","duplicates","outerOnly","newBindingsOnly","search","ids","_ids","DeclareClass","DeclareFunction","DeclareModule","DeclareVariable","DeclareInterface","DeclareTypeAlias","DeclareOpaqueType","InterfaceDeclaration","TypeAlias","OpaqueType","CatchClause","LabeledStatement","UnaryExpression","AssignmentExpression","ImportSpecifier","ImportNamespaceSpecifier","ImportDefaultSpecifier","ImportDeclaration","ExportSpecifier","ExportNamespaceSpecifier","ExportDefaultSpecifier","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","ObjectMethod","ClassMethod","ClassPrivateMethod","ForInStatement","ForOfStatement","ClassDeclaration","ClassExpression","RestElement","UpdateExpression","ObjectProperty","AssignmentPattern","ArrayPattern","ObjectPattern","VariableDeclaration","VariableDeclarator","getOuterBindingIdentifiers","traverse","handlers","exit","traverseSimpleImpl","ancestors","pop","isBinding","grandparent","isBlockScoped","isLet","isNodesEquivalent","b","visitorKeys","val_a","val_b","isReferenced","isScope","isSpecifierDefault","specifier","RESERVED_WORDS_ES3_ONLY","isValidES3Identifier","isVar","_gatherSequenceExpressions","scope","declars","gatherSequenceExpressions","declar","exprs","ensureLastUndefined","bindings"],"version":3,"file":"index.59a40e7a.js.map","sourceRoot":"/__parcel_source_root/"}